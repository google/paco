program
@before {
        PKTokenizer *t = self.tokenizer;
        
        // whitespace
/*		self.silentlyConsumesWhitespace = YES;
		t.whitespaceState.reportsWhitespaceTokens = YES;
		self.assembly.preservesWhitespaceTokens = YES;
*/
        [t.symbolState add:@"||"];
        [t.symbolState add:@"&&"];
        [t.symbolState add:@"!="];
        [t.symbolState add:@"!=="];
        [t.symbolState add:@"=="];
        [t.symbolState add:@"==="];
        [t.symbolState add:@"<="];
        [t.symbolState add:@">="];
        [t.symbolState add:@"++"];
        [t.symbolState add:@"--"];
        [t.symbolState add:@"+="];
        [t.symbolState add:@"-="];
        [t.symbolState add:@"*="];
        [t.symbolState add:@"/="];
        [t.symbolState add:@"%="];
        [t.symbolState add:@"<<"];
        [t.symbolState add:@">>"];
        [t.symbolState add:@">>>"];
        [t.symbolState add:@"<<="];
        [t.symbolState add:@">>="];
        [t.symbolState add:@">>>="];
        [t.symbolState add:@"&="];
        [t.symbolState add:@"^="];
        [t.symbolState add:@"|="];

        // setup comments
        t.commentState.reportsCommentTokens = YES;
        [t setTokenizerState:t.commentState from:'/' to:'/'];
        [t.commentState addSingleLineStartMarker:@"//"];
        [t.commentState addMultiLineStartMarker:@"/*" endMarker:@"*/"];
        
        // comment state should fallback to delimit state to match regex delimited strings
        t.commentState.fallbackState = t.delimitState;
        
        // regex delimited strings
        NSCharacterSet *cs = [[NSCharacterSet newlineCharacterSet] invertedSet];
        [t.delimitState addStartMarker:@"/" endMarker:@"/" allowedCharacterSet:cs];
}
	= stmts
	;

arrayLiteral
	= '[' (expr (',' expr)*)? ']'
	;

block
	= '{' stmts? '}'
	;
	
breakStmt
	= 'break' name? ';' // name = label
	;
	
caseClause
	= ('case' expr ':')+ stmts
	;
	
disruptiveStmt
	= breakStmt
	| returnStmt
	| throwStmt
	;
	
doStmt
	= 'do' block 'while' '(' expr ')' ';'
	;
	
escapedChar
	= Symbol // TODO
	;

exponent
	= Number // TODO
	;

expr
	= literal
	| name
	| '(' expr ')'
	| prefixOp expr
//	| expr (infixOp expr | '?' expr ':' expr | invocation | refinement) // TODO
	| 'new' expr invocation
	| 'delete' expr refinement
	;

exprStmt
	= (name refinement* '=')+ expr
	| name refinement* ('+=' | '-=') expr
	| name refinement* invocation+
	| 'delete' expr refinement
	;

forStmt
	= 'for'
	'(' 
	( exprStmt? ';' expr? ';' exprStmt? )
	|
	( name 'in' expr)
	')' block
	;

fraction
	= Number // TODO
	;

function
	= 'function' name parameters functionBody
	;

functionBody
	= '{' stmts '}'
	;

functionLiteral
	= 'function' name? parameters functionBody
	;

ifStmt
	= 'if' '(' expr ')' block ('else' ifStmt? block)? // TODO worried about ifStmt recursion here
	;

infixOp
	= '*'
	| '/'
	| '%'
	| '+'
	| '-'
	| '>='
	| '<='
	| '>'
	| '<'
	| '==='
	| '!=='
	| '||'
	| '&&'
	;

integer
	= Number // TODO
	;

invocation
	= '(' (expr (',' expr)*)? ')'
	;

literal
	= numberLiteral
	| stringLiteral
	| objectLiteral
	| arrayLiteral
	| functionLiteral
	| regexLiteral
	;

name
	= Word
	;

numberLiteral
	= Number
	;

objectLiteral
	= '{' (nameValPair (',' nameValPair)*)? '}'
	;
nameValPair // ADDED
	= (name|stringLiteral) ':' expr
	;

parameters
	= '(' (name (',' name)*)? ')'
	;

prefixOp // TODO removed explicitly positive / negative numbers
	= 'typeof'
	| '!'
	;

refinement
	= '.' name
	| '[' expr ']'
	;

regexLiteral // TODO big changes to regex
	= regexBody regexMods?
	;
regexBody // ADDED
    = %{'/', '/'}
    ;
regexMods
	= { MATCHES_IGNORE_CASE(@"[imxs]+", LS(1)) }? Word
	;
	
returnStmt
	= 'return' expr? ';'
	;

stmts
    = stmt*
    ;

stmt
    = varStmt
	| function 
	| nonFunction
	;
nonFunction // ADDED
	= (name ':')? // label
		( exprStmt ';'
		| disruptiveStmt
		| tryStmt
		| ifStmt
		| switchStmt
		| whileStmt
		| forStmt
		| doStmt
		)
	;

stringLiteral
	= QuotedString
	;

switchStmt
	= 'switch' '(' expr ')' '{' (caseClause disruptiveStmt?)+ ('default' ':' stmts)? '}'
	;

throwStmt
	= 'throw' expr ';'
	;

tryStmt
	= 'try' block 'catch' '(' name ')' block ('finally' block)?
	;
	
varStmt
	= ('var' nameExprPair (',' nameExprPair)* ';')*
	;
nameExprPair // ADDED
	= name ('=' expr)?;

whileStmt
	= 'while' '(' expr ')' block
	;

/*whitespace // TODO
	= S
	;
*/
//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/scheduling/NonESMSignalGenerator.java
//

#include "DateMidnight.h"
#import "org/joda/time/DateTime.h"
#include "DateTimeConstants.h"
#include "Days.h"
#include "EventInterface.h"
#include "EventStore.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Months.h"
#include "MutableDateTime.h"
#include "NonESMSignalGenerator.h"
#include "Schedule.h"
#include "SignalTime.h"
#include "Weeks.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface PANonESMSignalGenerator () {
 @public
  PASchedule *schedule_;
  JavaLangLong *experimentId_;
  id<PAEventStore> eventStore_;
  NSString *groupName_;
  JavaLangLong *actionTriggerId_;
}

- (OrgJodaTimeDateTime *)scheduleMonthlyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now;

- (OrgJodaTimeDateTime *)getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nextDay;

- (OrgJodaTimeDateTime *)scheduleWeeklyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now;

- (OrgJodaTimeDateTime *)scheduleDailyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now;

- (OrgJodaTimeDateTime *)scheduleWeekdayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now;

- (OrgJodaTimeDateTime *)getNextTimeTodayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                         withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight;

- (PANonESMSignalGenerator_SignalTimeHolder *)getTimeForSignalTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                  withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                           withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight
                                                                  withJavaLangLong:(JavaLangLong *)experimentId;

- (PANonESMSignalGenerator_SignalTimeHolder *)getNextTimeForOffsetTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                      withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                                      withJavaLangLong:(JavaLangLong *)experimentId;

- (PANonESMSignalGenerator_SignalTimeHolder *)getNextTimeForFixedTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                     withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                              withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight;

- (jboolean)previousEventHasResponseWithJavaUtilList:(id<JavaUtilList>)previousTimes;

- (PANonESMSignalGenerator_SignalTimeHolder *)createNullSignalTimeHolderWithPASignalTime:(PASignalTime *)signalTime;

- (OrgJodaTimeDateTime *)computeBasisTimeForOffsetTypeWithPASignalTime:(PASignalTime *)signalTime
                          withPANonESMSignalGenerator_SignalTimeHolder:(PANonESMSignalGenerator_SignalTimeHolder *)previousTimePair
                                                      withJavaLangLong:(JavaLangLong *)experimentId;

- (jboolean)retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder:(PANonESMSignalGenerator_SignalTimeHolder *)previousTimeCollector
                                                                    withJavaLangLong:(JavaLangLong *)experimentId;

- (OrgJodaTimeDateTime *)getNextScheduleDayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow;

- (JavaLangInteger *)getDOWFromIndexedValue;

- (OrgJodaTimeDateTime *)nextRepeatDailyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow;

- (OrgJodaTimeDateTime *)nextRepeatWeeklyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightNextDay;

- (OrgJodaTimeDateTime *)nextRepeatMonthlyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow;

@end

J2OBJC_FIELD_SETTER(PANonESMSignalGenerator, schedule_, PASchedule *)
J2OBJC_FIELD_SETTER(PANonESMSignalGenerator, experimentId_, JavaLangLong *)
J2OBJC_FIELD_SETTER(PANonESMSignalGenerator, eventStore_, id<PAEventStore>)
J2OBJC_FIELD_SETTER(PANonESMSignalGenerator, groupName_, NSString *)
J2OBJC_FIELD_SETTER(PANonESMSignalGenerator, actionTriggerId_, JavaLangLong *)

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleMonthlyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *nextDay);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleWeeklyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleDailyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleWeekdayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now, OrgJodaTimeDateTime *nowMidnight);

__attribute__((unused)) static PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getTimeForSignalTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, OrgJodaTimeDateTime *nowMidnight, JavaLangLong *experimentId);

__attribute__((unused)) static PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getNextTimeForOffsetTypeWithPASignalTime_withJavaUtilList_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, JavaLangLong *experimentId);

__attribute__((unused)) static PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getNextTimeForFixedTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, OrgJodaTimeDateTime *nowMidnight);

__attribute__((unused)) static jboolean PANonESMSignalGenerator_previousEventHasResponseWithJavaUtilList_(PANonESMSignalGenerator *self, id<JavaUtilList> previousTimes);

__attribute__((unused)) static PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(PANonESMSignalGenerator *self, PASignalTime *signalTime);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_computeBasisTimeForOffsetTypeWithPASignalTime_withPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, PANonESMSignalGenerator_SignalTimeHolder *previousTimePair, JavaLangLong *experimentId);

__attribute__((unused)) static jboolean PANonESMSignalGenerator_retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(PANonESMSignalGenerator *self, PANonESMSignalGenerator_SignalTimeHolder *previousTimeCollector, JavaLangLong *experimentId);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow);

__attribute__((unused)) static JavaLangInteger *PANonESMSignalGenerator_getDOWFromIndexedValue(PANonESMSignalGenerator *self);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatDailyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatWeeklyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightNextDay);

__attribute__((unused)) static OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow);

@implementation PANonESMSignalGenerator

- (instancetype)initWithPASchedule:(PASchedule *)schedule
                  withJavaLangLong:(JavaLangLong *)experimentId
                  withPAEventStore:(id<PAEventStore>)eventStore
                      withNSString:(NSString *)groupName
                  withJavaLangLong:(JavaLangLong *)actionTriggerId {
  PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(self, schedule, experimentId, eventStore, groupName, actionTriggerId);
  return self;
}

- (OrgJodaTimeDateTime *)getNextAlarmTimeWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now {
  if ([((PASchedule *) nil_chk(schedule_)) getSignalTimes] == nil || [((id<JavaUtilList>) nil_chk([schedule_ getSignalTimes])) size] == 0) {
    return nil;
  }
  switch ([((JavaLangInteger *) nil_chk([schedule_ getScheduleType])) intValue]) {
    case PASchedule_DAILY:
    return PANonESMSignalGenerator_scheduleDailyWithOrgJodaTimeDateTime_(self, now);
    case PASchedule_WEEKDAY:
    return PANonESMSignalGenerator_scheduleWeekdayWithOrgJodaTimeDateTime_(self, now);
    case PASchedule_WEEKLY:
    return PANonESMSignalGenerator_scheduleWeeklyWithOrgJodaTimeDateTime_(self, now);
    case PASchedule_MONTHLY:
    return PANonESMSignalGenerator_scheduleMonthlyWithOrgJodaTimeDateTime_(self, now);
    default:
    return nil;
  }
}

- (OrgJodaTimeDateTime *)scheduleMonthlyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now {
  return PANonESMSignalGenerator_scheduleMonthlyWithOrgJodaTimeDateTime_(self, now);
}

- (OrgJodaTimeDateTime *)getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nextDay {
  return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
}

- (OrgJodaTimeDateTime *)scheduleWeeklyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now {
  return PANonESMSignalGenerator_scheduleWeeklyWithOrgJodaTimeDateTime_(self, now);
}

- (OrgJodaTimeDateTime *)scheduleDailyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now {
  return PANonESMSignalGenerator_scheduleDailyWithOrgJodaTimeDateTime_(self, now);
}

- (OrgJodaTimeDateTime *)scheduleWeekdayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now {
  return PANonESMSignalGenerator_scheduleWeekdayWithOrgJodaTimeDateTime_(self, now);
}

- (OrgJodaTimeDateTime *)getNextTimeTodayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                         withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight {
  return PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nowMidnight);
}

- (OrgJodaTimeDateTime *)getNextTimeTodayForScheduleWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                    withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight
                                                             withPASchedule:(PASchedule *)schedule
                                                           withJavaLangLong:(JavaLangLong *)experimentId {
  jint nowAsOffsetFromMidnight = [((OrgJodaTimeDateTime *) nil_chk(now)) getMillisOfDay];
  id<JavaUtilList> previousTimes = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk([((PASchedule *) nil_chk(schedule)) getSignalTimes])) size]; i++) {
    PASignalTime *signalTime = [((id<JavaUtilList>) nil_chk([schedule getSignalTimes])) getWithInt:i];
    PANonESMSignalGenerator_SignalTimeHolder *signalTimeHolder = PANonESMSignalGenerator_getTimeForSignalTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_withJavaLangLong_(self, signalTime, previousTimes, nowMidnight, experimentId);
    if (((PANonESMSignalGenerator_SignalTimeHolder *) nil_chk(signalTimeHolder))->chosenTime_ != nil && [signalTimeHolder->chosenTime_ getMillisOfDay] > nowAsOffsetFromMidnight) {
      return signalTimeHolder->chosenTime_;
    }
    [previousTimes addWithId:signalTimeHolder];
  }
  return nil;
}

- (PANonESMSignalGenerator_SignalTimeHolder *)getTimeForSignalTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                  withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                           withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight
                                                                  withJavaLangLong:(JavaLangLong *)experimentId {
  return PANonESMSignalGenerator_getTimeForSignalTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_withJavaLangLong_(self, signalTime, previousTimes, nowMidnight, experimentId);
}

- (PANonESMSignalGenerator_SignalTimeHolder *)getNextTimeForOffsetTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                      withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                                      withJavaLangLong:(JavaLangLong *)experimentId {
  return PANonESMSignalGenerator_getNextTimeForOffsetTypeWithPASignalTime_withJavaUtilList_withJavaLangLong_(self, signalTime, previousTimes, experimentId);
}

- (PANonESMSignalGenerator_SignalTimeHolder *)getNextTimeForFixedTypeWithPASignalTime:(PASignalTime *)signalTime
                                                                     withJavaUtilList:(id<JavaUtilList>)previousTimes
                                                              withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)nowMidnight {
  return PANonESMSignalGenerator_getNextTimeForFixedTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_(self, signalTime, previousTimes, nowMidnight);
}

- (jboolean)previousEventHasResponseWithJavaUtilList:(id<JavaUtilList>)previousTimes {
  return PANonESMSignalGenerator_previousEventHasResponseWithJavaUtilList_(self, previousTimes);
}

- (PANonESMSignalGenerator_SignalTimeHolder *)createNullSignalTimeHolderWithPASignalTime:(PASignalTime *)signalTime {
  return PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(self, signalTime);
}

- (OrgJodaTimeDateTime *)computeBasisTimeForOffsetTypeWithPASignalTime:(PASignalTime *)signalTime
                          withPANonESMSignalGenerator_SignalTimeHolder:(PANonESMSignalGenerator_SignalTimeHolder *)previousTimePair
                                                      withJavaLangLong:(JavaLangLong *)experimentId {
  return PANonESMSignalGenerator_computeBasisTimeForOffsetTypeWithPASignalTime_withPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(self, signalTime, previousTimePair, experimentId);
}

- (jboolean)retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder:(PANonESMSignalGenerator_SignalTimeHolder *)previousTimeCollector
                                                                    withJavaLangLong:(JavaLangLong *)experimentId {
  return PANonESMSignalGenerator_retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(self, previousTimeCollector, experimentId);
}

- (OrgJodaTimeDateTime *)getNextScheduleDayWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow {
  return PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, midnightTomorrow);
}

- (JavaLangInteger *)getDOWFromIndexedValue {
  return PANonESMSignalGenerator_getDOWFromIndexedValue(self);
}

- (OrgJodaTimeDateTime *)getNthDOWOfMonthWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow
                                             withJavaLangInteger:(JavaLangInteger *)nthOfMonth
                                             withJavaLangInteger:(JavaLangInteger *)dow {
  jint dtconstDow = [((JavaLangInteger *) nil_chk(dow)) intValue] == 0 ? 7 : [dow intValue];
  OrgJodaTimeDateTime *first = [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) withDayOfMonthWithInt:1];
  if ([((OrgJodaTimeDateTime *) nil_chk(first)) getDayOfWeek] > dtconstDow) {
    return [((OrgJodaTimeDateTime *) nil_chk([first plusWeeksWithInt:[((JavaLangInteger *) nil_chk(nthOfMonth)) intValue]])) withDayOfWeekWithInt:dtconstDow];
  }
  else {
    return [((OrgJodaTimeDateTime *) nil_chk([first plusWeeksWithInt:[((JavaLangInteger *) nil_chk(nthOfMonth)) intValue] - 1])) withDayOfWeekWithInt:dtconstDow];
  }
}

- (OrgJodaTimeDateTime *)nextRepeatDailyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow {
  return PANonESMSignalGenerator_nextRepeatDailyWithOrgJodaTimeDateTime_(self, midnightTomorrow);
}

- (OrgJodaTimeDateTime *)nextRepeatWeeklyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightNextDay {
  return PANonESMSignalGenerator_nextRepeatWeeklyWithOrgJodaTimeDateTime_(self, midnightNextDay);
}

- (OrgJodaTimeDateTime *)nextRepeatMonthlyWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)midnightTomorrow {
  return PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(self, midnightTomorrow);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithPASchedule:withJavaLangLong:withPAEventStore:withNSString:withJavaLangLong:", "NonESMSignalGenerator", NULL, 0x1, NULL, NULL },
    { "getNextAlarmTimeWithOrgJodaTimeDateTime:", "getNextAlarmTime", "Lorg.joda.time.DateTime;", 0x1, NULL, NULL },
    { "scheduleMonthlyWithOrgJodaTimeDateTime:", "scheduleMonthly", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime:", "getFirstScheduledTimeOnDay", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "scheduleWeeklyWithOrgJodaTimeDateTime:", "scheduleWeekly", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "scheduleDailyWithOrgJodaTimeDateTime:", "scheduleDaily", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "scheduleWeekdayWithOrgJodaTimeDateTime:", "scheduleWeekday", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getNextTimeTodayWithOrgJodaTimeDateTime:withOrgJodaTimeDateTime:", "getNextTimeToday", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getNextTimeTodayForScheduleWithOrgJodaTimeDateTime:withOrgJodaTimeDateTime:withPASchedule:withJavaLangLong:", "getNextTimeTodayForSchedule", "Lorg.joda.time.DateTime;", 0x1, NULL, NULL },
    { "getTimeForSignalTypeWithPASignalTime:withJavaUtilList:withOrgJodaTimeDateTime:withJavaLangLong:", "getTimeForSignalType", "Lcom.pacoapp.paco.shared.scheduling.NonESMSignalGenerator$SignalTimeHolder;", 0x2, NULL, "(Lcom/pacoapp/paco/shared/model2/SignalTime;Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;>;Lorg/joda/time/DateTime;Ljava/lang/Long;)Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;" },
    { "getNextTimeForOffsetTypeWithPASignalTime:withJavaUtilList:withJavaLangLong:", "getNextTimeForOffsetType", "Lcom.pacoapp.paco.shared.scheduling.NonESMSignalGenerator$SignalTimeHolder;", 0x2, NULL, "(Lcom/pacoapp/paco/shared/model2/SignalTime;Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;>;Ljava/lang/Long;)Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;" },
    { "getNextTimeForFixedTypeWithPASignalTime:withJavaUtilList:withOrgJodaTimeDateTime:", "getNextTimeForFixedType", "Lcom.pacoapp.paco.shared.scheduling.NonESMSignalGenerator$SignalTimeHolder;", 0x2, NULL, "(Lcom/pacoapp/paco/shared/model2/SignalTime;Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;>;Lorg/joda/time/DateTime;)Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;" },
    { "previousEventHasResponseWithJavaUtilList:", "previousEventHasResponse", "Z", 0x2, NULL, "(Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/NonESMSignalGenerator$SignalTimeHolder;>;)Z" },
    { "createNullSignalTimeHolderWithPASignalTime:", "createNullSignalTimeHolder", "Lcom.pacoapp.paco.shared.scheduling.NonESMSignalGenerator$SignalTimeHolder;", 0x2, NULL, NULL },
    { "computeBasisTimeForOffsetTypeWithPASignalTime:withPANonESMSignalGenerator_SignalTimeHolder:withJavaLangLong:", "computeBasisTimeForOffsetType", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder:withJavaLangLong:", "retrieveEventForPreviousTime", "Z", 0x2, NULL, NULL },
    { "getNextScheduleDayWithOrgJodaTimeDateTime:", "getNextScheduleDay", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getDOWFromIndexedValue", NULL, "Ljava.lang.Integer;", 0x2, NULL, NULL },
    { "getNthDOWOfMonthWithOrgJodaTimeDateTime:withJavaLangInteger:withJavaLangInteger:", "getNthDOWOfMonth", "Lorg.joda.time.DateTime;", 0x0, NULL, NULL },
    { "nextRepeatDailyWithOrgJodaTimeDateTime:", "nextRepeatDaily", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "nextRepeatWeeklyWithOrgJodaTimeDateTime:", "nextRepeatWeekly", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "nextRepeatMonthlyWithOrgJodaTimeDateTime:", "nextRepeatMonthly", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "schedule_", NULL, 0x2, "Lcom.pacoapp.paco.shared.model2.Schedule;", NULL, NULL, .constantValue.asLong = 0 },
    { "experimentId_", NULL, 0x2, "Ljava.lang.Long;", NULL, NULL, .constantValue.asLong = 0 },
    { "eventStore_", NULL, 0x2, "Lcom.pacoapp.paco.shared.model2.EventStore;", NULL, NULL, .constantValue.asLong = 0 },
    { "groupName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "actionTriggerId_", NULL, 0x2, "Ljava.lang.Long;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lcom.pacoapp.paco.shared.scheduling.NonESMSignalGenerator$SignalTimeHolder;"};
  static const J2ObjcClassInfo _PANonESMSignalGenerator = { 2, "NonESMSignalGenerator", "com.pacoapp.paco.shared.scheduling", NULL, 0x1, 22, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_PANonESMSignalGenerator;
}

@end

void PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(PANonESMSignalGenerator *self, PASchedule *schedule, JavaLangLong *experimentId, id<PAEventStore> eventStore, NSString *groupName, JavaLangLong *actionTriggerId) {
  NSObject_init(self);
  self->schedule_ = schedule;
  self->experimentId_ = experimentId;
  self->eventStore_ = eventStore;
  self->groupName_ = groupName;
  self->actionTriggerId_ = actionTriggerId;
}

PANonESMSignalGenerator *new_PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(PASchedule *schedule, JavaLangLong *experimentId, id<PAEventStore> eventStore, NSString *groupName, JavaLangLong *actionTriggerId) {
  PANonESMSignalGenerator *self = [PANonESMSignalGenerator alloc];
  PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(self, schedule, experimentId, eventStore, groupName, actionTriggerId);
  return self;
}

PANonESMSignalGenerator *create_PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(PASchedule *schedule, JavaLangLong *experimentId, id<PAEventStore> eventStore, NSString *groupName, JavaLangLong *actionTriggerId) {
  return new_PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(schedule, experimentId, eventStore, groupName, actionTriggerId);
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleMonthlyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now) {
  OrgJodaTimeDateTime *nowMidnight = [((OrgJodaTimeDateMidnight *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) toDateMidnight])) toDateTime];
  if ([((JavaLangBoolean *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getByDayOfMonth])) booleanValue]) {
    jint nowDOM = [((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) getDayOfMonth];
    if (nowDOM == [((JavaLangInteger *) nil_chk([self->schedule_ getDayOfMonth])) intValue]) {
      OrgJodaTimeDateTime *nextTimeToday = PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nowMidnight);
      if (nextTimeToday != nil) {
        return nextTimeToday;
      }
    }
    OrgJodaTimeDateTime *nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, [nowMidnight plusDaysWithInt:1]);
    return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
  }
  else {
    OrgJodaTimeDateTime *nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, nowMidnight);
    if ([((OrgJodaTimeDateTime *) nil_chk(nextDay)) isEqual:nowMidnight]) {
      OrgJodaTimeDateTime *nextTimeToday = PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nextDay);
      if (nextTimeToday != nil) {
        return nextTimeToday;
      }
      nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, [((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) plusDaysWithInt:1]);
      return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
    }
    else {
      return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
    }
  }
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *nextDay) {
  return [((OrgJodaTimeDateTime *) nil_chk(nextDay)) withMillisOfDayWithInt:[((JavaLangInteger *) nil_chk([((PASignalTime *) nil_chk([((id<JavaUtilList>) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getSignalTimes])) getWithInt:0])) getFixedTimeMillisFromMidnight])) intValue]];
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleWeeklyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now) {
  OrgJodaTimeDateTime *nowMidnight = [((OrgJodaTimeDateMidnight *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) toDateMidnight])) toDateTime];
  jint nowDow = [((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) getDayOfWeek];
  JavaLangInteger *nowDowIndex = JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(JreLoadStatic(PASchedule, DAYS_OF_WEEK)), nowDow == 7 ? 0 : nowDow));
  if (([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getWeekDaysScheduled])) intValue] & [nowDowIndex intValue]) == [nowDowIndex intValue]) {
    OrgJodaTimeDateTime *nextTimeToday = PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nowMidnight);
    if (nextTimeToday != nil) {
      return nextTimeToday;
    }
  }
  OrgJodaTimeDateTime *nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, [nowMidnight plusDaysWithInt:1]);
  return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleDailyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now) {
  OrgJodaTimeDateTime *nowMidnight = [((OrgJodaTimeDateMidnight *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) toDateMidnight])) toDateTime];
  if ([((OrgJodaTimeDateTime *) nil_chk(PANonESMSignalGenerator_nextRepeatDailyWithOrgJodaTimeDateTime_(self, nowMidnight))) isEqual:nowMidnight]) {
    OrgJodaTimeDateTime *nextTimeToday = PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nowMidnight);
    if (nextTimeToday != nil) {
      return nextTimeToday;
    }
  }
  OrgJodaTimeDateTime *nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, [((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) plusDaysWithInt:1]);
  return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_scheduleWeekdayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now) {
  OrgJodaTimeDateTime *nowMidnight = [((OrgJodaTimeDateMidnight *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) toDateMidnight])) toDateTime];
  if ([((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) getDayOfWeek] < OrgJodaTimeDateTimeConstants_SATURDAY) {
    OrgJodaTimeDateTime *nextTimeToday = PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(self, now, nowMidnight);
    if (nextTimeToday != nil) {
      return nextTimeToday;
    }
  }
  OrgJodaTimeDateTime *nextDay = PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(self, [nowMidnight plusDaysWithInt:1]);
  return PANonESMSignalGenerator_getFirstScheduledTimeOnDayWithOrgJodaTimeDateTime_(self, nextDay);
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_getNextTimeTodayWithOrgJodaTimeDateTime_withOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *now, OrgJodaTimeDateTime *nowMidnight) {
  return [self getNextTimeTodayForScheduleWithOrgJodaTimeDateTime:now withOrgJodaTimeDateTime:nowMidnight withPASchedule:self->schedule_ withJavaLangLong:self->experimentId_];
}

PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getTimeForSignalTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, OrgJodaTimeDateTime *nowMidnight, JavaLangLong *experimentId) {
  if ([((PASignalTime *) nil_chk(signalTime)) getType] != nil && [((JavaLangInteger *) nil_chk([signalTime getType])) isEqual:JreLoadStatic(PASignalTime, FIXED_TIME)]) {
    return PANonESMSignalGenerator_getNextTimeForFixedTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_(self, signalTime, previousTimes, nowMidnight);
  }
  else if ([signalTime getType] != nil && [((JavaLangInteger *) nil_chk([signalTime getType])) isEqual:JreLoadStatic(PASignalTime, OFFSET_TIME)]) {
    return PANonESMSignalGenerator_getNextTimeForOffsetTypeWithPASignalTime_withJavaUtilList_withJavaLangLong_(self, signalTime, previousTimes, experimentId);
  }
  else {
    return PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(self, signalTime);
  }
}

PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getNextTimeForOffsetTypeWithPASignalTime_withJavaUtilList_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, JavaLangLong *experimentId) {
  if ([((id<JavaUtilList>) nil_chk(previousTimes)) size] == 0) {
    return PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(self, signalTime);
  }
  PANonESMSignalGenerator_SignalTimeHolder *previousTimePair = [previousTimes getWithInt:[previousTimes size] - 1];
  OrgJodaTimeDateTime *basis = PANonESMSignalGenerator_computeBasisTimeForOffsetTypeWithPASignalTime_withPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(self, signalTime, previousTimePair, experimentId);
  if (basis != nil) {
    OrgJodaTimeDateTime *chosenTime = [basis plusMillisWithInt:[((JavaLangInteger *) nil_chk([((PASignalTime *) nil_chk(signalTime)) getOffsetTimeMillis])) intValue]];
    return new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, nil, nil, chosenTime, signalTime);
  }
  else {
    return PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(self, signalTime);
  }
}

PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_getNextTimeForFixedTypeWithPASignalTime_withJavaUtilList_withOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, PASignalTime *signalTime, id<JavaUtilList> previousTimes, OrgJodaTimeDateTime *nowMidnight) {
  if ([((id<JavaUtilList>) nil_chk(previousTimes)) size] == 0 || [((PASignalTime *) nil_chk(signalTime)) getMissedBasisBehavior] == nil || [((JavaLangInteger *) nil_chk([signalTime getMissedBasisBehavior])) isEqual:JreLoadStatic(PASignalTime, MISSED_BEHAVIOR_USE_SCHEDULED_TIME)]) {
    return new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, nil, nil, [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) toDateTime])) plusMillisWithInt:[((JavaLangInteger *) nil_chk([((PASignalTime *) nil_chk(signalTime)) getFixedTimeMillisFromMidnight])) intValue]], signalTime);
  }
  else if ([((JavaLangInteger *) nil_chk([signalTime getMissedBasisBehavior])) isEqual:JreLoadStatic(PASignalTime, MISSED_BEHAVIOR_SKIP)] && PANonESMSignalGenerator_previousEventHasResponseWithJavaUtilList_(self, previousTimes)) {
    return new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, nil, nil, [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(nowMidnight)) toDateTime])) plusMillisWithInt:[((JavaLangInteger *) nil_chk([signalTime getFixedTimeMillisFromMidnight])) intValue]], signalTime);
  }
  else {
    return PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(self, signalTime);
  }
}

jboolean PANonESMSignalGenerator_previousEventHasResponseWithJavaUtilList_(PANonESMSignalGenerator *self, id<JavaUtilList> previousTimes) {
  PANonESMSignalGenerator_SignalTimeHolder *previousTime = [previousTimes getWithInt:[((id<JavaUtilList>) nil_chk(previousTimes)) size] - 1];
  if (((PANonESMSignalGenerator_SignalTimeHolder *) nil_chk(previousTime))->scheduledTime_ == nil) {
    PANonESMSignalGenerator_retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(self, previousTime, self->experimentId_);
  }
  return previousTime->responseTime_ != nil;
}

PANonESMSignalGenerator_SignalTimeHolder *PANonESMSignalGenerator_createNullSignalTimeHolderWithPASignalTime_(PANonESMSignalGenerator *self, PASignalTime *signalTime) {
  return new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, nil, nil, nil, signalTime);
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_computeBasisTimeForOffsetTypeWithPASignalTime_withPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(PANonESMSignalGenerator *self, PASignalTime *signalTime, PANonESMSignalGenerator_SignalTimeHolder *previousTimePair, JavaLangLong *experimentId) {
  jboolean eventRecorded = false;
  if (((PANonESMSignalGenerator_SignalTimeHolder *) nil_chk(previousTimePair))->scheduledTime_ == nil) {
    eventRecorded = PANonESMSignalGenerator_retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(self, previousTimePair, experimentId);
  }
  if (!eventRecorded) {
    return previousTimePair->chosenTime_;
  }
  if ([((PASignalTime *) nil_chk(signalTime)) getBasis] != nil && [((JavaLangInteger *) nil_chk([signalTime getBasis])) isEqual:JreLoadStatic(PASignalTime, OFFSET_BASIS_SCHEDULED_TIME)]) {
    return previousTimePair->scheduledTime_;
  }
  else if ([signalTime getBasis] != nil && [((JavaLangInteger *) nil_chk([signalTime getBasis])) isEqual:JreLoadStatic(PASignalTime, OFFSET_BASIS_RESPONSE_TIME)]) {
    OrgJodaTimeDateTime *basis = previousTimePair->responseTime_;
    if (basis == nil && [signalTime getMissedBasisBehavior] != nil && [((JavaLangInteger *) nil_chk([signalTime getMissedBasisBehavior])) isEqual:JreLoadStatic(PASignalTime, MISSED_BEHAVIOR_USE_SCHEDULED_TIME)]) {
      basis = previousTimePair->scheduledTime_;
    }
    return basis;
  }
  return nil;
}

jboolean PANonESMSignalGenerator_retrieveEventForPreviousTimeWithPANonESMSignalGenerator_SignalTimeHolder_withJavaLangLong_(PANonESMSignalGenerator *self, PANonESMSignalGenerator_SignalTimeHolder *previousTimeCollector, JavaLangLong *experimentId) {
  id<PAEventInterface> event = [((id<PAEventStore>) nil_chk(self->eventStore_)) getEventWithJavaLangLong:experimentId withOrgJodaTimeDateTime:((PANonESMSignalGenerator_SignalTimeHolder *) nil_chk(previousTimeCollector))->chosenTime_ withNSString:self->groupName_ withJavaLangLong:self->actionTriggerId_ withJavaLangLong:[((PASchedule *) nil_chk(self->schedule_)) getId]];
  if (event != nil) {
    previousTimeCollector->scheduledTime_ = [event getScheduledTime];
    previousTimeCollector->responseTime_ = [event getResponseTime];
    return true;
  }
  return false;
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_getNextScheduleDayWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow) {
  {
    jint tomorrowDOW;
    jint scheduleDays;
    switch ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getScheduleType])) intValue]) {
      case PASchedule_DAILY:
      return PANonESMSignalGenerator_nextRepeatDailyWithOrgJodaTimeDateTime_(self, midnightTomorrow);
      case PASchedule_WEEKDAY:
      tomorrowDOW = [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) getDayOfWeek];
      if (tomorrowDOW > OrgJodaTimeDateTimeConstants_FRIDAY) {
        return [midnightTomorrow plusDaysWithInt:8 - tomorrowDOW];
      }
      else {
        return midnightTomorrow;
      }
      case PASchedule_WEEKLY:
      scheduleDays = [((JavaLangInteger *) nil_chk([self->schedule_ getWeekDaysScheduled])) intValue];
      if (scheduleDays == 0) {
        return nil;
      }
      for (jint i = 0; i < 8; i++) {
        jint midnightTomorrowDOW = [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) getDayOfWeek];
        JavaLangInteger *nowDowIndex = JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(JreLoadStatic(PASchedule, DAYS_OF_WEEK)), midnightTomorrowDOW == 7 ? 0 : midnightTomorrowDOW));
        if ((scheduleDays & [nowDowIndex intValue]) == [nowDowIndex intValue]) {
          return PANonESMSignalGenerator_nextRepeatWeeklyWithOrgJodaTimeDateTime_(self, midnightTomorrow);
        }
        midnightTomorrow = [midnightTomorrow plusDaysWithInt:1];
      }
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot get to here. Weekly must repeat at least once a week");
      case PASchedule_MONTHLY:
      if ([((JavaLangBoolean *) nil_chk([self->schedule_ getByDayOfMonth])) booleanValue]) {
        jint midnightDOM = [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) getDayOfMonth];
        jint scheduledDOM = [((JavaLangInteger *) nil_chk([self->schedule_ getDayOfMonth])) intValue];
        if (midnightDOM == scheduledDOM) {
          return midnightTomorrow;
        }
        else if (midnightDOM > scheduledDOM) {
          OrgJodaTimeMutableDateTime *mutableDateTime = [((OrgJodaTimeDateTime *) nil_chk([midnightTomorrow plusMonthsWithInt:1])) toMutableDateTime];
          [((OrgJodaTimeMutableDateTime *) nil_chk(mutableDateTime)) setDayOfMonthWithInt:scheduledDOM];
          return PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(self, [mutableDateTime toDateTime]);
        }
        else {
          return PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(self, [midnightTomorrow plusDaysWithInt:scheduledDOM - midnightDOM]);
        }
      }
      else {
        JavaLangInteger *nthOfMonth = [self->schedule_ getNthOfMonth];
        JavaLangInteger *dow = PANonESMSignalGenerator_getDOWFromIndexedValue(self);
        OrgJodaTimeDateMidnight *nthDowDate = [((OrgJodaTimeDateTime *) nil_chk([self getNthDOWOfMonthWithOrgJodaTimeDateTime:midnightTomorrow withJavaLangInteger:nthOfMonth withJavaLangInteger:dow])) toDateMidnight];
        OrgJodaTimeDateTime *returnDate = nil;
        if ([((OrgJodaTimeDateMidnight *) nil_chk(nthDowDate)) isEqual:midnightTomorrow]) {
          returnDate = midnightTomorrow;
        }
        else if ([nthDowDate isAfterWithOrgJodaTimeReadableInstant:midnightTomorrow]) {
          returnDate = [nthDowDate toDateTime];
        }
        else {
          returnDate = [((OrgJodaTimeDateTime *) nil_chk([self getNthDOWOfMonthWithOrgJodaTimeDateTime:[((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusMonthsWithInt:1] withJavaLangInteger:nthOfMonth withJavaLangInteger:dow])) toDateTime];
        }
        return PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(self, returnDate);
      }
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Schedule has an unknown type: ", [self->schedule_ getScheduleType]));
    }
  }
}

JavaLangInteger *PANonESMSignalGenerator_getDOWFromIndexedValue(PANonESMSignalGenerator *self) {
  JavaLangInteger *dow = JavaLangInteger_valueOfWithInt_(JreFpToInt((JavaLangMath_logWithDouble_([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getWeekDaysScheduled])) intValue]) / JavaLangMath_logWithDouble_(2))));
  return dow;
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatDailyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow) {
  if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getRepeatRate])) intValue] == 1) {
    return midnightTomorrow;
  }
  jint distanceBetweenStartAndTomorrow = [((OrgJodaTimeDays *) nil_chk(OrgJodaTimeDays_daysBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_([new_OrgJodaTimeDateTime_initWithId_([self->schedule_ getBeginDate]) toDateMidnight], midnightTomorrow))) getDays];
  if (distanceBetweenStartAndTomorrow == 0 || distanceBetweenStartAndTomorrow == [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
    return midnightTomorrow;
  }
  else if (distanceBetweenStartAndTomorrow > [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
    jint remainder = distanceBetweenStartAndTomorrow % [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue];
    return [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusDaysWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - remainder];
  }
  else {
    return [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusDaysWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - distanceBetweenStartAndTomorrow];
  }
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatWeeklyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightNextDay) {
  if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getRepeatRate])) intValue] == 1) {
    return midnightNextDay;
  }
  jint distanceBetweenStartAndTomorrow = [((OrgJodaTimeWeeks *) nil_chk(OrgJodaTimeWeeks_weeksBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_([new_OrgJodaTimeDateTime_initWithId_([self->schedule_ getBeginDate]) toDateMidnight], midnightNextDay))) getWeeks];
  if (distanceBetweenStartAndTomorrow == 0 || distanceBetweenStartAndTomorrow == [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
    if ((distanceBetweenStartAndTomorrow == 0 && [((OrgJodaTimeDateTime *) nil_chk(midnightNextDay)) getDayOfWeek] <= [new_OrgJodaTimeDateMidnight_initWithId_([self->schedule_ getBeginDate]) getDayOfWeek])) {
      return [midnightNextDay plusWeeksWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - 1];
    }
    return midnightNextDay;
  }
  else if (distanceBetweenStartAndTomorrow > [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
    jint remainder = distanceBetweenStartAndTomorrow % [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue];
    return [((OrgJodaTimeDateTime *) nil_chk(midnightNextDay)) plusWeeksWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - remainder];
  }
  else {
    return [((OrgJodaTimeDateTime *) nil_chk(midnightNextDay)) plusWeeksWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - distanceBetweenStartAndTomorrow];
  }
}

OrgJodaTimeDateTime *PANonESMSignalGenerator_nextRepeatMonthlyWithOrgJodaTimeDateTime_(PANonESMSignalGenerator *self, OrgJodaTimeDateTime *midnightTomorrow) {
  if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getRepeatRate])) intValue] == 1) {
    return midnightTomorrow;
  }
  if ([((JavaLangBoolean *) nil_chk([self->schedule_ getByDayOfMonth])) booleanValue]) {
    jint distanceBetweenStartAndTomorrow = [((OrgJodaTimeMonths *) nil_chk(OrgJodaTimeMonths_monthsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_([new_OrgJodaTimeDateTime_initWithId_([self->schedule_ getBeginDate]) toDateMidnight], midnightTomorrow))) getMonths];
    if (distanceBetweenStartAndTomorrow == 0 || distanceBetweenStartAndTomorrow == [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
      if ((distanceBetweenStartAndTomorrow == 0 && [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) getDayOfMonth] <= [new_OrgJodaTimeDateMidnight_initWithId_([self->schedule_ getBeginDate]) getDayOfMonth])) {
        return [midnightTomorrow plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - 1];
      }
      return midnightTomorrow;
    }
    else if (distanceBetweenStartAndTomorrow > [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
      jint remainder = distanceBetweenStartAndTomorrow % [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue];
      return [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - remainder];
    }
    else {
      return [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - distanceBetweenStartAndTomorrow];
    }
  }
  else {
    jint distanceBetweenStartAndTomorrow = [((OrgJodaTimeMonths *) nil_chk(OrgJodaTimeMonths_monthsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_([new_OrgJodaTimeDateTime_initWithId_([self->schedule_ getBeginDate]) toDateMidnight], midnightTomorrow))) getMonths];
    if (distanceBetweenStartAndTomorrow == 0 || distanceBetweenStartAndTomorrow == [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
      if ((distanceBetweenStartAndTomorrow == 0 && [((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) getDayOfMonth] <= [new_OrgJodaTimeDateMidnight_initWithId_([self->schedule_ getBeginDate]) getDayOfMonth])) {
        return [self getNthDOWOfMonthWithOrgJodaTimeDateTime:[midnightTomorrow plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - 1] withJavaLangInteger:[self->schedule_ getNthOfMonth] withJavaLangInteger:PANonESMSignalGenerator_getDOWFromIndexedValue(self)];
      }
      return midnightTomorrow;
    }
    else if (distanceBetweenStartAndTomorrow > [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue]) {
      jint remainder = distanceBetweenStartAndTomorrow % [((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue];
      return [self getNthDOWOfMonthWithOrgJodaTimeDateTime:[((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - remainder] withJavaLangInteger:[self->schedule_ getNthOfMonth] withJavaLangInteger:PANonESMSignalGenerator_getDOWFromIndexedValue(self)];
    }
    else {
      return [self getNthDOWOfMonthWithOrgJodaTimeDateTime:[((OrgJodaTimeDateTime *) nil_chk(midnightTomorrow)) plusMonthsWithInt:[((JavaLangInteger *) nil_chk([self->schedule_ getRepeatRate])) intValue] - distanceBetweenStartAndTomorrow] withJavaLangInteger:[self->schedule_ getNthOfMonth] withJavaLangInteger:PANonESMSignalGenerator_getDOWFromIndexedValue(self)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PANonESMSignalGenerator)

@implementation PANonESMSignalGenerator_SignalTimeHolder

- (instancetype)initWithPANonESMSignalGenerator:(PANonESMSignalGenerator *)outer$
                        withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)scheduledTime
                        withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)responseTime
                        withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)chosenTime
                               withPASignalTime:(PASignalTime *)signalTime {
  PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, outer$, scheduledTime, responseTime, chosenTime, signalTime);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithPANonESMSignalGenerator:withOrgJodaTimeDateTime:withOrgJodaTimeDateTime:withOrgJodaTimeDateTime:withPASignalTime:", "SignalTimeHolder", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "scheduledTime_", NULL, 0x0, "Lorg.joda.time.DateTime;", NULL, NULL, .constantValue.asLong = 0 },
    { "responseTime_", NULL, 0x0, "Lorg.joda.time.DateTime;", NULL, NULL, .constantValue.asLong = 0 },
    { "chosenTime_", NULL, 0x0, "Lorg.joda.time.DateTime;", NULL, NULL, .constantValue.asLong = 0 },
    { "signalTime_", NULL, 0x0, "Lcom.pacoapp.paco.shared.model2.SignalTime;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PANonESMSignalGenerator_SignalTimeHolder = { 2, "SignalTimeHolder", "com.pacoapp.paco.shared.scheduling", "NonESMSignalGenerator", 0x0, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PANonESMSignalGenerator_SignalTimeHolder;
}

@end

void PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(PANonESMSignalGenerator_SignalTimeHolder *self, PANonESMSignalGenerator *outer$, OrgJodaTimeDateTime *scheduledTime, OrgJodaTimeDateTime *responseTime, OrgJodaTimeDateTime *chosenTime, PASignalTime *signalTime) {
  NSObject_init(self);
  self->scheduledTime_ = scheduledTime;
  self->responseTime_ = responseTime;
  self->chosenTime_ = chosenTime;
  self->signalTime_ = signalTime;
}

PANonESMSignalGenerator_SignalTimeHolder *new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(PANonESMSignalGenerator *outer$, OrgJodaTimeDateTime *scheduledTime, OrgJodaTimeDateTime *responseTime, OrgJodaTimeDateTime *chosenTime, PASignalTime *signalTime) {
  PANonESMSignalGenerator_SignalTimeHolder *self = [PANonESMSignalGenerator_SignalTimeHolder alloc];
  PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(self, outer$, scheduledTime, responseTime, chosenTime, signalTime);
  return self;
}

PANonESMSignalGenerator_SignalTimeHolder *create_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(PANonESMSignalGenerator *outer$, OrgJodaTimeDateTime *scheduledTime, OrgJodaTimeDateTime *responseTime, OrgJodaTimeDateTime *chosenTime, PASignalTime *signalTime) {
  return new_PANonESMSignalGenerator_SignalTimeHolder_initWithPANonESMSignalGenerator_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withOrgJodaTimeDateTime_withPASignalTime_(outer$, scheduledTime, responseTime, chosenTime, signalTime);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PANonESMSignalGenerator_SignalTimeHolder)

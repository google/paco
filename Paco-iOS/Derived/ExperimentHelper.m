//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/util/ExperimentHelper.java
//

#include "ActionTrigger.h"
#include "ExperimentDAO.h"
#include "ExperimentDAOCore.h"
#include "ExperimentGroup.h"
#include "ExperimentHelper.h"
#include "Input2.h"
#include "InterruptCue.h"
#include "InterruptTrigger.h"
#include "J2ObjC_source.h"
#include "Schedule.h"
#include "ScheduleTrigger.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation PAExperimentHelper

+ (PAInput2 *)getInputWithNameWithPAExperimentDAO:(PAExperimentDAO *)experiment
                                     withNSString:(NSString *)name
                                     withNSString:(NSString *)groupName {
  return PAExperimentHelper_getInputWithNameWithPAExperimentDAO_withNSString_withNSString_(experiment, name, groupName);
}

+ (id<JavaUtilList>)getInputsWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_getInputsWithPAExperimentDAO_(experiment);
}

+ (jboolean)declaresLogAppUsageAndBrowserCollectionWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_declaresLogAppUsageAndBrowserCollectionWithPAExperimentDAO_(experiment);
}

+ (jboolean)declaresInstalledAppDataCollectionWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_declaresInstalledAppDataCollectionWithPAExperimentDAO_(experiment);
}

+ (jboolean)hasUserEditableScheduleWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_hasUserEditableScheduleWithPAExperimentDAO_(experiment);
}

+ (jboolean)hasAppUsageTriggerWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_hasAppUsageTriggerWithPAExperimentDAO_(experiment);
}

+ (jboolean)hasAppClosedTriggerWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_hasAppClosedTriggerWithPAExperimentDAO_(experiment);
}

+ (jboolean)isLogActionsWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_isLogActionsWithPAExperimentDAO_(experiment);
}

+ (jboolean)shouldWatchProcessesWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_shouldWatchProcessesWithPAExperimentDAO_(experiment);
}

+ (id<JavaUtilList>)shouldTriggerByWithPAExperimentDAO:(PAExperimentDAO *)experiment
                                               withInt:(jint)event
                                          withNSString:(NSString *)sourceIdentifier {
  return PAExperimentHelper_shouldTriggerByWithPAExperimentDAO_withInt_withNSString_(experiment, event, sourceIdentifier);
}

+ (jboolean)isAnyGroupOngoingDurationWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAExperimentHelper_isAnyGroupOngoingDurationWithPAExperimentDAO_(experiment);
}

+ (id<JavaUtilList>)isBackgroundListeningForSourceIdWithPAExperimentDAO:(PAExperimentDAO *)experiment
                                                           withNSString:(NSString *)sourceIdentifier {
  return PAExperimentHelper_isBackgroundListeningForSourceIdWithPAExperimentDAO_withNSString_(experiment, sourceIdentifier);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PAExperimentHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInputWithNameWithPAExperimentDAO:withNSString:withNSString:", "getInputWithName", "Lcom.pacoapp.paco.shared.model2.Input2;", 0x9, NULL, NULL },
    { "getInputsWithPAExperimentDAO:", "getInputs", "Ljava.util.List;", 0x9, NULL, "(Lcom/pacoapp/paco/shared/model2/ExperimentDAO;)Ljava/util/List<Lcom/pacoapp/paco/shared/model2/Input2;>;" },
    { "declaresLogAppUsageAndBrowserCollectionWithPAExperimentDAO:", "declaresLogAppUsageAndBrowserCollection", "Z", 0x9, NULL, NULL },
    { "declaresInstalledAppDataCollectionWithPAExperimentDAO:", "declaresInstalledAppDataCollection", "Z", 0x9, NULL, NULL },
    { "hasUserEditableScheduleWithPAExperimentDAO:", "hasUserEditableSchedule", "Z", 0x9, NULL, NULL },
    { "hasAppUsageTriggerWithPAExperimentDAO:", "hasAppUsageTrigger", "Z", 0x9, NULL, NULL },
    { "hasAppClosedTriggerWithPAExperimentDAO:", "hasAppClosedTrigger", "Z", 0x9, NULL, NULL },
    { "isLogActionsWithPAExperimentDAO:", "isLogActions", "Z", 0x9, NULL, NULL },
    { "shouldWatchProcessesWithPAExperimentDAO:", "shouldWatchProcesses", "Z", 0x9, NULL, NULL },
    { "shouldTriggerByWithPAExperimentDAO:withInt:withNSString:", "shouldTriggerBy", "Ljava.util.List;", 0x9, NULL, "(Lcom/pacoapp/paco/shared/model2/ExperimentDAO;ILjava/lang/String;)Ljava/util/List<Lcom/pacoapp/paco/shared/util/ExperimentHelper$Pair<Lcom/pacoapp/paco/shared/model2/ExperimentGroup;Lcom/pacoapp/paco/shared/model2/InterruptTrigger;>;>;" },
    { "isAnyGroupOngoingDurationWithPAExperimentDAO:", "isAnyGroupOngoingDuration", "Z", 0x9, NULL, NULL },
    { "isBackgroundListeningForSourceIdWithPAExperimentDAO:withNSString:", "isBackgroundListeningForSourceId", "Ljava.util.List;", 0x9, NULL, "(Lcom/pacoapp/paco/shared/model2/ExperimentDAO;Ljava/lang/String;)Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ExperimentGroup;>;" },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lcom.pacoapp.paco.shared.util.ExperimentHelper$Pair;"};
  static const J2ObjcClassInfo _PAExperimentHelper = { 2, "ExperimentHelper", "com.pacoapp.paco.shared.util", NULL, 0x1, 13, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_PAExperimentHelper;
}

@end

PAInput2 *PAExperimentHelper_getInputWithNameWithPAExperimentDAO_withNSString_withNSString_(PAExperimentDAO *experiment, NSString *name, NSString *groupName) {
  PAExperimentHelper_initialize();
  if (name == nil || [name isEmpty]) {
    return nil;
  }
  id<JavaUtilList> inputs = nil;
  if (groupName == nil || [groupName isEmpty]) {
    inputs = PAExperimentHelper_getInputsWithPAExperimentDAO_(experiment);
  }
  else {
    PAExperimentGroup *group = [((PAExperimentDAO *) nil_chk(experiment)) getGroupByNameWithNSString:groupName];
    if (group != nil) {
      inputs = [group getInputs];
    }
  }
  if (inputs != nil) {
    for (PAInput2 * __strong input in inputs) {
      if ([((NSString *) nil_chk(name)) isEqual:[((PAInput2 *) nil_chk(input)) getName]]) {
        return input;
      }
    }
  }
  return nil;
}

id<JavaUtilList> PAExperimentHelper_getInputsWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> inputs = new_JavaUtilArrayList_init();
  for (PAExperimentGroup * __strong group in nil_chk([((PAExperimentDAO *) nil_chk(experiment)) getGroups])) {
    [inputs addAllWithJavaUtilCollection:[((PAExperimentGroup *) nil_chk(group)) getInputs]];
  }
  return inputs;
}

jboolean PAExperimentHelper_declaresLogAppUsageAndBrowserCollectionWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  return [((PAExperimentDAO *) nil_chk(experiment)) getExtraDataCollectionDeclarations] != nil && [((id<JavaUtilList>) nil_chk([experiment getExtraDataCollectionDeclarations])) containsWithId:JavaLangInteger_valueOfWithInt_(PAExperimentDAOCore_APP_USAGE_BROWSER_HISTORY_DATA_COLLECTION)];
}

jboolean PAExperimentHelper_declaresInstalledAppDataCollectionWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  return [((PAExperimentDAO *) nil_chk(experiment)) getExtraDataCollectionDeclarations] != nil && [((id<JavaUtilList>) nil_chk([experiment getExtraDataCollectionDeclarations])) containsWithId:JavaLangInteger_valueOfWithInt_(PAExperimentDAOCore_APP_INSTALL_DATA_COLLECTION)];
}

jboolean PAExperimentHelper_hasUserEditableScheduleWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> experimentGroups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(experimentGroups)) {
    id<JavaUtilList> triggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
      if ([actionTrigger isKindOfClass:[PAScheduleTrigger class]]) {
        PAScheduleTrigger *scheduleTrigger = (PAScheduleTrigger *) cast_chk(actionTrigger, [PAScheduleTrigger class]);
        id<JavaUtilList> schedules = [((PAScheduleTrigger *) nil_chk(scheduleTrigger)) getSchedules];
        for (PASchedule * __strong schedule in nil_chk(schedules)) {
          if ([((JavaLangBoolean *) nil_chk([((PASchedule *) nil_chk(schedule)) getUserEditable])) booleanValue]) {
            return true;
          }
        }
      }
    }
  }
  return false;
}

jboolean PAExperimentHelper_hasAppUsageTriggerWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    id<JavaUtilList> triggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
      if ([actionTrigger isKindOfClass:[PAInterruptTrigger class]]) {
        PAInterruptTrigger *trigger = (PAInterruptTrigger *) cast_chk(actionTrigger, [PAInterruptTrigger class]);
        id<JavaUtilList> cues = [((PAInterruptTrigger *) nil_chk(trigger)) getCues];
        for (PAInterruptCue * __strong interruptCue in nil_chk(cues)) {
          if ([((JavaLangInteger *) nil_chk([((PAInterruptCue *) nil_chk(interruptCue)) getCueCode])) intValue] == PAInterruptCue_APP_USAGE || [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_APP_CLOSED) {
            return true;
          }
        }
      }
    }
  }
  return false;
}

jboolean PAExperimentHelper_hasAppClosedTriggerWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    id<JavaUtilList> triggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
      if ([actionTrigger isKindOfClass:[PAInterruptTrigger class]]) {
        PAInterruptTrigger *trigger = (PAInterruptTrigger *) cast_chk(actionTrigger, [PAInterruptTrigger class]);
        id<JavaUtilList> cues = [((PAInterruptTrigger *) nil_chk(trigger)) getCues];
        for (PAInterruptCue * __strong interruptCue in nil_chk(cues)) {
          if ([((JavaLangInteger *) nil_chk([((PAInterruptCue *) nil_chk(interruptCue)) getCueCode])) intValue] == PAInterruptCue_APP_CLOSED) {
            return true;
          }
        }
      }
    }
  }
  return false;
}

jboolean PAExperimentHelper_isLogActionsWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if ([((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getLogActions])) booleanValue]) {
      return true;
    }
  }
  return false;
}

jboolean PAExperimentHelper_shouldWatchProcessesWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  return PAExperimentHelper_hasAppUsageTriggerWithPAExperimentDAO_(experiment) || PAExperimentHelper_isLogActionsWithPAExperimentDAO_(experiment);
}

id<JavaUtilList> PAExperimentHelper_shouldTriggerByWithPAExperimentDAO_withInt_withNSString_(PAExperimentDAO *experiment, jint event, NSString *sourceIdentifier) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> groupsThatTrigger = new_JavaUtilArrayList_init();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    id<JavaUtilList> triggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
      if ([actionTrigger isKindOfClass:[PAInterruptTrigger class]]) {
        PAInterruptTrigger *trigger = (PAInterruptTrigger *) cast_chk(actionTrigger, [PAInterruptTrigger class]);
        id<JavaUtilList> cues = [((PAInterruptTrigger *) nil_chk(trigger)) getCues];
        for (PAInterruptCue * __strong interruptCue in nil_chk(cues)) {
          jboolean cueCodeMatches = [((JavaLangInteger *) nil_chk([((PAInterruptCue *) nil_chk(interruptCue)) getCueCode])) intValue] == event;
          if (!cueCodeMatches) {
            continue;
          }
          jboolean usesSourceId = [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_PACO_ACTION_EVENT || [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_APP_USAGE;
          jboolean sourceIdsMatch;
          jboolean isExperimentActionTrigger = [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_PACO_EXPERIMENT_JOINED_EVENT || [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_PACO_EXPERIMENT_ENDED_EVENT || [((JavaLangInteger *) nil_chk([interruptCue getCueCode])) intValue] == PAInterruptCue_PACO_EXPERIMENT_RESPONSE_RECEIVED_EVENT;
          jboolean triggerSourceIdIsEmpty = [interruptCue getCueSource] == nil || [((NSString *) nil_chk([interruptCue getCueSource])) isEmpty];
          if (usesSourceId) {
            jboolean paramEmpty = sourceIdentifier == nil || [sourceIdentifier isEmpty];
            sourceIdsMatch = ((paramEmpty && triggerSourceIdIsEmpty) || [((NSString *) nil_chk([interruptCue getCueSource])) isEqual:sourceIdentifier]);
          }
          else if (isExperimentActionTrigger) {
            jboolean paramExists = sourceIdentifier != nil && ![sourceIdentifier isEmpty];
            jboolean sameExperiment = JavaLangLong_parseLongWithNSString_(sourceIdentifier) == [((JavaLangLong *) nil_chk([experiment getId])) longLongValue];
            sourceIdsMatch = (paramExists == true && sameExperiment == true);
          }
          else {
            sourceIdsMatch = true;
          }
          if (cueCodeMatches && sourceIdsMatch) {
            [groupsThatTrigger addWithId:new_PAExperimentHelper_Pair_initWithId_withId_(experimentGroup, trigger)];
          }
        }
      }
    }
  }
  return groupsThatTrigger;
}

jboolean PAExperimentHelper_isAnyGroupOngoingDurationWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
      return true;
    }
  }
  return false;
}

id<JavaUtilList> PAExperimentHelper_isBackgroundListeningForSourceIdWithPAExperimentDAO_withNSString_(PAExperimentDAO *experiment, NSString *sourceIdentifier) {
  PAExperimentHelper_initialize();
  id<JavaUtilList> listeningExperimentGroups = new_JavaUtilArrayList_init();
  id<JavaUtilList> experimentGroups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(experimentGroups)) {
    if ([((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getBackgroundListen])) booleanValue] && [((NSString *) nil_chk([experimentGroup getBackgroundListenSourceIdentifier])) isEqual:sourceIdentifier]) {
      [listeningExperimentGroups addWithId:experimentGroup];
    }
  }
  return listeningExperimentGroups;
}

void PAExperimentHelper_init(PAExperimentHelper *self) {
  NSObject_init(self);
}

PAExperimentHelper *new_PAExperimentHelper_init() {
  PAExperimentHelper *self = [PAExperimentHelper alloc];
  PAExperimentHelper_init(self);
  return self;
}

PAExperimentHelper *create_PAExperimentHelper_init() {
  return new_PAExperimentHelper_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PAExperimentHelper)

@implementation PAExperimentHelper_Pair

- (instancetype)initWithId:(id)first
                    withId:(id)second {
  PAExperimentHelper_Pair_initWithId_withId_(self, first, second);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withId:", "Pair", NULL, 0x1, NULL, "(TS;TT;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x1, "TS;", NULL, "TS;", .constantValue.asLong = 0 },
    { "second_", NULL, 0x1, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PAExperimentHelper_Pair = { 2, "Pair", "com.pacoapp.paco.shared.util", "ExperimentHelper", 0x9, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<S:Ljava/lang/Object;T:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_PAExperimentHelper_Pair;
}

@end

void PAExperimentHelper_Pair_initWithId_withId_(PAExperimentHelper_Pair *self, id first, id second) {
  NSObject_init(self);
  self->first_ = first;
  self->second_ = second;
}

PAExperimentHelper_Pair *new_PAExperimentHelper_Pair_initWithId_withId_(id first, id second) {
  PAExperimentHelper_Pair *self = [PAExperimentHelper_Pair alloc];
  PAExperimentHelper_Pair_initWithId_withId_(self, first, second);
  return self;
}

PAExperimentHelper_Pair *create_PAExperimentHelper_Pair_initWithId_withId_(id first, id second) {
  return new_PAExperimentHelper_Pair_initWithId_withId_(first, second);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PAExperimentHelper_Pair)

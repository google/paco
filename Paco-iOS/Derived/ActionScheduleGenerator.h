//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/scheduling/ActionScheduleGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("ActionScheduleGenerator_INCLUDE_ALL")
#ifdef ActionScheduleGenerator_RESTRICT
#define ActionScheduleGenerator_INCLUDE_ALL 0
#else
#define ActionScheduleGenerator_INCLUDE_ALL 1
#endif
#undef ActionScheduleGenerator_RESTRICT

#if !defined (PAActionScheduleGenerator_) && (ActionScheduleGenerator_INCLUDE_ALL || defined(PAActionScheduleGenerator_INCLUDE))
#define PAActionScheduleGenerator_

@class JavaLangLong;
@class OrgJodaTimeDateMidnight;
@class OrgJodaTimeDateTime;
@class PAActionSpecification;
@class PAExperimentDAO;
@class PAExperimentGroup;
@class PASchedule;
@protocol JavaUtilList;
@protocol PAEsmSignalStore;
@protocol PAEventStore;

@interface PAActionScheduleGenerator : NSObject

#pragma mark Public

- (instancetype)initWithPAExperimentDAO:(PAExperimentDAO *)experiment;

+ (jboolean)areAllGroupsFixedDurationWithPAExperimentDAO:(PAExperimentDAO *)experiment;

+ (id<JavaUtilList>)arrangeExperimentsByNextTimeWithJavaUtilList:(id<JavaUtilList>)experiments
                                            withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                withPAEventStore:(id<PAEventStore>)eventStore;

+ (id<JavaUtilList>)getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                           withJavaUtilList:(id<JavaUtilList>)experiments
                                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                           withPAEventStore:(id<PAEventStore>)eventStore;

+ (OrgJodaTimeDateMidnight *)getEarliestStartDateWithPAExperimentDAO:(PAExperimentDAO *)experiment;

+ (OrgJodaTimeDateTime *)getEndDateTimeWithPAExperimentDAO:(PAExperimentDAO *)experiment;

+ (OrgJodaTimeDateTime *)getLastEndTimeWithPAExperimentDAO:(PAExperimentDAO *)experiment;

- (OrgJodaTimeDateTime *)getNextAlarmTimeWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)dateTime
                                                withJavaLangLong:(JavaLangLong *)experimentServerId
                                                  withPASchedule:(PASchedule *)schedule
                                                withPAEventStore:(id<PAEventStore>)eventStore
                                                    withNSString:(NSString *)groupName
                                                withJavaLangLong:(JavaLangLong *)actionTriggerId;

+ (jboolean)isExperimentGroupOverWithPAExperimentGroup:(PAExperimentGroup *)experimentGroup;

+ (jboolean)isExperimentGroupStartedWithPAExperimentGroup:(PAExperimentGroup *)experimentGroup;

+ (jboolean)isExperimentNotStartedYetWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                         withPAExperimentDAO:(PAExperimentDAO *)experiment;

+ (jboolean)isOverWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                      withPAExperimentDAO:(PAExperimentDAO *)experiment;

#pragma mark Package-Private

+ (id<JavaUtilList>)arrangeExperimentsByNextTimeFromWithJavaUtilList:(id<JavaUtilList>)experiments
                                             withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                    withPAEventStore:(id<PAEventStore>)eventStore;

- (PAActionSpecification *)getNextTimeFromNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                    withPAEventStore:(id<PAEventStore>)eventStore;

- (OrgJodaTimeDateMidnight *)getPeriodStartWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                    withPASchedule:(PASchedule *)schedule;

- (OrgJodaTimeDateTime *)scheduleESMWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                             withPASchedule:(PASchedule *)schedule
                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                           withJavaLangLong:(JavaLangLong *)experimentId
                                               withNSString:(NSString *)groupName
                                           withJavaLangLong:(JavaLangLong *)actionTriggerId;

@end

J2OBJC_EMPTY_STATIC_INIT(PAActionScheduleGenerator)

FOUNDATION_EXPORT id<JavaUtilList> PAActionScheduleGenerator_getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime_withJavaUtilList_withPAEsmSignalStore_withPAEventStore_(OrgJodaTimeDateTime *now, id<JavaUtilList> experiments, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore);

FOUNDATION_EXPORT id<JavaUtilList> PAActionScheduleGenerator_arrangeExperimentsByNextTimeWithJavaUtilList_withPAEsmSignalStore_withPAEventStore_(id<JavaUtilList> experiments, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore);

FOUNDATION_EXPORT id<JavaUtilList> PAActionScheduleGenerator_arrangeExperimentsByNextTimeFromWithJavaUtilList_withOrgJodaTimeDateTime_withPAEsmSignalStore_withPAEventStore_(id<JavaUtilList> experiments, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore);

FOUNDATION_EXPORT void PAActionScheduleGenerator_initWithPAExperimentDAO_(PAActionScheduleGenerator *self, PAExperimentDAO *experiment);

FOUNDATION_EXPORT PAActionScheduleGenerator *new_PAActionScheduleGenerator_initWithPAExperimentDAO_(PAExperimentDAO *experiment) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT PAActionScheduleGenerator *create_PAActionScheduleGenerator_initWithPAExperimentDAO_(PAExperimentDAO *experiment);

FOUNDATION_EXPORT jboolean PAActionScheduleGenerator_isExperimentGroupOverWithPAExperimentGroup_(PAExperimentGroup *experimentGroup);

FOUNDATION_EXPORT jboolean PAActionScheduleGenerator_isExperimentGroupStartedWithPAExperimentGroup_(PAExperimentGroup *experimentGroup);

FOUNDATION_EXPORT jboolean PAActionScheduleGenerator_isOverWithOrgJodaTimeDateTime_withPAExperimentDAO_(OrgJodaTimeDateTime *now, PAExperimentDAO *experiment);

FOUNDATION_EXPORT jboolean PAActionScheduleGenerator_areAllGroupsFixedDurationWithPAExperimentDAO_(PAExperimentDAO *experiment);

FOUNDATION_EXPORT jboolean PAActionScheduleGenerator_isExperimentNotStartedYetWithOrgJodaTimeDateTime_withPAExperimentDAO_(OrgJodaTimeDateTime *now, PAExperimentDAO *experiment);

FOUNDATION_EXPORT OrgJodaTimeDateMidnight *PAActionScheduleGenerator_getEarliestStartDateWithPAExperimentDAO_(PAExperimentDAO *experiment);

FOUNDATION_EXPORT OrgJodaTimeDateTime *PAActionScheduleGenerator_getLastEndTimeWithPAExperimentDAO_(PAExperimentDAO *experiment);

FOUNDATION_EXPORT OrgJodaTimeDateTime *PAActionScheduleGenerator_getEndDateTimeWithPAExperimentDAO_(PAExperimentDAO *experiment);

J2OBJC_TYPE_LITERAL_HEADER(PAActionScheduleGenerator)

@compatibility_alias ComPacoappPacoSharedSchedulingActionScheduleGenerator PAActionScheduleGenerator;

#endif

#pragma pop_macro("ActionScheduleGenerator_INCLUDE_ALL")

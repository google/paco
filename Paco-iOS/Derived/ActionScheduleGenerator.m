//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/scheduling/ActionScheduleGenerator.java
//

#include "ActionScheduleGenerator.h"
#include "ActionSpecification.h"
#include "ActionTrigger.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "EsmGenerator2.h"
#include "EsmSignalStore.h"
#include "EventStore.h"
#include "ExperimentDAO.h"
#include "ExperimentGroup.h"
#include "Interval.h"
#include "J2ObjC_source.h"
#include "NonESMSignalGenerator.h"
#include "PacoAction.h"
#include "PacoNotificationAction.h"
#include "Schedule.h"
#include "ScheduleTrigger.h"
#include "SignalTime.h"
#include "TimeUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface PAActionScheduleGenerator () {
 @public
  PAExperimentDAO *experiment_;
}

- (OrgJodaTimeDateTime *)lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                             withPASchedule:(PASchedule *)schedule
                                                           withJavaLangLong:(JavaLangLong *)experimentId
                                                               withNSString:(NSString *)groupName
                                                           withJavaLangLong:(JavaLangLong *)actionTriggerId;

- (OrgJodaTimeDateTime *)getNextSignalAfterNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                     withJavaUtilList:(id<JavaUtilList>)signals;

- (void)ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                             withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                   withPASchedule:(PASchedule *)schedule
                                                 withJavaLangLong:(JavaLangLong *)experimentId
                                                     withNSString:(NSString *)groupName
                                                 withJavaLangLong:(JavaLangLong *)actionTriggerId;

- (void)generateNextPeriodWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)generatingPeriodStart
                                 withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                       withPASchedule:(PASchedule *)schedule
                                     withJavaLangLong:(JavaLangLong *)experimentId
                                         withNSString:(NSString *)groupName
                                     withJavaLangLong:(JavaLangLong *)actionTriggerId;

- (id<JavaUtilList>)generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)periodStart
                                                             withPASchedule:(PASchedule *)schedule
                                                           withJavaLangLong:(JavaLangLong *)experimentId
                                                               withNSString:(NSString *)groupName
                                                           withJavaLangLong:(JavaLangLong *)actionTriggerId;

- (void)storeSignalTimesWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)periodStart
                                   withJavaUtilList:(id<JavaUtilList>)times
                               withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                   withJavaLangLong:(JavaLangLong *)experimentId
                                       withNSString:(NSString *)groupName
                                   withJavaLangLong:(JavaLangLong *)actionTriggerId
                                   withJavaLangLong:(JavaLangLong *)scheduleId;

@end

J2OBJC_FIELD_SETTER(PAActionScheduleGenerator, experiment_, PAExperimentDAO *)

__attribute__((unused)) static OrgJodaTimeDateTime *PAActionScheduleGenerator_lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId);

__attribute__((unused)) static OrgJodaTimeDateTime *PAActionScheduleGenerator_getNextSignalAfterNowWithOrgJodaTimeDateTime_withJavaUtilList_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<JavaUtilList> signals);

__attribute__((unused)) static void PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId);

__attribute__((unused)) static void PAActionScheduleGenerator_generateNextPeriodWithOrgJodaTimeDateMidnight_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *generatingPeriodStart, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId);

__attribute__((unused)) static id<JavaUtilList> PAActionScheduleGenerator_generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *periodStart, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId);

__attribute__((unused)) static void PAActionScheduleGenerator_storeSignalTimesWithOrgJodaTimeDateMidnight_withJavaUtilList_withPAEsmSignalStore_withJavaLangLong_withNSString_withJavaLangLong_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *periodStart, id<JavaUtilList> times, id<PAEsmSignalStore> alarmStore, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId, JavaLangLong *scheduleId);

@implementation PAActionScheduleGenerator

+ (id<JavaUtilList>)getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                           withJavaUtilList:(id<JavaUtilList>)experiments
                                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                           withPAEventStore:(id<PAEventStore>)eventStore {
  return PAActionScheduleGenerator_getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime_withJavaUtilList_withPAEsmSignalStore_withPAEventStore_(now, experiments, alarmStore, eventStore);
}

+ (id<JavaUtilList>)arrangeExperimentsByNextTimeWithJavaUtilList:(id<JavaUtilList>)experiments
                                            withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                withPAEventStore:(id<PAEventStore>)eventStore {
  return PAActionScheduleGenerator_arrangeExperimentsByNextTimeWithJavaUtilList_withPAEsmSignalStore_withPAEventStore_(experiments, alarmStore, eventStore);
}

+ (id<JavaUtilList>)arrangeExperimentsByNextTimeFromWithJavaUtilList:(id<JavaUtilList>)experiments
                                             withOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                    withPAEventStore:(id<PAEventStore>)eventStore {
  return PAActionScheduleGenerator_arrangeExperimentsByNextTimeFromWithJavaUtilList_withOrgJodaTimeDateTime_withPAEsmSignalStore_withPAEventStore_(experiments, now, alarmStore, eventStore);
}

- (instancetype)initWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  PAActionScheduleGenerator_initWithPAExperimentDAO_(self, experiment);
  return self;
}

- (PAActionSpecification *)getNextTimeFromNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                    withPAEventStore:(id<PAEventStore>)eventStore {
  if (now == nil || PAActionScheduleGenerator_isOverWithOrgJodaTimeDateTime_withPAExperimentDAO_(now, experiment_)) {
    return nil;
  }
  PAActionSpecification *nextTimeActionSpecification = nil;
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment_)) getGroups];
  OrgJodaTimeDateTime *currentNearestTime = nil;
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if (PAActionScheduleGenerator_isExperimentGroupOverWithPAExperimentGroup_(experimentGroup)) {
      continue;
    }
    OrgJodaTimeDateTime *startDateTime = now;
    if (!PAActionScheduleGenerator_isExperimentGroupStartedWithPAExperimentGroup_(experimentGroup)) {
      startDateTime = PATimeUtil_unformatDateWithNSString_([((PAExperimentGroup *) nil_chk(experimentGroup)) getStartDate]);
    }
    id<JavaUtilList> actionTriggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(actionTriggers)) {
      if ([actionTrigger isKindOfClass:[PAScheduleTrigger class]]) {
        PAScheduleTrigger *scheduleTrigger = (PAScheduleTrigger *) cast_chk(actionTrigger, [PAScheduleTrigger class]);
        id<JavaUtilList> schedules = [((PAScheduleTrigger *) nil_chk(scheduleTrigger)) getSchedules];
        for (PASchedule * __strong schedule in nil_chk(schedules)) {
          OrgJodaTimeDateTime *nextTimeForSchedule = nil;
          if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_ESM)]) {
            nextTimeForSchedule = [self scheduleESMWithOrgJodaTimeDateTime:startDateTime withPASchedule:schedule withPAEsmSignalStore:alarmStore withJavaLangLong:[experiment_ getId] withNSString:[experimentGroup getName] withJavaLangLong:[((PAActionTrigger *) nil_chk(actionTrigger)) getId]];
          }
          else {
            nextTimeForSchedule = [self getNextAlarmTimeWithOrgJodaTimeDateTime:startDateTime withJavaLangLong:[experiment_ getId] withPASchedule:schedule withPAEventStore:eventStore withNSString:[experimentGroup getName] withJavaLangLong:[((PAActionTrigger *) nil_chk(actionTrigger)) getId]];
          }
          if (nextTimeForSchedule != nil && (currentNearestTime == nil || [nextTimeForSchedule isBeforeWithOrgJodaTimeReadableInstant:currentNearestTime])) {
            currentNearestTime = nextTimeForSchedule;
            id<JavaUtilList> actions = [scheduleTrigger getActions];
            PAPacoNotificationAction *notificationAction = nil;
            for (PAPacoAction * __strong pacoAction in nil_chk(actions)) {
              if ([((PAPacoAction *) nil_chk(pacoAction)) getActionCode] != nil && [((JavaLangInteger *) nil_chk([pacoAction getActionCode])) isEqual:JavaLangInteger_valueOfWithInt_(PAPacoAction_NOTIFICATION_TO_PARTICIPATE_ACTION_CODE)]) {
                notificationAction = (PAPacoNotificationAction *) cast_chk(pacoAction, [PAPacoNotificationAction class]);
              }
            }
            nextTimeActionSpecification = new_PAActionSpecification_initWithOrgJodaTimeDateTime_withPAExperimentDAO_withPAExperimentGroup_withPAActionTrigger_withPAPacoNotificationAction_withJavaLangLong_(currentNearestTime, experiment_, experimentGroup, actionTrigger, notificationAction, [schedule getId]);
          }
        }
      }
    }
  }
  return nextTimeActionSpecification;
}

+ (jboolean)isExperimentGroupOverWithPAExperimentGroup:(PAExperimentGroup *)experimentGroup {
  return PAActionScheduleGenerator_isExperimentGroupOverWithPAExperimentGroup_(experimentGroup);
}

+ (jboolean)isExperimentGroupStartedWithPAExperimentGroup:(PAExperimentGroup *)experimentGroup {
  return PAActionScheduleGenerator_isExperimentGroupStartedWithPAExperimentGroup_(experimentGroup);
}

+ (jboolean)isOverWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                      withPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_isOverWithOrgJodaTimeDateTime_withPAExperimentDAO_(now, experiment);
}

+ (jboolean)areAllGroupsFixedDurationWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_areAllGroupsFixedDurationWithPAExperimentDAO_(experiment);
}

+ (jboolean)isExperimentNotStartedYetWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                         withPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_isExperimentNotStartedYetWithOrgJodaTimeDateTime_withPAExperimentDAO_(now, experiment);
}

+ (OrgJodaTimeDateMidnight *)getEarliestStartDateWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_getEarliestStartDateWithPAExperimentDAO_(experiment);
}

+ (OrgJodaTimeDateTime *)getLastEndTimeWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_getLastEndTimeWithPAExperimentDAO_(experiment);
}

+ (OrgJodaTimeDateTime *)getEndDateTimeWithPAExperimentDAO:(PAExperimentDAO *)experiment {
  return PAActionScheduleGenerator_getEndDateTimeWithPAExperimentDAO_(experiment);
}

- (OrgJodaTimeDateTime *)scheduleESMWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                             withPASchedule:(PASchedule *)schedule
                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                           withJavaLangLong:(JavaLangLong *)experimentId
                                               withNSString:(NSString *)groupName
                                           withJavaLangLong:(JavaLangLong *)actionTriggerId {
  if ([((PASchedule *) nil_chk(schedule)) convertEsmPeriodToDays] == 1 && ![((JavaLangBoolean *) nil_chk([schedule getEsmWeekends])) booleanValue] && PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(now)) {
    now = PATimeUtil_skipWeekendsWithOrgJodaTimeDateTime_(now);
  }
  PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, now, alarmStore, schedule, experimentId, groupName, actionTriggerId);
  OrgJodaTimeDateTime *nextPeriod = [((OrgJodaTimeDateTime *) nil_chk(now)) plusDaysWithInt:[schedule convertEsmPeriodToDays]];
  if ([schedule convertEsmPeriodToDays] == 1 && ![((JavaLangBoolean *) nil_chk([schedule getEsmWeekends])) booleanValue] && PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(nextPeriod)) {
    nextPeriod = PATimeUtil_skipWeekendsWithOrgJodaTimeDateTime_(nextPeriod);
  }
  PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, nextPeriod, alarmStore, schedule, experimentId, groupName, actionTriggerId);
  OrgJodaTimeDateTime *next = PAActionScheduleGenerator_lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, now, alarmStore, schedule, experimentId, groupName, actionTriggerId);
  if (next != nil) {
    return next;
  }
  return PAActionScheduleGenerator_lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, nextPeriod, alarmStore, schedule, experimentId, groupName, actionTriggerId);
}

- (OrgJodaTimeDateTime *)lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                       withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                             withPASchedule:(PASchedule *)schedule
                                                           withJavaLangLong:(JavaLangLong *)experimentId
                                                               withNSString:(NSString *)groupName
                                                           withJavaLangLong:(JavaLangLong *)actionTriggerId {
  return PAActionScheduleGenerator_lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, now, alarmStore, schedule, experimentId, groupName, actionTriggerId);
}

- (OrgJodaTimeDateTime *)getNextSignalAfterNowWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                     withJavaUtilList:(id<JavaUtilList>)signals {
  return PAActionScheduleGenerator_getNextSignalAfterNowWithOrgJodaTimeDateTime_withJavaUtilList_(self, now, signals);
}

- (void)ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                             withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                                   withPASchedule:(PASchedule *)schedule
                                                 withJavaLangLong:(JavaLangLong *)experimentId
                                                     withNSString:(NSString *)groupName
                                                 withJavaLangLong:(JavaLangLong *)actionTriggerId {
  PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, now, alarmStore, schedule, experimentId, groupName, actionTriggerId);
}

- (OrgJodaTimeDateMidnight *)getPeriodStartWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)now
                                                    withPASchedule:(PASchedule *)schedule {
  switch ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getEsmPeriodInDays])) intValue]) {
    case PASchedule_ESM_PERIOD_DAY:
    return [((OrgJodaTimeDateTime *) nil_chk(now)) toDateMidnight];
    case PASchedule_ESM_PERIOD_WEEK:
    return [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime_Property *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) dayOfWeek])) withMinimumValue])) toDateMidnight];
    case PASchedule_ESM_PERIOD_MONTH:
    return [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime_Property *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(now)) dayOfMonth])) withMinimumValue])) toDateMidnight];
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot get here.");
  }
}

- (void)generateNextPeriodWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)generatingPeriodStart
                                 withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                       withPASchedule:(PASchedule *)schedule
                                     withJavaLangLong:(JavaLangLong *)experimentId
                                         withNSString:(NSString *)groupName
                                     withJavaLangLong:(JavaLangLong *)actionTriggerId {
  PAActionScheduleGenerator_generateNextPeriodWithOrgJodaTimeDateMidnight_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, generatingPeriodStart, alarmStore, schedule, experimentId, groupName, actionTriggerId);
}

- (id<JavaUtilList>)generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)periodStart
                                                             withPASchedule:(PASchedule *)schedule
                                                           withJavaLangLong:(JavaLangLong *)experimentId
                                                               withNSString:(NSString *)groupName
                                                           withJavaLangLong:(JavaLangLong *)actionTriggerId {
  return PAActionScheduleGenerator_generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, periodStart, schedule, experimentId, groupName, actionTriggerId);
}

- (void)storeSignalTimesWithOrgJodaTimeDateMidnight:(OrgJodaTimeDateMidnight *)periodStart
                                   withJavaUtilList:(id<JavaUtilList>)times
                               withPAEsmSignalStore:(id<PAEsmSignalStore>)alarmStore
                                   withJavaLangLong:(JavaLangLong *)experimentId
                                       withNSString:(NSString *)groupName
                                   withJavaLangLong:(JavaLangLong *)actionTriggerId
                                   withJavaLangLong:(JavaLangLong *)scheduleId {
  PAActionScheduleGenerator_storeSignalTimesWithOrgJodaTimeDateMidnight_withJavaUtilList_withPAEsmSignalStore_withJavaLangLong_withNSString_withJavaLangLong_withJavaLangLong_(self, periodStart, times, alarmStore, experimentId, groupName, actionTriggerId, scheduleId);
}

- (OrgJodaTimeDateTime *)getNextAlarmTimeWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)dateTime
                                                withJavaLangLong:(JavaLangLong *)experimentServerId
                                                  withPASchedule:(PASchedule *)schedule
                                                withPAEventStore:(id<PAEventStore>)eventStore
                                                    withNSString:(NSString *)groupName
                                                withJavaLangLong:(JavaLangLong *)actionTriggerId {
  if (![((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_ESM)]) {
    return [new_PANonESMSignalGenerator_initWithPASchedule_withJavaLangLong_withPAEventStore_withNSString_withJavaLangLong_(schedule, experimentServerId, eventStore, groupName, actionTriggerId) getNextAlarmTimeWithOrgJodaTimeDateTime:dateTime];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime:withJavaUtilList:withPAEsmSignalStore:withPAEventStore:", "getAllAlarmsWithinOneMinuteofNow", "Ljava.util.List;", 0x9, NULL, "(Lorg/joda/time/DateTime;Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ExperimentDAO;>;Lcom/pacoapp/paco/shared/scheduling/EsmSignalStore;Lcom/pacoapp/paco/shared/model2/EventStore;)Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/ActionSpecification;>;" },
    { "arrangeExperimentsByNextTimeWithJavaUtilList:withPAEsmSignalStore:withPAEventStore:", "arrangeExperimentsByNextTime", "Ljava.util.List;", 0x9, NULL, "(Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ExperimentDAO;>;Lcom/pacoapp/paco/shared/scheduling/EsmSignalStore;Lcom/pacoapp/paco/shared/model2/EventStore;)Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/ActionSpecification;>;" },
    { "arrangeExperimentsByNextTimeFromWithJavaUtilList:withOrgJodaTimeDateTime:withPAEsmSignalStore:withPAEventStore:", "arrangeExperimentsByNextTimeFrom", "Ljava.util.List;", 0x8, NULL, "(Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ExperimentDAO;>;Lorg/joda/time/DateTime;Lcom/pacoapp/paco/shared/scheduling/EsmSignalStore;Lcom/pacoapp/paco/shared/model2/EventStore;)Ljava/util/List<Lcom/pacoapp/paco/shared/scheduling/ActionSpecification;>;" },
    { "initWithPAExperimentDAO:", "ActionScheduleGenerator", NULL, 0x1, NULL, NULL },
    { "getNextTimeFromNowWithOrgJodaTimeDateTime:withPAEsmSignalStore:withPAEventStore:", "getNextTimeFromNow", "Lcom.pacoapp.paco.shared.scheduling.ActionSpecification;", 0x0, NULL, NULL },
    { "isExperimentGroupOverWithPAExperimentGroup:", "isExperimentGroupOver", "Z", 0x9, NULL, NULL },
    { "isExperimentGroupStartedWithPAExperimentGroup:", "isExperimentGroupStarted", "Z", 0x9, NULL, NULL },
    { "isOverWithOrgJodaTimeDateTime:withPAExperimentDAO:", "isOver", "Z", 0x9, NULL, NULL },
    { "areAllGroupsFixedDurationWithPAExperimentDAO:", "areAllGroupsFixedDuration", "Z", 0x9, NULL, NULL },
    { "isExperimentNotStartedYetWithOrgJodaTimeDateTime:withPAExperimentDAO:", "isExperimentNotStartedYet", "Z", 0x9, NULL, NULL },
    { "getEarliestStartDateWithPAExperimentDAO:", "getEarliestStartDate", "Lorg.joda.time.DateMidnight;", 0x9, NULL, NULL },
    { "getLastEndTimeWithPAExperimentDAO:", "getLastEndTime", "Lorg.joda.time.DateTime;", 0x9, NULL, NULL },
    { "getEndDateTimeWithPAExperimentDAO:", "getEndDateTime", "Lorg.joda.time.DateTime;", 0x9, NULL, NULL },
    { "scheduleESMWithOrgJodaTimeDateTime:withPASchedule:withPAEsmSignalStore:withJavaLangLong:withNSString:withJavaLangLong:", "scheduleESM", "Lorg.joda.time.DateTime;", 0x0, NULL, NULL },
    { "lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime:withPAEsmSignalStore:withPASchedule:withJavaLangLong:withNSString:withJavaLangLong:", "lookupNextTimeOnEsmSchedule", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getNextSignalAfterNowWithOrgJodaTimeDateTime:withJavaUtilList:", "getNextSignalAfterNow", "Lorg.joda.time.DateTime;", 0x2, NULL, "(Lorg/joda/time/DateTime;Ljava/util/List<Lorg/joda/time/DateTime;>;)Lorg/joda/time/DateTime;" },
    { "ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime:withPAEsmSignalStore:withPASchedule:withJavaLangLong:withNSString:withJavaLangLong:", "ensureScheduleIsGeneratedForPeriod", "V", 0x2, NULL, NULL },
    { "getPeriodStartWithOrgJodaTimeDateTime:withPASchedule:", "getPeriodStart", "Lorg.joda.time.DateMidnight;", 0x0, NULL, NULL },
    { "generateNextPeriodWithOrgJodaTimeDateMidnight:withPAEsmSignalStore:withPASchedule:withJavaLangLong:withNSString:withJavaLangLong:", "generateNextPeriod", "V", 0x2, NULL, NULL },
    { "generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight:withPASchedule:withJavaLangLong:withNSString:withJavaLangLong:", "generateSignalTimesForPeriod", "Ljava.util.List;", 0x2, NULL, "(Lorg/joda/time/DateMidnight;Lcom/pacoapp/paco/shared/model2/Schedule;Ljava/lang/Long;Ljava/lang/String;Ljava/lang/Long;)Ljava/util/List<Lorg/joda/time/DateTime;>;" },
    { "storeSignalTimesWithOrgJodaTimeDateMidnight:withJavaUtilList:withPAEsmSignalStore:withJavaLangLong:withNSString:withJavaLangLong:withJavaLangLong:", "storeSignalTimes", "V", 0x2, NULL, "(Lorg/joda/time/DateMidnight;Ljava/util/List<Lorg/joda/time/DateTime;>;Lcom/pacoapp/paco/shared/scheduling/EsmSignalStore;Ljava/lang/Long;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;)V" },
    { "getNextAlarmTimeWithOrgJodaTimeDateTime:withJavaLangLong:withPASchedule:withPAEventStore:withNSString:withJavaLangLong:", "getNextAlarmTime", "Lorg.joda.time.DateTime;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "experiment_", NULL, 0x2, "Lcom.pacoapp.paco.shared.model2.ExperimentDAO;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PAActionScheduleGenerator = { 2, "ActionScheduleGenerator", "com.pacoapp.paco.shared.scheduling", NULL, 0x1, 22, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PAActionScheduleGenerator;
}

@end

id<JavaUtilList> PAActionScheduleGenerator_getAllAlarmsWithinOneMinuteofNowWithOrgJodaTimeDateTime_withJavaUtilList_withPAEsmSignalStore_withPAEventStore_(OrgJodaTimeDateTime *now, id<JavaUtilList> experiments, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore) {
  PAActionScheduleGenerator_initialize();
  id<JavaUtilList> times = PAActionScheduleGenerator_arrangeExperimentsByNextTimeFromWithJavaUtilList_withOrgJodaTimeDateTime_withPAEsmSignalStore_withPAEventStore_(experiments, now, alarmStore, eventStore);
  id<JavaUtilList> matchingTimes = new_JavaUtilArrayList_init();
  for (PAActionSpecification * __strong time in nil_chk(times)) {
    if ([new_OrgJodaTimeInterval_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(now, ((PAActionSpecification *) nil_chk(time))->time_) toDurationMillis] < 60000) {
      [matchingTimes addWithId:time];
    }
  }
  return matchingTimes;
}

id<JavaUtilList> PAActionScheduleGenerator_arrangeExperimentsByNextTimeWithJavaUtilList_withPAEsmSignalStore_withPAEventStore_(id<JavaUtilList> experiments, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore) {
  PAActionScheduleGenerator_initialize();
  return PAActionScheduleGenerator_arrangeExperimentsByNextTimeFromWithJavaUtilList_withOrgJodaTimeDateTime_withPAEsmSignalStore_withPAEventStore_(experiments, new_OrgJodaTimeDateTime_init(), alarmStore, eventStore);
}

id<JavaUtilList> PAActionScheduleGenerator_arrangeExperimentsByNextTimeFromWithJavaUtilList_withOrgJodaTimeDateTime_withPAEsmSignalStore_withPAEventStore_(id<JavaUtilList> experiments, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, id<PAEventStore> eventStore) {
  PAActionScheduleGenerator_initialize();
  id<JavaUtilList> times = new_JavaUtilArrayList_init();
  for (PAExperimentDAO * __strong experiment in nil_chk(experiments)) {
    PAActionScheduleGenerator *actionScheduleGenerator = new_PAActionScheduleGenerator_initWithPAExperimentDAO_(experiment);
    PAActionSpecification *nextTimeFromNow = [actionScheduleGenerator getNextTimeFromNowWithOrgJodaTimeDateTime:now withPAEsmSignalStore:alarmStore withPAEventStore:eventStore];
    if (nextTimeFromNow != nil) {
      [times addWithId:nextTimeFromNow];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_(times);
  return times;
}

void PAActionScheduleGenerator_initWithPAExperimentDAO_(PAActionScheduleGenerator *self, PAExperimentDAO *experiment) {
  NSObject_init(self);
  self->experiment_ = experiment;
}

PAActionScheduleGenerator *new_PAActionScheduleGenerator_initWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAActionScheduleGenerator *self = [PAActionScheduleGenerator alloc];
  PAActionScheduleGenerator_initWithPAExperimentDAO_(self, experiment);
  return self;
}

PAActionScheduleGenerator *create_PAActionScheduleGenerator_initWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  return new_PAActionScheduleGenerator_initWithPAExperimentDAO_(experiment);
}

jboolean PAActionScheduleGenerator_isExperimentGroupOverWithPAExperimentGroup_(PAExperimentGroup *experimentGroup) {
  PAActionScheduleGenerator_initialize();
  if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
    return false;
  }
  OrgJodaTimeDateTime *now = OrgJodaTimeDateTime_now();
  id<JavaUtilList> triggers = [experimentGroup getActionTriggers];
  for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
    OrgJodaTimeDateTime *lastTimeForSignalGroup = nil;
    if ([actionTrigger isKindOfClass:[PAScheduleTrigger class]]) {
      PAScheduleTrigger *scheduledTrigger = (PAScheduleTrigger *) cast_chk(actionTrigger, [PAScheduleTrigger class]);
      id<JavaUtilList> schedules = [((PAScheduleTrigger *) nil_chk(scheduledTrigger)) getSchedules];
      for (PASchedule * __strong schedule in nil_chk(schedules)) {
        if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_WEEKDAY)]) {
          id<JavaUtilList> times = [schedule getSignalTimes];
          PASignalTime *lastSignalTime = [times getWithInt:[((id<JavaUtilList>) nil_chk(times)) size] - 1];
          if ([((PASignalTime *) nil_chk(lastSignalTime)) getType] != nil && [((JavaLangInteger *) nil_chk([lastSignalTime getType])) isEqual:JreLoadStatic(PASignalTime, FIXED_TIME)]) {
            OrgJodaTimeDateTime *lastTimeForDay = [new_OrgJodaTimeDateTime_init() plusWithLong:[((JavaLangInteger *) nil_chk([lastSignalTime getFixedTimeMillisFromMidnight])) intValue]];
            lastTimeForSignalGroup = [((OrgJodaTimeDateTime *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) toDateTime])) withMillisOfDayWithInt:[((OrgJodaTimeDateTime *) nil_chk(lastTimeForDay)) getMillisOfDay]];
          }
          else {
            lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
          }
        }
        else {
          lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
        }
      }
    }
    else {
      lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
    }
    if ([((OrgJodaTimeDateTime *) nil_chk(lastTimeForSignalGroup)) isAfterWithOrgJodaTimeReadableInstant:now]) {
      return false;
    }
  }
  return true;
}

jboolean PAActionScheduleGenerator_isExperimentGroupStartedWithPAExperimentGroup_(PAExperimentGroup *experimentGroup) {
  PAActionScheduleGenerator_initialize();
  if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
    return true;
  }
  OrgJodaTimeDateMidnight *startDate = [((OrgJodaTimeDateTime *) nil_chk(PATimeUtil_unformatDateWithNSString_([experimentGroup getStartDate]))) toDateMidnight];
  if ([((OrgJodaTimeDateTime *) nil_chk(OrgJodaTimeDateTime_now())) isBeforeWithOrgJodaTimeReadableInstant:startDate]) {
    return false;
  }
  return true;
}

jboolean PAActionScheduleGenerator_isOverWithOrgJodaTimeDateTime_withPAExperimentDAO_(OrgJodaTimeDateTime *now, PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  return PAActionScheduleGenerator_areAllGroupsFixedDurationWithPAExperimentDAO_(experiment) && [((OrgJodaTimeDateTime *) nil_chk(now)) isAfterWithOrgJodaTimeReadableInstant:PAActionScheduleGenerator_getEndDateTimeWithPAExperimentDAO_(experiment)];
}

jboolean PAActionScheduleGenerator_areAllGroupsFixedDurationWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
      return false;
    }
  }
  return true;
}

jboolean PAActionScheduleGenerator_isExperimentNotStartedYetWithOrgJodaTimeDateTime_withPAExperimentDAO_(OrgJodaTimeDateTime *now, PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  return PAActionScheduleGenerator_areAllGroupsFixedDurationWithPAExperimentDAO_(experiment) && [((OrgJodaTimeDateTime *) nil_chk(now)) isBeforeWithOrgJodaTimeReadableInstant:PAActionScheduleGenerator_getEarliestStartDateWithPAExperimentDAO_(experiment)];
}

OrgJodaTimeDateMidnight *PAActionScheduleGenerator_getEarliestStartDateWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  OrgJodaTimeDateMidnight *currentEarliestStartDate = nil;
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
      continue;
    }
    OrgJodaTimeDateMidnight *startDate = [((OrgJodaTimeDateTime *) nil_chk(PATimeUtil_unformatDateWithNSString_([experimentGroup getStartDate]))) toDateMidnight];
    if (currentEarliestStartDate == nil || [((OrgJodaTimeDateMidnight *) nil_chk(startDate)) isBeforeWithOrgJodaTimeReadableInstant:currentEarliestStartDate]) {
      currentEarliestStartDate = startDate;
    }
  }
  return currentEarliestStartDate;
}

OrgJodaTimeDateTime *PAActionScheduleGenerator_getLastEndTimeWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  id<JavaUtilList> groups = [((PAExperimentDAO *) nil_chk(experiment)) getGroups];
  OrgJodaTimeDateTime *currentLatestEndTime = nil;
  for (PAExperimentGroup * __strong experimentGroup in nil_chk(groups)) {
    if (![((JavaLangBoolean *) nil_chk([((PAExperimentGroup *) nil_chk(experimentGroup)) getFixedDuration])) booleanValue]) {
      continue;
    }
    OrgJodaTimeDateTime *endDate = PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate]);
    if (currentLatestEndTime == nil || [((OrgJodaTimeDateTime *) nil_chk(endDate)) isAfterWithOrgJodaTimeReadableInstant:currentLatestEndTime]) {
      currentLatestEndTime = endDate;
    }
  }
  return currentLatestEndTime;
}

OrgJodaTimeDateTime *PAActionScheduleGenerator_getEndDateTimeWithPAExperimentDAO_(PAExperimentDAO *experiment) {
  PAActionScheduleGenerator_initialize();
  OrgJodaTimeDateTime *lastTime = nil;
  for (PAExperimentGroup * __strong experimentGroup in nil_chk([((PAExperimentDAO *) nil_chk(experiment)) getGroups])) {
    id<JavaUtilList> triggers = [((PAExperimentGroup *) nil_chk(experimentGroup)) getActionTriggers];
    for (PAActionTrigger * __strong actionTrigger in nil_chk(triggers)) {
      OrgJodaTimeDateTime *lastTimeForSignalGroup = nil;
      if ([actionTrigger isKindOfClass:[PAScheduleTrigger class]]) {
        PAScheduleTrigger *scheduledTrigger = (PAScheduleTrigger *) cast_chk(actionTrigger, [PAScheduleTrigger class]);
        id<JavaUtilList> schedules = [((PAScheduleTrigger *) nil_chk(scheduledTrigger)) getSchedules];
        for (PASchedule * __strong schedule in nil_chk(schedules)) {
          if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_WEEKDAY)]) {
            id<JavaUtilList> times = [schedule getSignalTimes];
            PASignalTime *lastSignalTime = [times getWithInt:[((id<JavaUtilList>) nil_chk(times)) size] - 1];
            if ([((PASignalTime *) nil_chk(lastSignalTime)) getType] != nil && [((JavaLangInteger *) nil_chk([lastSignalTime getType])) isEqual:JreLoadStatic(PASignalTime, FIXED_TIME)]) {
              OrgJodaTimeDateTime *lastTimeForDay = [new_OrgJodaTimeDateTime_init() plusWithLong:[((JavaLangInteger *) nil_chk([lastSignalTime getFixedTimeMillisFromMidnight])) intValue]];
              lastTimeForSignalGroup = [((OrgJodaTimeDateTime *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) toDateTime])) withMillisOfDayWithInt:[((OrgJodaTimeDateTime *) nil_chk(lastTimeForDay)) getMillisOfDay]];
            }
            else {
              lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
            }
          }
          else {
            lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
          }
        }
      }
      else {
        lastTimeForSignalGroup = [((OrgJodaTimeDateMidnight *) nil_chk([new_OrgJodaTimeDateMidnight_initWithId_(PATimeUtil_unformatDateWithNSString_([experimentGroup getEndDate])) plusDaysWithInt:1])) toDateTime];
      }
      if (lastTime == nil || [((OrgJodaTimeDateTime *) nil_chk(lastTimeForSignalGroup)) isAfterWithOrgJodaTimeReadableInstant:lastTime]) {
        lastTime = lastTimeForSignalGroup;
      }
    }
  }
  return lastTime;
}

OrgJodaTimeDateTime *PAActionScheduleGenerator_lookupNextTimeOnEsmScheduleWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId) {
  jlong periodStartInMillis = [((OrgJodaTimeDateMidnight *) nil_chk([self getPeriodStartWithOrgJodaTimeDateTime:now withPASchedule:schedule])) getMillis];
  id<JavaUtilList> signals = [((id<PAEsmSignalStore>) nil_chk(alarmStore)) getSignalsWithJavaLangLong:experimentId withJavaLangLong:JavaLangLong_valueOfWithLong_(periodStartInMillis) withNSString:groupName withJavaLangLong:actionTriggerId withJavaLangLong:[((PASchedule *) nil_chk(schedule)) getId]];
  OrgJodaTimeDateTime *next = PAActionScheduleGenerator_getNextSignalAfterNowWithOrgJodaTimeDateTime_withJavaUtilList_(self, now, signals);
  if (next != nil) {
    return next;
  }
  OrgJodaTimeDateTime *nextPeriod = [((OrgJodaTimeDateTime *) nil_chk(now)) plusDaysWithInt:[schedule convertEsmPeriodToDays]];
  if ([schedule convertEsmPeriodToDays] == 1 && ![((JavaLangBoolean *) nil_chk([schedule getEsmWeekends])) booleanValue] && PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(nextPeriod)) {
    nextPeriod = PATimeUtil_skipWeekendsWithOrgJodaTimeDateTime_(nextPeriod);
  }
  PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, nextPeriod, alarmStore, schedule, experimentId, groupName, actionTriggerId);
  signals = [alarmStore getSignalsWithJavaLangLong:[((PAExperimentDAO *) nil_chk(self->experiment_)) getId] withJavaLangLong:JavaLangLong_valueOfWithLong_([((OrgJodaTimeDateMidnight *) nil_chk([self getPeriodStartWithOrgJodaTimeDateTime:nextPeriod withPASchedule:schedule])) getMillis]) withNSString:groupName withJavaLangLong:actionTriggerId withJavaLangLong:[schedule getId]];
  return PAActionScheduleGenerator_getNextSignalAfterNowWithOrgJodaTimeDateTime_withJavaUtilList_(self, now, signals);
}

OrgJodaTimeDateTime *PAActionScheduleGenerator_getNextSignalAfterNowWithOrgJodaTimeDateTime_withJavaUtilList_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<JavaUtilList> signals) {
  if ([((id<JavaUtilList>) nil_chk(signals)) size] == 0) {
    return nil;
  }
  JavaUtilCollections_sortWithJavaUtilList_(signals);
  for (OrgJodaTimeDateTime * __strong dateTime in signals) {
    if (![((OrgJodaTimeDateTime *) nil_chk(now)) isAfterWithOrgJodaTimeReadableInstant:dateTime]) {
      return dateTime;
    }
  }
  return nil;
}

void PAActionScheduleGenerator_ensureScheduleIsGeneratedForPeriodWithOrgJodaTimeDateTime_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateTime *now, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId) {
  OrgJodaTimeDateMidnight *periodStart = [self getPeriodStartWithOrgJodaTimeDateTime:now withPASchedule:schedule];
  id<JavaUtilList> signalTimes = [((id<PAEsmSignalStore>) nil_chk(alarmStore)) getSignalsWithJavaLangLong:experimentId withJavaLangLong:JavaLangLong_valueOfWithLong_([((OrgJodaTimeDateMidnight *) nil_chk(periodStart)) getMillis]) withNSString:groupName withJavaLangLong:actionTriggerId withJavaLangLong:[((PASchedule *) nil_chk(schedule)) getId]];
  if ([((id<JavaUtilList>) nil_chk(signalTimes)) size] == 0) {
    PAActionScheduleGenerator_generateNextPeriodWithOrgJodaTimeDateMidnight_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, periodStart, alarmStore, schedule, experimentId, groupName, actionTriggerId);
  }
}

void PAActionScheduleGenerator_generateNextPeriodWithOrgJodaTimeDateMidnight_withPAEsmSignalStore_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *generatingPeriodStart, id<PAEsmSignalStore> alarmStore, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId) {
  if (PAActionScheduleGenerator_isOverWithOrgJodaTimeDateTime_withPAExperimentDAO_([((OrgJodaTimeDateMidnight *) nil_chk(generatingPeriodStart)) toDateTime], self->experiment_)) {
    return;
  }
  [((id<PAEsmSignalStore>) nil_chk(alarmStore)) deleteSignalsForPeriodWithJavaLangLong:experimentId withJavaLangLong:JavaLangLong_valueOfWithLong_([generatingPeriodStart getMillis]) withNSString:groupName withJavaLangLong:actionTriggerId withJavaLangLong:[((PASchedule *) nil_chk(schedule)) getId]];
  id<JavaUtilList> signalTimes = PAActionScheduleGenerator_generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(self, generatingPeriodStart, schedule, experimentId, groupName, actionTriggerId);
  PAActionScheduleGenerator_storeSignalTimesWithOrgJodaTimeDateMidnight_withJavaUtilList_withPAEsmSignalStore_withJavaLangLong_withNSString_withJavaLangLong_withJavaLangLong_(self, generatingPeriodStart, signalTimes, alarmStore, experimentId, groupName, actionTriggerId, [schedule getId]);
}

id<JavaUtilList> PAActionScheduleGenerator_generateSignalTimesForPeriodWithOrgJodaTimeDateMidnight_withPASchedule_withJavaLangLong_withNSString_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *periodStart, PASchedule *schedule, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId) {
  return [new_PAEsmGenerator2_init() generateForScheduleWithOrgJodaTimeDateTime:[((OrgJodaTimeDateMidnight *) nil_chk(periodStart)) toDateTime] withPASchedule:schedule];
}

void PAActionScheduleGenerator_storeSignalTimesWithOrgJodaTimeDateMidnight_withJavaUtilList_withPAEsmSignalStore_withJavaLangLong_withNSString_withJavaLangLong_withJavaLangLong_(PAActionScheduleGenerator *self, OrgJodaTimeDateMidnight *periodStart, id<JavaUtilList> times, id<PAEsmSignalStore> alarmStore, JavaLangLong *experimentId, NSString *groupName, JavaLangLong *actionTriggerId, JavaLangLong *scheduleId) {
  jlong periodStartMillis = [((OrgJodaTimeDateMidnight *) nil_chk(periodStart)) getMillis];
  for (OrgJodaTimeDateTime * __strong alarmTime in nil_chk(times)) {
    [((id<PAEsmSignalStore>) nil_chk(alarmStore)) storeSignalWithJavaLangLong:JavaLangLong_valueOfWithLong_(periodStartMillis) withJavaLangLong:experimentId withJavaLangLong:JavaLangLong_valueOfWithLong_([((OrgJodaTimeDateTime *) nil_chk(alarmTime)) getMillis]) withNSString:groupName withJavaLangLong:actionTriggerId withJavaLangLong:scheduleId];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PAActionScheduleGenerator)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/util/SchedulePrinter.java
//

#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeFormatter.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Schedule.h"
#include "SchedulePrinter.h"
#include "SignalTime.h"
#include "TimeUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"

@interface PASchedulePrinter ()

+ (void)dailyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                        withPASchedule:(PASchedule *)schedule;

+ (void)monthlyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                          withPASchedule:(PASchedule *)schedule;

+ (void)weeklyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                         withPASchedule:(PASchedule *)schedule;

+ (void)esmScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                      withPASchedule:(PASchedule *)schedule;

+ (void)appendKeyValueWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                   withNSString:(NSString *)key
                                   withNSString:(NSString *)value;

+ (void)commaWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf;

+ (NSString *)stringNamesOfWithJavaLangInteger:(JavaLangInteger *)weekDaysScheduled;

@end

__attribute__((unused)) static void PASchedulePrinter_dailyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule);

__attribute__((unused)) static void PASchedulePrinter_monthlyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule);

__attribute__((unused)) static void PASchedulePrinter_weeklyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule);

__attribute__((unused)) static void PASchedulePrinter_esmScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule);

__attribute__((unused)) static void PASchedulePrinter_appendKeyValueWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *buf, NSString *key, NSString *value);

__attribute__((unused)) static void PASchedulePrinter_commaWithJavaLangStringBuilder_(JavaLangStringBuilder *buf);

__attribute__((unused)) static NSString *PASchedulePrinter_stringNamesOfWithJavaLangInteger_(JavaLangInteger *weekDaysScheduled);

J2OBJC_INITIALIZED_DEFN(PASchedulePrinter)

IOSObjectArray *PASchedulePrinter_DAYS_SHORT_NAMES;

@implementation PASchedulePrinter

+ (NSString *)toStringWithPASchedule:(PASchedule *)schedule {
  return PASchedulePrinter_toStringWithPASchedule_(schedule);
}

+ (void)dailyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                        withPASchedule:(PASchedule *)schedule {
  PASchedulePrinter_dailyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

+ (void)timesOfDayToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                     withPASchedule:(PASchedule *)schedule {
  PASchedulePrinter_timesOfDayToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

+ (void)monthlyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                          withPASchedule:(PASchedule *)schedule {
  PASchedulePrinter_monthlyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

+ (void)weeklyScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                         withPASchedule:(PASchedule *)schedule {
  PASchedulePrinter_weeklyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

+ (void)esmScheduleToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                      withPASchedule:(PASchedule *)schedule {
  PASchedulePrinter_esmScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

+ (NSString *)getHourOffsetAsTimeStringWithJavaLangLong:(JavaLangLong *)time {
  return PASchedulePrinter_getHourOffsetAsTimeStringWithJavaLangLong_(time);
}

+ (NSString *)getHourOffsetAsTimeStringWithPASignalTime:(PASignalTime *)time {
  return PASchedulePrinter_getHourOffsetAsTimeStringWithPASignalTime_(time);
}

+ (void)appendKeyValueWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                   withNSString:(NSString *)key
                                   withNSString:(NSString *)value {
  PASchedulePrinter_appendKeyValueWithJavaLangStringBuilder_withNSString_withNSString_(buf, key, value);
}

+ (void)commaWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf {
  PASchedulePrinter_commaWithJavaLangStringBuilder_(buf);
}

+ (NSString *)stringNamesOfWithJavaLangInteger:(JavaLangInteger *)weekDaysScheduled {
  return PASchedulePrinter_stringNamesOfWithJavaLangInteger_(weekDaysScheduled);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PASchedulePrinter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [PASchedulePrinter class]) {
    PASchedulePrinter_DAYS_SHORT_NAMES = [IOSObjectArray newArrayWithObjects:(id[]){ @"Sun", @"Mon", @"Tue", @"Wed", @"Thu", @"Fri", @"Sat" } count:7 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(PASchedulePrinter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toStringWithPASchedule:", "toString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "dailyScheduleToStringWithJavaLangStringBuilder:withPASchedule:", "dailyScheduleToString", "V", 0xa, NULL, NULL },
    { "timesOfDayToStringWithJavaLangStringBuilder:withPASchedule:", "timesOfDayToString", "V", 0x9, NULL, NULL },
    { "monthlyScheduleToStringWithJavaLangStringBuilder:withPASchedule:", "monthlyScheduleToString", "V", 0xa, NULL, NULL },
    { "weeklyScheduleToStringWithJavaLangStringBuilder:withPASchedule:", "weeklyScheduleToString", "V", 0xa, NULL, NULL },
    { "esmScheduleToStringWithJavaLangStringBuilder:withPASchedule:", "esmScheduleToString", "V", 0xa, NULL, NULL },
    { "getHourOffsetAsTimeStringWithJavaLangLong:", "getHourOffsetAsTimeString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getHourOffsetAsTimeStringWithPASignalTime:", "getHourOffsetAsTimeString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "appendKeyValueWithJavaLangStringBuilder:withNSString:withNSString:", "appendKeyValue", "V", 0xa, NULL, NULL },
    { "commaWithJavaLangStringBuilder:", "comma", "V", 0xa, NULL, NULL },
    { "stringNamesOfWithJavaLangInteger:", "stringNamesOf", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DAYS_SHORT_NAMES", "DAYS_SHORT_NAMES", 0x19, "[Ljava.lang.String;", &PASchedulePrinter_DAYS_SHORT_NAMES, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PASchedulePrinter = { 2, "SchedulePrinter", "com.pacoapp.paco.shared.util", NULL, 0x1, 12, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PASchedulePrinter;
}

@end

NSString *PASchedulePrinter_toStringWithPASchedule_(PASchedule *schedule) {
  PASchedulePrinter_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  if ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_WEEKDAY)] || [((JavaLangInteger *) nil_chk([schedule getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_DAILY)]) {
    PASchedulePrinter_dailyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
  }
  else if ([((JavaLangInteger *) nil_chk([schedule getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_WEEKLY)]) {
    PASchedulePrinter_weeklyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
  }
  else if ([((JavaLangInteger *) nil_chk([schedule getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_MONTHLY)]) {
    PASchedulePrinter_monthlyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
  }
  else if ([((JavaLangInteger *) nil_chk([schedule getScheduleType])) isEqual:JavaLangInteger_valueOfWithInt_(PASchedule_ESM)]) {
    PASchedulePrinter_esmScheduleToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
  }
  return [buf description];
}

void PASchedulePrinter_dailyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule) {
  PASchedulePrinter_initialize();
  JavaLangInteger *repeatRate = [((PASchedule *) nil_chk(schedule)) getRepeatRate];
  if ([((JavaLangInteger *) nil_chk(repeatRate)) intValue] > 1) {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Every "];
    (void) [buf appendWithId:repeatRate];
    (void) [buf appendWithNSString:@" days at "];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Daily at "];
  }
  PASchedulePrinter_timesOfDayToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

void PASchedulePrinter_timesOfDayToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule) {
  PASchedulePrinter_initialize();
  jboolean firstTime = true;
  if ([((PASchedule *) nil_chk(schedule)) getSignalTimes] != nil) {
    for (PASignalTime * __strong time in nil_chk([schedule getSignalTimes])) {
      if (firstTime) {
        firstTime = false;
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@","];
      }
      NSString *label = [((PASignalTime *) nil_chk(time)) getLabel];
      if (label != nil && ![label isEmpty] && ![label isEqual:@"null"]) {
        (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:label];
        (void) [buf appendWithNSString:@": "];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:PASchedulePrinter_getHourOffsetAsTimeStringWithPASignalTime_(time)];
    }
  }
}

void PASchedulePrinter_monthlyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule) {
  PASchedulePrinter_initialize();
  JavaLangInteger *repeatRate = [((PASchedule *) nil_chk(schedule)) getRepeatRate];
  if ([((JavaLangInteger *) nil_chk(repeatRate)) intValue] > 1) {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Every "];
    (void) [buf appendWithId:repeatRate];
    (void) [buf appendWithNSString:@" months on "];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Monthly on "];
  }
  if ([((JavaLangBoolean *) nil_chk([schedule getByDayOfMonth])) booleanValue]) {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithId:[schedule getNthOfMonth]];
    (void) [buf appendWithNSString:PASchedulePrinter_stringNamesOfWithJavaLangInteger_([schedule getWeekDaysScheduled])];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithId:[schedule getDayOfMonth]];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@" at "];
  PASchedulePrinter_timesOfDayToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

void PASchedulePrinter_weeklyScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule) {
  PASchedulePrinter_initialize();
  JavaLangInteger *repeatRate = [((PASchedule *) nil_chk(schedule)) getRepeatRate];
  if ([((JavaLangInteger *) nil_chk(repeatRate)) intValue] > 1) {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Every "];
    (void) [buf appendWithId:repeatRate];
    (void) [buf appendWithNSString:@" weeks at "];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Weekly at "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:PASchedulePrinter_stringNamesOfWithJavaLangInteger_([schedule getWeekDaysScheduled])];
  (void) [buf appendWithNSString:@" at "];
  PASchedulePrinter_timesOfDayToStringWithJavaLangStringBuilder_withPASchedule_(buf, schedule);
}

void PASchedulePrinter_esmScheduleToStringWithJavaLangStringBuilder_withPASchedule_(JavaLangStringBuilder *buf, PASchedule *schedule) {
  PASchedulePrinter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"Randomly "];
  (void) [buf appendWithNSString:[((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(schedule)) getEsmFrequency])) description]];
  (void) [buf appendWithNSString:@" times per "];
  (void) [buf appendWithNSString:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(JreLoadStatic(PASchedule, ESM_PERIODS_NAMES)), [((JavaLangInteger *) nil_chk([schedule getEsmPeriodInDays])) intValue]))) lowercaseString]];
  (void) [buf appendWithNSString:@" between "];
  (void) [buf appendWithNSString:PASchedulePrinter_getHourOffsetAsTimeStringWithJavaLangLong_([schedule getEsmStartHour])];
  (void) [buf appendWithNSString:@" and "];
  (void) [buf appendWithNSString:PASchedulePrinter_getHourOffsetAsTimeStringWithJavaLangLong_([schedule getEsmEndHour])];
  if ([((JavaLangBoolean *) nil_chk([schedule getEsmWeekends])) booleanValue]) {
    (void) [buf appendWithNSString:@" incl weekends "];
  }
}

NSString *PASchedulePrinter_getHourOffsetAsTimeStringWithJavaLangLong_(JavaLangLong *time) {
  PASchedulePrinter_initialize();
  OrgJodaTimeDateTime *endHour = [((OrgJodaTimeDateTime *) nil_chk([new_OrgJodaTimeDateMidnight_init() toDateTime])) plusWithLong:[((JavaLangLong *) nil_chk(time)) longLongValue]];
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(JreLoadStatic(PATimeUtil, hourFormatter))) printWithOrgJodaTimeReadableInstant:endHour];
}

NSString *PASchedulePrinter_getHourOffsetAsTimeStringWithPASignalTime_(PASignalTime *time) {
  PASchedulePrinter_initialize();
  return PASchedulePrinter_getHourOffsetAsTimeStringWithJavaLangLong_(JavaLangLong_valueOfWithLong_([((JavaLangInteger *) nil_chk([((PASignalTime *) nil_chk(time)) getFixedTimeMillisFromMidnight])) longLongValue]));
}

void PASchedulePrinter_appendKeyValueWithJavaLangStringBuilder_withNSString_withNSString_(JavaLangStringBuilder *buf, NSString *key, NSString *value) {
  PASchedulePrinter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:key];
  (void) [buf appendWithNSString:@" = "];
  (void) [buf appendWithNSString:value];
}

void PASchedulePrinter_commaWithJavaLangStringBuilder_(JavaLangStringBuilder *buf) {
  PASchedulePrinter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@","];
}

NSString *PASchedulePrinter_stringNamesOfWithJavaLangInteger_(JavaLangInteger *weekDaysScheduled) {
  PASchedulePrinter_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  jboolean first = true;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(JreLoadStatic(PASchedule, DAYS_OF_WEEK)))->size_; i++) {
    if (([((JavaLangInteger *) nil_chk(weekDaysScheduled)) intValue] & IOSIntArray_Get(JreLoadStatic(PASchedule, DAYS_OF_WEEK), i)) == IOSIntArray_Get(JreLoadStatic(PASchedule, DAYS_OF_WEEK), i)) {
      if (first) {
        first = false;
      }
      else {
        PASchedulePrinter_commaWithJavaLangStringBuilder_(buf);
      }
      (void) [buf appendWithNSString:IOSObjectArray_Get(nil_chk(PASchedulePrinter_DAYS_SHORT_NAMES), i)];
    }
  }
  return [buf description];
}

void PASchedulePrinter_init(PASchedulePrinter *self) {
  NSObject_init(self);
}

PASchedulePrinter *new_PASchedulePrinter_init() {
  PASchedulePrinter *self = [PASchedulePrinter alloc];
  PASchedulePrinter_init(self);
  return self;
}

PASchedulePrinter *create_PASchedulePrinter_init() {
  return new_PASchedulePrinter_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PASchedulePrinter)

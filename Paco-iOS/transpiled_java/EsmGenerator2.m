//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/scheduling/EsmGenerator2.java
//

#include "DateTime.h"
#include "EsmGenerator2.h"
#include "IOSObjectArray.h"
#include "Interval.h"
#include "J2ObjC_source.h"
#include "Minutes.h"
#include "Schedule.h"
#include "TimeUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Random.h"

@interface PAEsmGenerator2 () {
 @public
  PASchedule *schedule_;
  OrgJodaTimeDateTime *periodStartDate_;
  JavaUtilArrayList *times_;
}

- (OrgJodaTimeDateTime *)adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)startDate;

- (id<JavaUtilList>)getPeriodDaysForWeek;

- (id<JavaUtilList>)getPeriodDaysForMonthOfWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)startDate;

- (jboolean)isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)plusMinutes
                                                    withOrgJodaTimeMinutes:(OrgJodaTimeMinutes *)timeoutInMinutes;

@end

J2OBJC_FIELD_SETTER(PAEsmGenerator2, schedule_, PASchedule *)
J2OBJC_FIELD_SETTER(PAEsmGenerator2, periodStartDate_, OrgJodaTimeDateTime *)
J2OBJC_FIELD_SETTER(PAEsmGenerator2, times_, JavaUtilArrayList *)

__attribute__((unused)) static OrgJodaTimeDateTime *PAEsmGenerator2_adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *startDate);

__attribute__((unused)) static id<JavaUtilList> PAEsmGenerator2_getPeriodDaysForWeek(PAEsmGenerator2 *self);

__attribute__((unused)) static id<JavaUtilList> PAEsmGenerator2_getPeriodDaysForMonthOfWithOrgJodaTimeDateTime_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *startDate);

__attribute__((unused)) static jboolean PAEsmGenerator2_isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime_withOrgJodaTimeMinutes_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *plusMinutes, OrgJodaTimeMinutes *timeoutInMinutes);

J2OBJC_INITIALIZED_DEFN(PAEsmGenerator2)

OrgJodaTimeMinutes *PAEsmGenerator2_BUFFER_MILLIS;

@implementation PAEsmGenerator2

- (id<JavaUtilList>)generateForScheduleWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)startDate
                                                withPASchedule:(PASchedule *)schedule2 {
  self->schedule_ = schedule2;
  self->periodStartDate_ = PAEsmGenerator2_adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime_(self, startDate);
  times_ = new_JavaUtilArrayList_init();
  if ([((PASchedule *) nil_chk(schedule2)) getEsmFrequency] == nil || [((JavaLangInteger *) nil_chk([schedule2 getEsmFrequency])) intValue] == 0) {
    return times_;
  }
  id<JavaUtilList> schedulableDays;
  switch ([((JavaLangInteger *) nil_chk([schedule2 getEsmPeriodInDays])) intValue]) {
    case PASchedule_ESM_PERIOD_DAY:
    if (![((JavaLangBoolean *) nil_chk([schedule2 getEsmWeekends])) booleanValue] && PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(periodStartDate_)) {
      return times_;
    }
    else {
      schedulableDays = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]);
    }
    break;
    case PASchedule_ESM_PERIOD_WEEK:
    schedulableDays = PAEsmGenerator2_getPeriodDaysForWeek(self);
    break;
    case PASchedule_ESM_PERIOD_MONTH:
    schedulableDays = PAEsmGenerator2_getPeriodDaysForMonthOfWithOrgJodaTimeDateTime_(self, periodStartDate_);
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot get here.");
  }
  OrgJodaTimeMinutes *dayLengthIntervalInMinutes = OrgJodaTimeMinutes_minutesInWithOrgJodaTimeReadableInterval_(new_OrgJodaTimeInterval_initWithLong_withLong_([((JavaLangLong *) nil_chk([schedule2 getEsmStartHour])) longLongValue], [((JavaLangLong *) nil_chk([schedule2 getEsmEndHour])) longLongValue]));
  OrgJodaTimeMinutes *totalMinutesInPeriod = [((OrgJodaTimeMinutes *) nil_chk(dayLengthIntervalInMinutes)) multipliedByWithInt:[((id<JavaUtilList>) nil_chk(schedulableDays)) size]];
  OrgJodaTimeMinutes *sampleBlockTimeInMinutes = [((OrgJodaTimeMinutes *) nil_chk(totalMinutesInPeriod)) dividedByWithInt:[((JavaLangInteger *) nil_chk([schedule2 getEsmFrequency])) intValue]];
  OrgJodaTimeMinutes *timeoutInMinutes = OrgJodaTimeMinutes_minutesWithInt_([((JavaLangInteger *) nil_chk([schedule2 getMinimumBuffer])) intValue]);
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  for (jint signal = 0; signal < [((JavaLangInteger *) nil_chk([schedule2 getEsmFrequency])) intValue]; signal++) {
    jint candidateTimeInBlock;
    OrgJodaTimeDateTime *candidateTime;
    jint periodAttempts = 1000;
    do {
      candidateTimeInBlock = [rand nextIntWithInt:[((OrgJodaTimeMinutes *) nil_chk(sampleBlockTimeInMinutes)) getMinutes]];
      jint totalMinutesToAdd = [sampleBlockTimeInMinutes getMinutes] * signal + candidateTimeInBlock;
      jint daysToAdd = totalMinutesToAdd / [dayLengthIntervalInMinutes getMinutes];
      jint minutesToAdd = 0;
      if (totalMinutesToAdd <= [dayLengthIntervalInMinutes getMinutes]) {
        minutesToAdd = totalMinutesToAdd;
      }
      else {
        minutesToAdd = totalMinutesToAdd % [dayLengthIntervalInMinutes getMinutes];
      }
      OrgJodaTimeDateTime *plusDays = [((OrgJodaTimeDateTime *) nil_chk(periodStartDate_)) plusDaysWithInt:[((JavaLangInteger *) nil_chk([schedulableDays getWithInt:daysToAdd])) intValue] - 1];
      candidateTime = [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(plusDays)) withMillisOfDayWithInt:[((JavaLangLong *) nil_chk([schedule2 getEsmStartHour])) intValue]])) plusMinutesWithInt:minutesToAdd];
      periodAttempts--;
    }
    while (periodAttempts > 0 && (!PAEsmGenerator2_isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime_withOrgJodaTimeMinutes_(self, candidateTime, timeoutInMinutes) || (![((JavaLangBoolean *) nil_chk([schedule2 getEsmWeekends])) booleanValue] && PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(candidateTime))));
    if (PAEsmGenerator2_isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime_withOrgJodaTimeMinutes_(self, candidateTime, timeoutInMinutes) && ([((JavaLangBoolean *) nil_chk([schedule2 getEsmWeekends])) booleanValue] || !PATimeUtil_isWeekendWithOrgJodaTimeDateTime_(candidateTime))) {
      [times_ addWithId:candidateTime];
    }
  }
  return times_;
}

- (OrgJodaTimeDateTime *)adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)startDate {
  return PAEsmGenerator2_adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime_(self, startDate);
}

- (id<JavaUtilList>)getPeriodDaysForWeek {
  return PAEsmGenerator2_getPeriodDaysForWeek(self);
}

- (id<JavaUtilList>)getPeriodDaysForMonthOfWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)startDate {
  return PAEsmGenerator2_getPeriodDaysForMonthOfWithOrgJodaTimeDateTime_(self, startDate);
}

- (jboolean)isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)plusMinutes
                                                    withOrgJodaTimeMinutes:(OrgJodaTimeMinutes *)timeoutInMinutes {
  return PAEsmGenerator2_isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime_withOrgJodaTimeMinutes_(self, plusMinutes, timeoutInMinutes);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PAEsmGenerator2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [PAEsmGenerator2 class]) {
    PAEsmGenerator2_BUFFER_MILLIS = OrgJodaTimeMinutes_minutesWithInt_(59);
    J2OBJC_SET_INITIALIZED(PAEsmGenerator2)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "generateForScheduleWithOrgJodaTimeDateTime:withPASchedule:", "generateForSchedule", "Ljava.util.List;", 0x1, NULL, "(Lorg/joda/time/DateTime;Lcom/pacoapp/paco/shared/model2/Schedule;)Ljava/util/List<Lorg/joda/time/DateTime;>;" },
    { "adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime:", "adjustStartDateToBeginningOfPeriod", "Lorg.joda.time.DateTime;", 0x2, NULL, NULL },
    { "getPeriodDaysForWeek", NULL, "Ljava.util.List;", 0x2, NULL, "()Ljava/util/List<Ljava/lang/Integer;>;" },
    { "getPeriodDaysForMonthOfWithOrgJodaTimeDateTime:", "getPeriodDaysForMonthOf", "Ljava.util.List;", 0x2, NULL, "(Lorg/joda/time/DateTime;)Ljava/util/List<Ljava/lang/Integer;>;" },
    { "isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime:withOrgJodaTimeMinutes:", "isMinimalBufferedDistanceFromOtherTimes", "Z", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_MILLIS", "BUFFER_MILLIS", 0x19, "Lorg.joda.time.Minutes;", &PAEsmGenerator2_BUFFER_MILLIS, NULL, .constantValue.asLong = 0 },
    { "schedule_", NULL, 0x2, "Lcom.pacoapp.paco.shared.model2.Schedule;", NULL, NULL, .constantValue.asLong = 0 },
    { "periodStartDate_", NULL, 0x2, "Lorg.joda.time.DateTime;", NULL, NULL, .constantValue.asLong = 0 },
    { "times_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/joda/time/DateTime;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PAEsmGenerator2 = { 2, "EsmGenerator2", "com.pacoapp.paco.shared.scheduling", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PAEsmGenerator2;
}

@end

OrgJodaTimeDateTime *PAEsmGenerator2_adjustStartDateToBeginningOfPeriodWithOrgJodaTimeDateTime_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *startDate) {
  switch ([((JavaLangInteger *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getEsmPeriodInDays])) intValue]) {
    case PASchedule_ESM_PERIOD_DAY:
    return startDate;
    case PASchedule_ESM_PERIOD_WEEK:
    return [((OrgJodaTimeDateTime_Property *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(startDate)) dayOfWeek])) withMinimumValue];
    case PASchedule_ESM_PERIOD_MONTH:
    return [((OrgJodaTimeDateTime_Property *) nil_chk([((OrgJodaTimeDateTime *) nil_chk(startDate)) dayOfMonth])) withMinimumValue];
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot get here.");
  }
}

id<JavaUtilList> PAEsmGenerator2_getPeriodDaysForWeek(PAEsmGenerator2 *self) {
  id<JavaUtilList> periods;
  if ([((JavaLangBoolean *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getEsmWeekends])) booleanValue]) {
    periods = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7) } count:7 type:JavaLangInteger_class_()]);
  }
  else {
    periods = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]);
  }
  return periods;
}

id<JavaUtilList> PAEsmGenerator2_getPeriodDaysForMonthOfWithOrgJodaTimeDateTime_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *startDate) {
  jint dow = [((OrgJodaTimeDateTime *) nil_chk(startDate)) getDayOfWeek];
  jint day = 1;
  jint lastDayOfMonth = [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeDateTime_Property *) nil_chk([startDate dayOfMonth])) withMaximumValue])) getDayOfMonth];
  id<JavaUtilList> validPeriods = new_JavaUtilArrayList_init();
  while (day < lastDayOfMonth + 1) {
    if ([((JavaLangBoolean *) nil_chk([((PASchedule *) nil_chk(self->schedule_)) getEsmWeekends])) booleanValue] || !PATimeUtil_isWeekendWithInt_(dow)) {
      [validPeriods addWithId:JavaLangInteger_valueOfWithInt_(day)];
    }
    dow++;
    if (dow == 8) {
      dow = 1;
    }
    day++;
  }
  return validPeriods;
}

jboolean PAEsmGenerator2_isMinimalBufferedDistanceFromOtherTimesWithOrgJodaTimeDateTime_withOrgJodaTimeMinutes_(PAEsmGenerator2 *self, OrgJodaTimeDateTime *plusMinutes, OrgJodaTimeMinutes *timeoutInMinutes) {
  for (OrgJodaTimeDateTime * __strong time in nil_chk(self->times_)) {
    OrgJodaTimeMinutes *minutesBetween;
    if ([((OrgJodaTimeDateTime *) nil_chk(time)) isAfterWithOrgJodaTimeReadableInstant:plusMinutes]) {
      minutesBetween = OrgJodaTimeMinutes_minutesBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(plusMinutes, time);
    }
    else {
      minutesBetween = OrgJodaTimeMinutes_minutesBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(time, plusMinutes);
    }
    if ([((OrgJodaTimeMinutes *) nil_chk(minutesBetween)) isLessThanWithOrgJodaTimeMinutes:timeoutInMinutes]) {
      return false;
    }
  }
  return true;
}

void PAEsmGenerator2_init(PAEsmGenerator2 *self) {
  NSObject_init(self);
}

PAEsmGenerator2 *new_PAEsmGenerator2_init() {
  PAEsmGenerator2 *self = [PAEsmGenerator2 alloc];
  PAEsmGenerator2_init(self);
  return self;
}

PAEsmGenerator2 *create_PAEsmGenerator2_init() {
  return new_PAEsmGenerator2_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PAEsmGenerator2)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/northropo/Projects/paco/Shared/src/com/pacoapp/paco/shared/model2/ExperimentValidator.java
//

#include "ExperimentValidator.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ValidationMessage.h"
#include "Validator.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface PAExperimentValidator () {
 @public
  id<JavaUtilList> results_;
}

- (jboolean)isValid2DigitMonthWithNSString:(NSString *)monthString
                              withNSString:(NSString *)errorMessage;

- (jboolean)isValid2DigitDayWithNSString:(NSString *)dayString
                            withNSString:(NSString *)errorMessage;

@end

J2OBJC_FIELD_SETTER(PAExperimentValidator, results_, id<JavaUtilList>)

__attribute__((unused)) static jboolean PAExperimentValidator_isValid2DigitMonthWithNSString_withNSString_(PAExperimentValidator *self, NSString *monthString, NSString *errorMessage);

__attribute__((unused)) static jboolean PAExperimentValidator_isValid2DigitDayWithNSString_withNSString_(PAExperimentValidator *self, NSString *dayString, NSString *errorMessage);

@implementation PAExperimentValidator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  PAExperimentValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addErrorWithNSString:(NSString *)msg {
  [((id<JavaUtilList>) nil_chk(results_)) addWithId:new_PAValidationMessage_initWithNSString_withInt_(msg, PAValidator_MANDATORY)];
}

- (jboolean)isNotNullAndNonEmptyStringWithNSString:(NSString *)value
                                      withNSString:(NSString *)msg {
  jboolean b = [self isNonNullNonEmptyStringWithNSString:value];
  if (b) {
    [self addErrorWithNSString:msg];
  }
  return b;
}

- (jboolean)isNonNullNonEmptyStringWithNSString:(NSString *)value {
  return value == nil || ((jint) [value length]) == 0;
}

- (jboolean)isNotNullAndNonEmptyCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                                    withNSString:(NSString *)message {
  jboolean empty = collection == nil || [collection isEmpty];
  if (empty) {
    [self addErrorWithNSString:message];
  }
  return empty;
}

- (jboolean)isValidEmailWithNSString:(NSString *)address
                        withNSString:(NSString *)errorMessage {
  if (![self isNotNullAndNonEmptyStringWithNSString:address withNSString:errorMessage]) {
    return false;
  }
  jint atIndex = [((NSString *) nil_chk(address)) indexOf:'@'];
  if (atIndex == -1) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  NSString *namePart = [address substring:0 endIndex:atIndex];
  NSString *domainPart = [address substring:atIndex + 1];
  if (![self isNotNullAndNonEmptyStringWithNSString:namePart withNSString:errorMessage]) {
    return false;
  }
  if (![self isNotNullAndNonEmptyStringWithNSString:domainPart withNSString:errorMessage]) {
    return false;
  }
  if ([((NSString *) nil_chk(domainPart)) indexOf:'.'] == -1) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isValidCollectionOfEmailAddressesWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                                       withNSString:(NSString *)errorMessage {
  if (![self isNotNullAndNonEmptyCollectionWithJavaUtilCollection:collection withNSString:errorMessage]) {
    return false;
  }
  for (NSString * __strong email in nil_chk(collection)) {
    if (![self isValidEmailWithNSString:email withNSString:errorMessage]) {
      return false;
    }
  }
  return true;
}

- (jboolean)isNotNullCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                         withNSString:(NSString *)errorMessage {
  if (collection == nil) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isValidDateStringWithNSString:(NSString *)dateStr
                             withNSString:(NSString *)errorMessage {
  if (![self isNotNullAndNonEmptyStringWithNSString:dateStr withNSString:errorMessage]) {
    return false;
  }
  IOSObjectArray *ymd = [((NSString *) nil_chk(dateStr)) split:@"/"];
  if (![self isArrayWithNElementsWithInt:3 withNSStringArray:ymd withNSString:errorMessage]) {
    return false;
  }
  if (![self isValid4DigitYearWithNSString:IOSObjectArray_Get(nil_chk(ymd), 0) withNSString:errorMessage]) {
    return false;
  }
  if (!PAExperimentValidator_isValid2DigitMonthWithNSString_withNSString_(self, IOSObjectArray_Get(ymd, 1), errorMessage)) {
    return false;
  }
  if (!PAExperimentValidator_isValid2DigitDayWithNSString_withNSString_(self, IOSObjectArray_Get(ymd, 2), errorMessage)) {
    return false;
  }
  return true;
}

- (jboolean)isValid2DigitMonthWithNSString:(NSString *)monthString
                              withNSString:(NSString *)errorMessage {
  return PAExperimentValidator_isValid2DigitMonthWithNSString_withNSString_(self, monthString, errorMessage);
}

- (jboolean)isValid2DigitDayWithNSString:(NSString *)dayString
                            withNSString:(NSString *)errorMessage {
  return PAExperimentValidator_isValid2DigitDayWithNSString_withNSString_(self, dayString, errorMessage);
}

- (jboolean)isValid4DigitYearWithNSString:(NSString *)yearString
                             withNSString:(NSString *)errorMessage {
  if (((jint) [((NSString *) nil_chk(yearString)) length]) != 4) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  jint year;
  @try {
    year = JavaLangInteger_parseIntWithNSString_(yearString);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isArrayWithNElementsWithInt:(jint)expectedLength
                      withNSStringArray:(IOSObjectArray *)arr
                           withNSString:(NSString *)errorMessage {
  if (![self isNonNullArrayWithNSStringArray:arr withNSString:errorMessage]) {
    return false;
  }
  if (((IOSObjectArray *) nil_chk(arr))->size_ != expectedLength) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isNonNullArrayWithNSStringArray:(IOSObjectArray *)array
                               withNSString:(NSString *)errorMessage {
  if (array == nil) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isNotNullWithId:(id)obj
               withNSString:(NSString *)errorMessage {
  if (obj == nil) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isValidJavascriptWithNSString:(NSString *)code
                             withNSString:(NSString *)errorMessage {
  if (![self isNotNullAndNonEmptyStringWithNSString:code withNSString:errorMessage]) {
    return false;
  }
  return true;
}

- (jboolean)isValidHtmlOrJavascriptWithNSString:(NSString *)text
                                   withNSString:(NSString *)errorMessage {
  return [self isValidJavascriptWithNSString:text withNSString:errorMessage];
}

- (jboolean)isTrueWithBoolean:(jboolean)b
                 withNSString:(NSString *)errorMessage {
  if (!b) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isNotNullAndNonEmptyArrayWithNSStringArray:(IOSObjectArray *)arr
                                          withNSString:(NSString *)errorMessage {
  if (arr == nil || arr->size_ == 0) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

- (jboolean)isValidConditionalExpressionWithNSString:(NSString *)conditionExpression
                                        withNSString:(NSString *)errorMessage {
  if (![self isNonNullNonEmptyStringWithNSString:errorMessage]) {
    return false;
  }
  return true;
}

- (id<JavaUtilList>)getResults {
  return results_;
}

- (NSString *)stringifyResults {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  for (PAValidationMessage * __strong msg in nil_chk(results_)) {
    (void) [buf appendWithNSString:[((PAValidationMessage *) nil_chk(msg)) description]];
    (void) [buf appendWithNSString:@"\n"];
  }
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ExperimentValidator", NULL, 0x1, NULL, NULL },
    { "addErrorWithNSString:", "addError", "V", 0x1, NULL, NULL },
    { "isNotNullAndNonEmptyStringWithNSString:withNSString:", "isNotNullAndNonEmptyString", "Z", 0x1, NULL, NULL },
    { "isNonNullNonEmptyStringWithNSString:", "isNonNullNonEmptyString", "Z", 0x1, NULL, NULL },
    { "isNotNullAndNonEmptyCollectionWithJavaUtilCollection:withNSString:", "isNotNullAndNonEmptyCollection", "Z", 0x1, NULL, NULL },
    { "isValidEmailWithNSString:withNSString:", "isValidEmail", "Z", 0x1, NULL, NULL },
    { "isValidCollectionOfEmailAddressesWithJavaUtilCollection:withNSString:", "isValidCollectionOfEmailAddresses", "Z", 0x1, NULL, "(Ljava/util/Collection<Ljava/lang/String;>;Ljava/lang/String;)Z" },
    { "isNotNullCollectionWithJavaUtilCollection:withNSString:", "isNotNullCollection", "Z", 0x1, NULL, NULL },
    { "isValidDateStringWithNSString:withNSString:", "isValidDateString", "Z", 0x1, NULL, NULL },
    { "isValid2DigitMonthWithNSString:withNSString:", "isValid2DigitMonth", "Z", 0x2, NULL, NULL },
    { "isValid2DigitDayWithNSString:withNSString:", "isValid2DigitDay", "Z", 0x2, NULL, NULL },
    { "isValid4DigitYearWithNSString:withNSString:", "isValid4DigitYear", "Z", 0x1, NULL, NULL },
    { "isArrayWithNElementsWithInt:withNSStringArray:withNSString:", "isArrayWithNElements", "Z", 0x1, NULL, NULL },
    { "isNonNullArrayWithNSStringArray:withNSString:", "isNonNullArray", "Z", 0x1, NULL, NULL },
    { "isNotNullWithId:withNSString:", "isNotNull", "Z", 0x1, NULL, NULL },
    { "isValidJavascriptWithNSString:withNSString:", "isValidJavascript", "Z", 0x1, NULL, NULL },
    { "isValidHtmlOrJavascriptWithNSString:withNSString:", "isValidHtmlOrJavascript", "Z", 0x1, NULL, NULL },
    { "isTrueWithBoolean:withNSString:", "isTrue", "Z", 0x1, NULL, NULL },
    { "isNotNullAndNonEmptyArrayWithNSStringArray:withNSString:", "isNotNullAndNonEmptyArray", "Z", 0x1, NULL, NULL },
    { "isValidConditionalExpressionWithNSString:withNSString:", "isValidConditionalExpression", "Z", 0x1, NULL, NULL },
    { "getResults", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ValidationMessage;>;" },
    { "stringifyResults", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "results_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lcom/pacoapp/paco/shared/model2/ValidationMessage;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _PAExperimentValidator = { 2, "ExperimentValidator", "com.pacoapp.paco.shared.model2", NULL, 0x1, 22, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_PAExperimentValidator;
}

@end

void PAExperimentValidator_init(PAExperimentValidator *self) {
  NSObject_init(self);
  self->results_ = new_JavaUtilArrayList_init();
}

PAExperimentValidator *new_PAExperimentValidator_init() {
  PAExperimentValidator *self = [PAExperimentValidator alloc];
  PAExperimentValidator_init(self);
  return self;
}

PAExperimentValidator *create_PAExperimentValidator_init() {
  return new_PAExperimentValidator_init();
}

jboolean PAExperimentValidator_isValid2DigitMonthWithNSString_withNSString_(PAExperimentValidator *self, NSString *monthString, NSString *errorMessage) {
  if (((jint) [((NSString *) nil_chk(monthString)) length]) != 2) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  jint month;
  @try {
    month = JavaLangInteger_parseIntWithNSString_(monthString);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  if (month < 0 || month > 12) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

jboolean PAExperimentValidator_isValid2DigitDayWithNSString_withNSString_(PAExperimentValidator *self, NSString *dayString, NSString *errorMessage) {
  if (((jint) [((NSString *) nil_chk(dayString)) length]) != 2) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  jint day;
  @try {
    day = JavaLangInteger_parseIntWithNSString_(dayString);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  if (day < 0 || day > 31) {
    [self addErrorWithNSString:errorMessage];
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PAExperimentValidator)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/Years.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/LocalDate.h"
#include "org/joda/time/Period.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadableInterval.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/Years.h"
#include "org/joda/time/base/BaseSingleFieldPeriod.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/ISOPeriodFormat.h"
#include "org/joda/time/format/PeriodFormatter.h"

@interface OrgJodaTimeYears ()

- (instancetype)initWithInt:(jint)years;

- (id)readResolve;

@end

inline OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeYears_get_PARSER();
static OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeYears_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeYears, PARSER, OrgJodaTimeFormatPeriodFormatter *)

inline jlong OrgJodaTimeYears_get_serialVersionUID();
#define OrgJodaTimeYears_serialVersionUID 87525275727380868LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeYears, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeYears_initWithInt_(OrgJodaTimeYears *self, jint years);

__attribute__((unused)) static OrgJodaTimeYears *new_OrgJodaTimeYears_initWithInt_(jint years) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeYears *create_OrgJodaTimeYears_initWithInt_(jint years);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeYears)

OrgJodaTimeYears *OrgJodaTimeYears_ZERO;
OrgJodaTimeYears *OrgJodaTimeYears_ONE;
OrgJodaTimeYears *OrgJodaTimeYears_TWO;
OrgJodaTimeYears *OrgJodaTimeYears_THREE;
OrgJodaTimeYears *OrgJodaTimeYears_MAX_VALUE;
OrgJodaTimeYears *OrgJodaTimeYears_MIN_VALUE;

@implementation OrgJodaTimeYears

+ (OrgJodaTimeYears *)yearsWithInt:(jint)years {
  return OrgJodaTimeYears_yearsWithInt_(years);
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                  withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

+ (OrgJodaTimeYears *)yearsBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                  withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end {
  return OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(start, end);
}

+ (OrgJodaTimeYears *)yearsInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeYears_yearsInWithOrgJodaTimeReadableInterval_(interval);
}

+ (OrgJodaTimeYears *)parseYearsWithNSString:(NSString *)periodStr {
  return OrgJodaTimeYears_parseYearsWithNSString_(periodStr);
}

- (instancetype)initWithInt:(jint)years {
  OrgJodaTimeYears_initWithInt_(self, years);
  return self;
}

- (id)readResolve {
  return OrgJodaTimeYears_yearsWithInt_([self getValue]);
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  return OrgJodaTimeDurationFieldType_years();
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return OrgJodaTimePeriodType_years();
}

- (jint)getYears {
  return [self getValue];
}

- (OrgJodaTimeYears *)plusWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_([self getValue], years));
}

- (OrgJodaTimeYears *)plusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self plusWithInt:[((OrgJodaTimeYears *) nil_chk(years)) getValue]];
}

- (OrgJodaTimeYears *)minusWithInt:(jint)years {
  return [self plusWithInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(years)];
}

- (OrgJodaTimeYears *)minusWithOrgJodaTimeYears:(OrgJodaTimeYears *)years {
  if (years == nil) {
    return self;
  }
  return [self minusWithInt:[((OrgJodaTimeYears *) nil_chk(years)) getValue]];
}

- (OrgJodaTimeYears *)multipliedByWithInt:(jint)scalar {
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], scalar));
}

- (OrgJodaTimeYears *)dividedByWithInt:(jint)divisor {
  if (divisor == 1) {
    return self;
  }
  return OrgJodaTimeYears_yearsWithInt_([self getValue] / divisor);
}

- (OrgJodaTimeYears *)negated {
  return OrgJodaTimeYears_yearsWithInt_(OrgJodaTimeFieldFieldUtils_safeNegateWithInt_([self getValue]));
}

- (jboolean)isGreaterThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] > 0;
  }
  return [self getValue] > [((OrgJodaTimeYears *) nil_chk(other)) getValue];
}

- (jboolean)isLessThanWithOrgJodaTimeYears:(OrgJodaTimeYears *)other {
  if (other == nil) {
    return [self getValue] < 0;
  }
  return [self getValue] < [((OrgJodaTimeYears *) nil_chk(other)) getValue];
}

- (NSString *)description {
  return JreStrcat("C$C", 'P', NSString_valueOfInt_([self getValue]), 'Y');
}

+ (void)initialize {
  if (self == [OrgJodaTimeYears class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeYears_ZERO, new_OrgJodaTimeYears_initWithInt_(0));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_ONE, new_OrgJodaTimeYears_initWithInt_(1));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_TWO, new_OrgJodaTimeYears_initWithInt_(2));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_THREE, new_OrgJodaTimeYears_initWithInt_(3));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_MAX_VALUE, new_OrgJodaTimeYears_initWithInt_(JavaLangInteger_MAX_VALUE));
    JreStrongAssignAndConsume(&OrgJodaTimeYears_MIN_VALUE, new_OrgJodaTimeYears_initWithInt_(JavaLangInteger_MIN_VALUE));
    JreStrongAssign(&OrgJodaTimeYears_PARSER, [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeFormatISOPeriodFormat_standard())) withParseTypeWithOrgJodaTimePeriodType:OrgJodaTimePeriodType_years()]);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeYears)
  }
}

+ (IOSObjectArray *)__annotations_parseYearsWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "yearsWithInt:", "years", "Lorg.joda.time.Years;", 0x9, NULL, NULL },
    { "yearsBetweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "yearsBetween", "Lorg.joda.time.Years;", 0x9, NULL, NULL },
    { "yearsBetweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:", "yearsBetween", "Lorg.joda.time.Years;", 0x9, NULL, NULL },
    { "yearsInWithOrgJodaTimeReadableInterval:", "yearsIn", "Lorg.joda.time.Years;", 0x9, NULL, NULL },
    { "parseYearsWithNSString:", "parseYears", "Lorg.joda.time.Years;", 0x9, NULL, NULL },
    { "initWithInt:", "Years", NULL, 0x2, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "getFieldType", NULL, "Lorg.joda.time.DurationFieldType;", 0x1, NULL, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL, NULL },
    { "getYears", NULL, "I", 0x1, NULL, NULL },
    { "plusWithInt:", "plus", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "plusWithOrgJodaTimeYears:", "plus", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "minusWithInt:", "minus", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "minusWithOrgJodaTimeYears:", "minus", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "multipliedByWithInt:", "multipliedBy", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "dividedByWithInt:", "dividedBy", "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "negated", NULL, "Lorg.joda.time.Years;", 0x1, NULL, NULL },
    { "isGreaterThanWithOrgJodaTimeYears:", "isGreaterThan", "Z", 0x1, NULL, NULL },
    { "isLessThanWithOrgJodaTimeYears:", "isLessThan", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "ZERO", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_ZERO, NULL, .constantValue.asLong = 0 },
    { "ONE", "ONE", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_ONE, NULL, .constantValue.asLong = 0 },
    { "TWO", "TWO", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_TWO, NULL, .constantValue.asLong = 0 },
    { "THREE", "THREE", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_THREE, NULL, .constantValue.asLong = 0 },
    { "MAX_VALUE", "MAX_VALUE", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_MAX_VALUE, NULL, .constantValue.asLong = 0 },
    { "MIN_VALUE", "MIN_VALUE", 0x19, "Lorg.joda.time.Years;", &OrgJodaTimeYears_MIN_VALUE, NULL, .constantValue.asLong = 0 },
    { "PARSER", "PARSER", 0x1a, "Lorg.joda.time.format.PeriodFormatter;", &OrgJodaTimeYears_PARSER, NULL, .constantValue.asLong = 0 },
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeYears_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgJodaTimeYears = { 2, "Years", "org.joda.time", NULL, 0x11, 20, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeYears;
}

@end

OrgJodaTimeYears *OrgJodaTimeYears_yearsWithInt_(jint years) {
  OrgJodaTimeYears_initialize();
  switch (years) {
    case 0:
    return OrgJodaTimeYears_ZERO;
    case 1:
    return OrgJodaTimeYears_ONE;
    case 2:
    return OrgJodaTimeYears_TWO;
    case 3:
    return OrgJodaTimeYears_THREE;
    case JavaLangInteger_MAX_VALUE:
    return OrgJodaTimeYears_MAX_VALUE;
    case JavaLangInteger_MIN_VALUE:
    return OrgJodaTimeYears_MIN_VALUE;
    default:
    return create_OrgJodaTimeYears_initWithInt_(years);
  }
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end) {
  OrgJodaTimeYears_initialize();
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_(start, end, OrgJodaTimeDurationFieldType_years());
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end) {
  OrgJodaTimeYears_initialize();
  if ([start isKindOfClass:[OrgJodaTimeLocalDate class]] && [end isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getChronology]);
    jint years = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) years])) getDifferenceWithLong:[((OrgJodaTimeLocalDate *) nil_chk(((OrgJodaTimeLocalDate *) cast_chk(end, [OrgJodaTimeLocalDate class])))) getLocalMillis] withLong:[((OrgJodaTimeLocalDate *) cast_chk(start, [OrgJodaTimeLocalDate class])) getLocalMillis]];
    return OrgJodaTimeYears_yearsWithInt_(years);
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePeriod_(start, end, OrgJodaTimeYears_ZERO);
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_yearsInWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeYears_initialize();
  if (interval == nil) {
    return OrgJodaTimeYears_ZERO;
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_([((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getStart], [interval getEnd], OrgJodaTimeDurationFieldType_years());
  return OrgJodaTimeYears_yearsWithInt_(amount);
}

OrgJodaTimeYears *OrgJodaTimeYears_parseYearsWithNSString_(NSString *periodStr) {
  OrgJodaTimeYears_initialize();
  if (periodStr == nil) {
    return OrgJodaTimeYears_ZERO;
  }
  OrgJodaTimePeriod *p = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeYears_PARSER)) parsePeriodWithNSString:periodStr];
  return OrgJodaTimeYears_yearsWithInt_([((OrgJodaTimePeriod *) nil_chk(p)) getYears]);
}

void OrgJodaTimeYears_initWithInt_(OrgJodaTimeYears *self, jint years) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_initWithInt_(self, years);
}

OrgJodaTimeYears *new_OrgJodaTimeYears_initWithInt_(jint years) {
  OrgJodaTimeYears *self = [OrgJodaTimeYears alloc];
  OrgJodaTimeYears_initWithInt_(self, years);
  return self;
}

OrgJodaTimeYears *create_OrgJodaTimeYears_initWithInt_(jint years) {
  OrgJodaTimeYears *self = [[OrgJodaTimeYears alloc] autorelease];
  OrgJodaTimeYears_initWithInt_(self, years);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYears)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/format/DateTimeParserBucket.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/IllegalFieldValueException.h"
#include "org/joda/time/IllegalInstantException.h"
#include "org/joda/time/format/DateTimeParser.h"
#include "org/joda/time/format/DateTimeParserBucket.h"
#include "org/joda/time/format/DateTimeParserInternalParser.h"
#include "org/joda/time/format/FormatUtils.h"
#include "org/joda/time/format/InternalParser.h"

@interface OrgJodaTimeFormatDateTimeParserBucket () {
 @public
  OrgJodaTimeChronology *iChrono_;
  jlong iMillis_;
  JavaUtilLocale *iLocale_;
  jint iDefaultYear_;
  OrgJodaTimeDateTimeZone *iDefaultZone_;
  JavaLangInteger *iDefaultPivotYear_;
  OrgJodaTimeDateTimeZone *iZone_;
  JavaLangInteger *iOffset_;
  JavaLangInteger *iPivotYear_;
  IOSObjectArray *iSavedFields_;
  jint iSavedFieldsCount_;
  jboolean iSavedFieldsShared_;
  id iSavedState_;
}

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField;

+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(jint)high;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iChrono_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iDefaultPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iOffset_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iPivotYear_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedFields_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket, iSavedState_, id)

__attribute__((unused)) static OrgJodaTimeFormatDateTimeParserBucket_SavedField *OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(OrgJodaTimeFormatDateTimeParserBucket *self);

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(IOSObjectArray *array, jint high);

@interface OrgJodaTimeFormatDateTimeParserBucket_SavedState () {
 @public
  OrgJodaTimeFormatDateTimeParserBucket *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeParserBucket_SavedState, this$0_, OrgJodaTimeFormatDateTimeParserBucket *)

@implementation OrgJodaTimeFormatDateTimeParserBucket

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(self, instantLocal, chrono, locale);
  return self;
}

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear {
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(self, instantLocal, chrono, locale, pivotYear);
  return self;
}

- (instancetype)initWithLong:(jlong)instantLocal
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
          withJavaUtilLocale:(JavaUtilLocale *)locale
         withJavaLangInteger:(JavaLangInteger *)pivotYear
                     withInt:(jint)defaultYear {
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(self, instantLocal, chrono, locale, pivotYear, defaultYear);
  return self;
}

- (void)reset {
  JreStrongAssign(&iZone_, iDefaultZone_);
  JreStrongAssign(&iOffset_, nil);
  JreStrongAssign(&iPivotYear_, iDefaultPivotYear_);
  iSavedFieldsCount_ = 0;
  iSavedFieldsShared_ = false;
  JreStrongAssign(&iSavedState_, nil);
}

- (jlong)parseMillisWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [self reset];
  return [self doParseMillisWithOrgJodaTimeFormatInternalParser:OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser) withJavaLangCharSequence:text];
}

- (jlong)doParseMillisWithOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  jint newPos = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:self withJavaLangCharSequence:text withInt:0];
  if (newPos >= 0) {
    if (newPos >= [((id<JavaLangCharSequence>) nil_chk(text)) length]) {
      return [self computeMillisWithBoolean:true withJavaLangCharSequence:text];
    }
  }
  else {
    newPos = ~newPos;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgJodaTimeFormatFormatUtils_createErrorMessageWithNSString_withInt_([((id<JavaLangCharSequence>) nil_chk(text)) description], newPos));
}

- (OrgJodaTimeChronology *)getChronology {
  return iChrono_;
}

- (JavaUtilLocale *)getLocale {
  return iLocale_;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return iZone_;
}

- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  JreStrongAssign(&iSavedState_, nil);
  JreStrongAssign(&iZone_, zone);
}

- (jint)getOffset {
  return (iOffset_ != nil ? [iOffset_ intValue] : 0);
}

- (JavaLangInteger *)getOffsetInteger {
  return iOffset_;
}

- (void)setOffsetWithInt:(jint)offset {
  JreStrongAssign(&iSavedState_, nil);
  JreStrongAssign(&iOffset_, JavaLangInteger_valueOfWithInt_(offset));
}

- (void)setOffsetWithJavaLangInteger:(JavaLangInteger *)offset {
  JreStrongAssign(&iSavedState_, nil);
  JreStrongAssign(&iOffset_, offset);
}

- (JavaLangInteger *)getPivotYear {
  return iPivotYear_;
}

- (void)setPivotYearWithJavaLangInteger:(JavaLangInteger *)pivotYear {
  JreStrongAssign(&iPivotYear_, pivotYear);
}

- (void)saveFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(jint)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:field withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                          withInt:(jint)value {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withInt:value];
}

- (void)saveFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                     withNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self))) init__WithOrgJodaTimeDateTimeField:[((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:iChrono_] withNSString:text withJavaUtilLocale:locale];
}

- (OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obtainSaveField {
  return OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(self);
}

- (id)saveState {
  if (iSavedState_ == nil) {
    JreStrongAssignAndConsume(&iSavedState_, new_OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(self));
  }
  return iSavedState_;
}

- (jboolean)restoreStateWithId:(id)savedState {
  if ([savedState isKindOfClass:[OrgJodaTimeFormatDateTimeParserBucket_SavedState class]]) {
    if ([((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedState *) cast_chk(savedState, [OrgJodaTimeFormatDateTimeParserBucket_SavedState class])))) restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:self]) {
      JreStrongAssign(&iSavedState_, savedState);
      return true;
    }
  }
  return false;
}

- (jlong)computeMillis {
  return [self computeMillisWithBoolean:false withJavaLangCharSequence:nil];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:nil];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields
                     withNSString:(NSString *)text {
  return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:text];
}

- (jlong)computeMillisWithBoolean:(jboolean)resetFields
         withJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  IOSObjectArray *savedFields = iSavedFields_;
  jint count = iSavedFieldsCount_;
  if (iSavedFieldsShared_) {
    JreStrongAssign(&iSavedFields_, savedFields = [((IOSObjectArray *) nil_chk(iSavedFields_)) clone]);
    iSavedFieldsShared_ = false;
  }
  OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(savedFields, count);
  if (count > 0) {
    OrgJodaTimeDurationField *months = [((OrgJodaTimeDurationFieldType *) nil_chk(OrgJodaTimeDurationFieldType_months())) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *days = [((OrgJodaTimeDurationFieldType *) nil_chk(OrgJodaTimeDurationFieldType_days())) getFieldWithOrgJodaTimeChronology:iChrono_];
    OrgJodaTimeDurationField *first = [((OrgJodaTimeDateTimeField *) nil_chk(((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), 0)))->iField_)) getDurationField];
    if (OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(first, months) >= 0 && OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(first, days) <= 0) {
      [self saveFieldWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_year() withInt:iDefaultYear_];
      return [self computeMillisWithBoolean:resetFields withJavaLangCharSequence:text];
    }
  }
  jlong millis = iMillis_;
  @try {
    for (jint i = 0; i < count; i++) {
      millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:resetFields];
    }
    if (resetFields) {
      for (jint i = 0; i < count; i++) {
        millis = [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(IOSObjectArray_Get(nil_chk(savedFields), i))) setWithLong:millis withBoolean:i == (count - 1)];
      }
    }
  }
  @catch (OrgJodaTimeIllegalFieldValueException *e) {
    if (text != nil) {
      [((OrgJodaTimeIllegalFieldValueException *) nil_chk(e)) prependMessageWithNSString:JreStrcat("$@C", @"Cannot parse \"", text, '"')];
    }
    @throw e;
  }
  if (iOffset_ != nil) {
    millis -= [iOffset_ intValue];
  }
  else if (iZone_ != nil) {
    jint offset = [iZone_ getOffsetFromLocalWithLong:millis];
    millis -= offset;
    if (offset != [iZone_ getOffsetWithLong:millis]) {
      NSString *message = JreStrcat("$@C", @"Illegal instant due to time zone offset transition (", iZone_, ')');
      if (text != nil) {
        message = JreStrcat("$@$$", @"Cannot parse \"", text, @"\": ", message);
      }
      @throw create_OrgJodaTimeIllegalInstantException_initWithNSString_(message);
    }
  }
  return millis;
}

+ (void)sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:(IOSObjectArray *)array
                                                              withInt:(jint)high {
  OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(array, high);
}

+ (jint)compareReverseWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)a
                      withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)b {
  return OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(a, b);
}

- (void)dealloc {
  RELEASE_(iChrono_);
  RELEASE_(iLocale_);
  RELEASE_(iDefaultZone_);
  RELEASE_(iDefaultPivotYear_);
  RELEASE_(iZone_);
  RELEASE_(iOffset_);
  RELEASE_(iPivotYear_);
  RELEASE_(iSavedFields_);
  RELEASE_(iSavedState_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getOffset {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setOffsetWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_setPivotYearWithJavaLangInteger_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:", "DateTimeParserBucket", NULL, 0x1, NULL, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:", "DateTimeParserBucket", NULL, 0x1, NULL, NULL },
    { "initWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:withJavaLangInteger:withInt:", "DateTimeParserBucket", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "parseMillisWithOrgJodaTimeFormatDateTimeParser:withJavaLangCharSequence:", "parseMillis", "J", 0x1, NULL, NULL },
    { "doParseMillisWithOrgJodaTimeFormatInternalParser:withJavaLangCharSequence:", "doParseMillis", "J", 0x0, NULL, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL, NULL },
    { "setZoneWithOrgJodaTimeDateTimeZone:", "setZone", "V", 0x1, NULL, NULL },
    { "getOffset", NULL, "I", 0x1, NULL, NULL },
    { "getOffsetInteger", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "setOffsetWithInt:", "setOffset", "V", 0x1, NULL, NULL },
    { "setOffsetWithJavaLangInteger:", "setOffset", "V", 0x1, NULL, NULL },
    { "getPivotYear", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "setPivotYearWithJavaLangInteger:", "setPivotYear", "V", 0x1, NULL, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeField:withInt:", "saveField", "V", 0x1, NULL, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "saveField", "V", 0x1, NULL, NULL },
    { "saveFieldWithOrgJodaTimeDateTimeFieldType:withNSString:withJavaUtilLocale:", "saveField", "V", 0x1, NULL, NULL },
    { "obtainSaveField", NULL, "Lorg.joda.time.format.DateTimeParserBucket$SavedField;", 0x2, NULL, NULL },
    { "saveState", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "restoreStateWithId:", "restoreState", "Z", 0x1, NULL, NULL },
    { "computeMillis", NULL, "J", 0x1, NULL, NULL },
    { "computeMillisWithBoolean:", "computeMillis", "J", 0x1, NULL, NULL },
    { "computeMillisWithBoolean:withNSString:", "computeMillis", "J", 0x1, NULL, NULL },
    { "computeMillisWithBoolean:withJavaLangCharSequence:", "computeMillis", "J", 0x1, NULL, NULL },
    { "sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray:withInt:", "sort", "V", 0xa, NULL, NULL },
    { "compareReverseWithOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "compareReverse", "I", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iChrono_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL, NULL, .constantValue.asLong = 0 },
    { "iMillis_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "iLocale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
    { "iDefaultYear_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iDefaultZone_", NULL, 0x12, "Lorg.joda.time.DateTimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "iDefaultPivotYear_", NULL, 0x12, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "iZone_", NULL, 0x2, "Lorg.joda.time.DateTimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "iOffset_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "iPivotYear_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedFields_", NULL, 0x2, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedFieldsCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedFieldsShared_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedState_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.format.DateTimeParserBucket$SavedState;", "Lorg.joda.time.format.DateTimeParserBucket$SavedField;"};
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket = { 2, "DateTimeParserBucket", "org.joda.time.format", NULL, 0x1, 28, methods, 13, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgJodaTimeFormatDateTimeParserBucket;
}

@end

void OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeParserBucket *self, jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(self, instantLocal, chrono, locale, nil, 2000);
}

OrgJodaTimeFormatDateTimeParserBucket *new_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [OrgJodaTimeFormatDateTimeParserBucket alloc];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(self, instantLocal, chrono, locale);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket *create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [[OrgJodaTimeFormatDateTimeParserBucket alloc] autorelease];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(self, instantLocal, chrono, locale);
  return self;
}

void OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(OrgJodaTimeFormatDateTimeParserBucket *self, jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear) {
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(self, instantLocal, chrono, locale, pivotYear, 2000);
}

OrgJodaTimeFormatDateTimeParserBucket *new_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [OrgJodaTimeFormatDateTimeParserBucket alloc];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(self, instantLocal, chrono, locale, pivotYear);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket *create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [[OrgJodaTimeFormatDateTimeParserBucket alloc] autorelease];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_(self, instantLocal, chrono, locale, pivotYear);
  return self;
}

void OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(OrgJodaTimeFormatDateTimeParserBucket *self, jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear, jint defaultYear) {
  NSObject_init(self);
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  self->iMillis_ = instantLocal;
  JreStrongAssign(&self->iDefaultZone_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getZone]);
  JreStrongAssign(&self->iChrono_, [chrono withUTC]);
  JreStrongAssign(&self->iLocale_, (locale == nil ? JavaUtilLocale_getDefault() : locale));
  self->iDefaultYear_ = defaultYear;
  JreStrongAssign(&self->iDefaultPivotYear_, pivotYear);
  JreStrongAssign(&self->iZone_, self->iDefaultZone_);
  JreStrongAssign(&self->iPivotYear_, self->iDefaultPivotYear_);
  JreStrongAssignAndConsume(&self->iSavedFields_, [IOSObjectArray newArrayWithLength:8 type:OrgJodaTimeFormatDateTimeParserBucket_SavedField_class_()]);
}

OrgJodaTimeFormatDateTimeParserBucket *new_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear, jint defaultYear) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [OrgJodaTimeFormatDateTimeParserBucket alloc];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(self, instantLocal, chrono, locale, pivotYear, defaultYear);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket *create_OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(jlong instantLocal, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale, JavaLangInteger *pivotYear, jint defaultYear) {
  OrgJodaTimeFormatDateTimeParserBucket *self = [[OrgJodaTimeFormatDateTimeParserBucket alloc] autorelease];
  OrgJodaTimeFormatDateTimeParserBucket_initWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_withJavaLangInteger_withInt_(self, instantLocal, chrono, locale, pivotYear, defaultYear);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket_SavedField *OrgJodaTimeFormatDateTimeParserBucket_obtainSaveField(OrgJodaTimeFormatDateTimeParserBucket *self) {
  IOSObjectArray *savedFields = self->iSavedFields_;
  jint savedFieldsCount = self->iSavedFieldsCount_;
  if (savedFieldsCount == ((IOSObjectArray *) nil_chk(savedFields))->size_ || self->iSavedFieldsShared_) {
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:savedFieldsCount == savedFields->size_ ? savedFieldsCount * 2 : savedFields->size_ type:OrgJodaTimeFormatDateTimeParserBucket_SavedField_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(savedFields, 0, newArray, 0, savedFieldsCount);
    JreStrongAssign(&self->iSavedFields_, savedFields = newArray);
    self->iSavedFieldsShared_ = false;
  }
  JreStrongAssign(&self->iSavedState_, nil);
  OrgJodaTimeFormatDateTimeParserBucket_SavedField *saved = IOSObjectArray_Get(savedFields, savedFieldsCount);
  if (saved == nil) {
    saved = IOSObjectArray_SetAndConsume(savedFields, savedFieldsCount, new_OrgJodaTimeFormatDateTimeParserBucket_SavedField_init());
  }
  self->iSavedFieldsCount_ = savedFieldsCount + 1;
  return saved;
}

void OrgJodaTimeFormatDateTimeParserBucket_sortWithOrgJodaTimeFormatDateTimeParserBucket_SavedFieldArray_withInt_(IOSObjectArray *array, jint high) {
  OrgJodaTimeFormatDateTimeParserBucket_initialize();
  if (high > 10) {
    JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_(array, 0, high);
  }
  else {
    for (jint i = 0; i < high; i++) {
      for (jint j = i; j > 0 && [((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk((IOSObjectArray_Get(nil_chk(array), j - 1)))) compareToWithId:IOSObjectArray_Get(array, j)] > 0; j--) {
        OrgJodaTimeFormatDateTimeParserBucket_SavedField *t = IOSObjectArray_Get(nil_chk(array), j);
        IOSObjectArray_Set(array, j, IOSObjectArray_Get(array, j - 1));
        IOSObjectArray_Set(array, j - 1, t);
      }
    }
  }
}

jint OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDurationField *a, OrgJodaTimeDurationField *b) {
  OrgJodaTimeFormatDateTimeParserBucket_initialize();
  if (a == nil || ![a isSupported]) {
    if (b == nil || ![b isSupported]) {
      return 0;
    }
    return -1;
  }
  if (b == nil || ![b isSupported]) {
    return 1;
  }
  return -[((OrgJodaTimeDurationField *) nil_chk(a)) compareToWithId:b];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket)

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedState

- (instancetype)initWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)outer$ {
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(self, outer$);
  return self;
}

- (jboolean)restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)enclosing {
  if (enclosing != this$0_) {
    return false;
  }
  JreStrongAssign(&((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(enclosing))->iZone_, self->iZone_);
  JreStrongAssign(&enclosing->iOffset_, self->iOffset_);
  JreStrongAssign(&enclosing->iSavedFields_, self->iSavedFields_);
  if (self->iSavedFieldsCount_ < enclosing->iSavedFieldsCount_) {
    enclosing->iSavedFieldsShared_ = true;
  }
  enclosing->iSavedFieldsCount_ = self->iSavedFieldsCount_;
  return true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iZone_);
  RELEASE_(iOffset_);
  RELEASE_(iSavedFields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeFormatDateTimeParserBucket:", "SavedState", NULL, 0x0, NULL, NULL },
    { "restoreStateWithOrgJodaTimeFormatDateTimeParserBucket:", "restoreState", "Z", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.joda.time.format.DateTimeParserBucket;", NULL, NULL, .constantValue.asLong = 0 },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "iOffset_", NULL, 0x10, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedFields_", NULL, 0x10, "[Lorg.joda.time.format.DateTimeParserBucket$SavedField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iSavedFieldsCount_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedState = { 2, "SavedState", "org.joda.time.format", "DateTimeParserBucket", 0x0, 2, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedState;
}

@end

void OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(OrgJodaTimeFormatDateTimeParserBucket_SavedState *self, OrgJodaTimeFormatDateTimeParserBucket *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->iZone_, outer$->iZone_);
  JreStrongAssign(&self->iOffset_, outer$->iOffset_);
  JreStrongAssign(&self->iSavedFields_, outer$->iSavedFields_);
  self->iSavedFieldsCount_ = outer$->iSavedFieldsCount_;
}

OrgJodaTimeFormatDateTimeParserBucket_SavedState *new_OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(OrgJodaTimeFormatDateTimeParserBucket *outer$) {
  OrgJodaTimeFormatDateTimeParserBucket_SavedState *self = [OrgJodaTimeFormatDateTimeParserBucket_SavedState alloc];
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(self, outer$);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket_SavedState *create_OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(OrgJodaTimeFormatDateTimeParserBucket *outer$) {
  OrgJodaTimeFormatDateTimeParserBucket_SavedState *self = [[OrgJodaTimeFormatDateTimeParserBucket_SavedState alloc] autorelease];
  OrgJodaTimeFormatDateTimeParserBucket_SavedState_initWithOrgJodaTimeFormatDateTimeParserBucket_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket_SavedState)

@implementation OrgJodaTimeFormatDateTimeParserBucket_SavedField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                   withInt:(jint)value {
  JreStrongAssign(&iField_, field);
  iValue_ = value;
  JreStrongAssign(&iText_, nil);
  JreStrongAssign(&iLocale_, nil);
}

- (void)init__WithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                              withNSString:(NSString *)text
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  JreStrongAssign(&iField_, field);
  iValue_ = 0;
  JreStrongAssign(&iText_, text);
  JreStrongAssign(&iLocale_, locale);
}

- (jlong)setWithLong:(jlong)millis
         withBoolean:(jboolean)reset {
  if (iText_ == nil) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setExtendedWithLong:millis withInt:iValue_];
  }
  else {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:millis withNSString:iText_ withJavaUtilLocale:iLocale_];
  }
  if (reset) {
    millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:millis];
  }
  return millis;
}

- (jint)compareToWithId:(OrgJodaTimeFormatDateTimeParserBucket_SavedField *)obj {
  cast_chk(obj, [OrgJodaTimeFormatDateTimeParserBucket_SavedField class]);
  OrgJodaTimeDateTimeField *other = ((OrgJodaTimeFormatDateTimeParserBucket_SavedField *) nil_chk(obj))->iField_;
  jint result = OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_([((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getRangeDurationField], [((OrgJodaTimeDateTimeField *) nil_chk(other)) getRangeDurationField]);
  if (result != 0) {
    return result;
  }
  return OrgJodaTimeFormatDateTimeParserBucket_compareReverseWithOrgJodaTimeDurationField_withOrgJodaTimeDurationField_([iField_ getDurationField], [other getDurationField]);
}

- (void)dealloc {
  RELEASE_(iField_);
  RELEASE_(iText_);
  RELEASE_(iLocale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SavedField", NULL, 0x0, NULL, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withInt:", "init", "V", 0x0, NULL, NULL },
    { "init__WithOrgJodaTimeDateTimeField:withNSString:withJavaUtilLocale:", "init", "V", 0x0, NULL, NULL },
    { "setWithLong:withBoolean:", "set", "J", 0x0, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iField_", NULL, 0x0, "Lorg.joda.time.DateTimeField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iValue_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iText_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "iLocale_", NULL, 0x0, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeParserBucket_SavedField = { 2, "SavedField", "org.joda.time.format", "DateTimeParserBucket", 0x8, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/joda/time/format/DateTimeParserBucket$SavedField;>;" };
  return &_OrgJodaTimeFormatDateTimeParserBucket_SavedField;
}

@end

void OrgJodaTimeFormatDateTimeParserBucket_SavedField_init(OrgJodaTimeFormatDateTimeParserBucket_SavedField *self) {
  NSObject_init(self);
}

OrgJodaTimeFormatDateTimeParserBucket_SavedField *new_OrgJodaTimeFormatDateTimeParserBucket_SavedField_init() {
  OrgJodaTimeFormatDateTimeParserBucket_SavedField *self = [OrgJodaTimeFormatDateTimeParserBucket_SavedField alloc];
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_init(self);
  return self;
}

OrgJodaTimeFormatDateTimeParserBucket_SavedField *create_OrgJodaTimeFormatDateTimeParserBucket_SavedField_init() {
  OrgJodaTimeFormatDateTimeParserBucket_SavedField *self = [[OrgJodaTimeFormatDateTimeParserBucket_SavedField alloc] autorelease];
  OrgJodaTimeFormatDateTimeParserBucket_SavedField_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeParserBucket_SavedField)

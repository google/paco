//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/format/DateTimeFormat.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeFormatterBuilder.h"
#include "org/joda/time/format/DateTimeParserBucket.h"
#include "org/joda/time/format/InternalParser.h"
#include "org/joda/time/format/InternalPrinter.h"

@interface OrgJodaTimeFormatDateTimeFormat ()

+ (void)parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                       withNSString:(NSString *)pattern;

+ (NSString *)parseTokenWithNSString:(NSString *)pattern
                        withIntArray:(IOSIntArray *)indexRef;

+ (jboolean)isNumericTokenWithNSString:(NSString *)token;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForPatternWithNSString:(NSString *)pattern;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleWithNSString:(NSString *)style;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleIndexWithInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle;

+ (OrgJodaTimeFormatDateTimeFormatter *)createDateTimeFormatterWithInt:(jint)dateStyle
                                                               withInt:(jint)timeStyle;

+ (jint)selectStyleWithChar:(jchar)ch;

@end

inline jint OrgJodaTimeFormatDateTimeFormat_get_PATTERN_CACHE_SIZE();
#define OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE 500
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, PATTERN_CACHE_SIZE, jint)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_get_cPatternCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_cPatternCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat, cPatternCache, JavaUtilConcurrentConcurrentHashMap *)

inline JavaUtilConcurrentAtomicAtomicReferenceArray *OrgJodaTimeFormatDateTimeFormat_get_cStyleCache();
static JavaUtilConcurrentAtomicAtomicReferenceArray *OrgJodaTimeFormatDateTimeFormat_cStyleCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat, cStyleCache, JavaUtilConcurrentAtomicAtomicReferenceArray *)

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern);

__attribute__((unused)) static NSString *OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(NSString *pattern, IOSIntArray *indexRef);

__attribute__((unused)) static jboolean OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(NSString *token);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(NSString *pattern);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(NSString *style);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(jint dateStyle, jint timeStyle);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(jint dateStyle, jint timeStyle);

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(jchar ch);

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatter () {
 @public
  jint iDateStyle_;
  jint iTimeStyle_;
  jint iType_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatterWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat_StyleFormatter, cCache, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, JavaUtilLocale *locale);

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey () {
 @public
  jint combinedTypeAndStyle_;
  JavaUtilLocale *locale_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey, locale_, JavaUtilLocale *)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormat)

@implementation OrgJodaTimeFormatDateTimeFormat

+ (OrgJodaTimeFormatDateTimeFormatter *)forPatternWithNSString:(NSString *)pattern {
  return OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)forStyleWithNSString:(NSString *)style {
  return OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(style);
}

+ (NSString *)patternForStyleWithNSString:(NSString *)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(style, locale);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortDate {
  return OrgJodaTimeFormatDateTimeFormat_shortDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortTime {
  return OrgJodaTimeFormatDateTimeFormat_shortTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortDateTime {
  return OrgJodaTimeFormatDateTimeFormat_shortDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDate {
  return OrgJodaTimeFormatDateTimeFormat_mediumDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumTime {
  return OrgJodaTimeFormatDateTimeFormat_mediumTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDateTime {
  return OrgJodaTimeFormatDateTimeFormat_mediumDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longDate {
  return OrgJodaTimeFormatDateTimeFormat_longDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longTime {
  return OrgJodaTimeFormatDateTimeFormat_longTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longDateTime {
  return OrgJodaTimeFormatDateTimeFormat_longDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullDate {
  return OrgJodaTimeFormatDateTimeFormat_fullDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullTime {
  return OrgJodaTimeFormatDateTimeFormat_fullTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullDateTime {
  return OrgJodaTimeFormatDateTimeFormat_fullDateTime();
}

+ (void)appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                        withNSString:(NSString *)pattern {
  OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeFormatDateTimeFormat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                       withNSString:(NSString *)pattern {
  OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

+ (NSString *)parseTokenWithNSString:(NSString *)pattern
                        withIntArray:(IOSIntArray *)indexRef {
  return OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef);
}

+ (jboolean)isNumericTokenWithNSString:(NSString *)token {
  return OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(token);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForPatternWithNSString:(NSString *)pattern {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(pattern);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleWithNSString:(NSString *)style {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleIndexWithInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(dateStyle, timeStyle);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createDateTimeFormatterWithInt:(jint)dateStyle
                                                               withInt:(jint)timeStyle {
  return OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
}

+ (jint)selectStyleWithChar:(jchar)ch {
  return OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(ch);
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormat class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeFormatDateTimeFormat_cPatternCache, new_JavaUtilConcurrentConcurrentHashMap_init());
    JreStrongAssignAndConsume(&OrgJodaTimeFormatDateTimeFormat_cStyleCache, new_JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(25));
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormat)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "forPatternWithNSString:", "forPattern", "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "forStyleWithNSString:", "forStyle", "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "patternForStyleWithNSString:withJavaUtilLocale:", "patternForStyle", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "shortDate", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "shortTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "shortDateTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "mediumDate", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "mediumTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "mediumDateTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "longDate", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "longTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "longDateTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "fullDate", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "fullTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "fullDateTime", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x9, NULL, NULL },
    { "appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:withNSString:", "appendPatternTo", "V", 0x8, NULL, NULL },
    { "init", "DateTimeFormat", NULL, 0x4, NULL, NULL },
    { "parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:withNSString:", "parsePatternTo", "V", 0xa, NULL, NULL },
    { "parseTokenWithNSString:withIntArray:", "parseToken", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "isNumericTokenWithNSString:", "isNumericToken", "Z", 0xa, NULL, NULL },
    { "createFormatterForPatternWithNSString:", "createFormatterForPattern", "Lorg.joda.time.format.DateTimeFormatter;", 0xa, NULL, NULL },
    { "createFormatterForStyleWithNSString:", "createFormatterForStyle", "Lorg.joda.time.format.DateTimeFormatter;", 0xa, NULL, NULL },
    { "createFormatterForStyleIndexWithInt:withInt:", "createFormatterForStyleIndex", "Lorg.joda.time.format.DateTimeFormatter;", 0xa, NULL, NULL },
    { "createDateTimeFormatterWithInt:withInt:", "createDateTimeFormatter", "Lorg.joda.time.format.DateTimeFormatter;", 0xa, NULL, NULL },
    { "selectStyleWithChar:", "selectStyle", "I", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FULL", "FULL", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_FULL },
    { "LONG", "LONG", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_LONG },
    { "MEDIUM", "MEDIUM", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_MEDIUM },
    { "SHORT", "SHORT", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_SHORT },
    { "NONE", "NONE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_NONE },
    { "DATE", "DATE", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_DATE },
    { "TIME", "TIME", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_TIME },
    { "DATETIME", "DATETIME", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_DATETIME },
    { "PATTERN_CACHE_SIZE", "PATTERN_CACHE_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE },
    { "cPatternCache", "cPatternCache", 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeFormatDateTimeFormat_cPatternCache, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;>;", .constantValue.asLong = 0 },
    { "cStyleCache", "cStyleCache", 0x1a, "Ljava.util.concurrent.atomic.AtomicReferenceArray;", &OrgJodaTimeFormatDateTimeFormat_cStyleCache, "Ljava/util/concurrent/atomic/AtomicReferenceArray<Lorg/joda/time/format/DateTimeFormatter;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.format.DateTimeFormat$StyleFormatter;", "Lorg.joda.time.format.DateTimeFormat$StyleFormatterCacheKey;"};
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat = { 2, "DateTimeFormat", "org.joda.time.format", NULL, 0x1, 25, methods, 11, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgJodaTimeFormatDateTimeFormat;
}

@end

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(pattern);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(NSString *style) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
}

NSString *OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(NSString *style, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  OrgJodaTimeFormatDateTimeFormatter *formatter = OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  return [((OrgJodaTimeFormatDateTimeFormat_StyleFormatter *) nil_chk(((OrgJodaTimeFormatDateTimeFormat_StyleFormatter *) cast_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) getPrinter0], [OrgJodaTimeFormatDateTimeFormat_StyleFormatter class])))) getPatternWithJavaUtilLocale:locale];
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_SHORT, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_SHORT);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_SHORT, OrgJodaTimeFormatDateTimeFormat_SHORT);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_MEDIUM, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_MEDIUM);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_MEDIUM, OrgJodaTimeFormatDateTimeFormat_MEDIUM);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_LONG, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_LONG);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_LONG, OrgJodaTimeFormatDateTimeFormat_LONG);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_FULL, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_FULL);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_FULL, OrgJodaTimeFormatDateTimeFormat_FULL);
}

void OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

void OrgJodaTimeFormatDateTimeFormat_init(OrgJodaTimeFormatDateTimeFormat *self) {
  NSObject_init(self);
}

OrgJodaTimeFormatDateTimeFormat *new_OrgJodaTimeFormatDateTimeFormat_init() {
  OrgJodaTimeFormatDateTimeFormat *self = [OrgJodaTimeFormatDateTimeFormat alloc];
  OrgJodaTimeFormatDateTimeFormat_init(self);
  return self;
}

OrgJodaTimeFormatDateTimeFormat *create_OrgJodaTimeFormatDateTimeFormat_init() {
  OrgJodaTimeFormatDateTimeFormat *self = [[OrgJodaTimeFormatDateTimeFormat alloc] autorelease];
  OrgJodaTimeFormatDateTimeFormat_init(self);
  return self;
}

void OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint length = ((jint) [((NSString *) nil_chk(pattern)) length]);
  IOSIntArray *indexRef = [IOSIntArray arrayWithLength:1];
  for (jint i = 0; i < length; i++) {
    *IOSIntArray_GetRef(indexRef, 0) = i;
    NSString *token = OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef);
    i = IOSIntArray_Get(indexRef, 0);
    jint tokenLen = ((jint) [((NSString *) nil_chk(token)) length]);
    if (tokenLen == 0) {
      break;
    }
    jchar c = [token charAtWithInt:0];
    {
      NSString *sub;
      switch (c) {
        case 'G':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendEraText];
        break;
        case 'C':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendCenturyOfEraWithInt:tokenLen withInt:tokenLen];
        break;
        case 'x':
        case 'y':
        case 'Y':
        if (tokenLen == 2) {
          jboolean lenientParse = true;
          if (i + 1 < length) {
            (*IOSIntArray_GetRef(indexRef, 0))++;
            if (OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef))) {
              lenientParse = false;
            }
            (*IOSIntArray_GetRef(indexRef, 0))--;
          }
          switch (c) {
            case 'x':
           // [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTwoDigitWeekyearWithInt:[create_OrgJodaTimeDateTime_init() getWeekyear] - 30 withBoolean:lenientParse];
            break;
            case 'y':
            case 'Y':
            default:
           // [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTwoDigitYearWithInt:[create_OrgJodaTimeDateTime_init() getYear] - 30 withBoolean:lenientParse];
            break;
          }
        }
        else {
          jint maxDigits = 9;
          if (i + 1 < length) {
            (*IOSIntArray_GetRef(indexRef, 0))++;
            if (OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef))) {
              maxDigits = tokenLen;
            }
            (*IOSIntArray_GetRef(indexRef, 0))--;
          }
          switch (c) {
            case 'x':
            [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendWeekyearWithInt:tokenLen withInt:maxDigits];
            break;
            case 'y':
            [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendYearWithInt:tokenLen withInt:maxDigits];
            break;
            case 'Y':
            [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendYearOfEraWithInt:tokenLen withInt:maxDigits];
            break;
          }
        }
        break;
        case 'M':
        if (tokenLen >= 3) {
          if (tokenLen >= 4) {
            [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearText];
          }
          else {
            [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearShortText];
          }
        }
        else {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearWithInt:tokenLen];
        }
        break;
        case 'd':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfMonthWithInt:tokenLen];
        break;
        case 'a':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHalfdayOfDayText];
        break;
        case 'h':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendClockhourOfHalfdayWithInt:tokenLen];
        break;
        case 'H':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHourOfDayWithInt:tokenLen];
        break;
        case 'k':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendClockhourOfDayWithInt:tokenLen];
        break;
        case 'K':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHourOfHalfdayWithInt:tokenLen];
        break;
        case 'm':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMinuteOfHourWithInt:tokenLen];
        break;
        case 's':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendSecondOfMinuteWithInt:tokenLen];
        break;
        case 'S':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendFractionOfSecondWithInt:tokenLen withInt:tokenLen];
        break;
        case 'e':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekWithInt:tokenLen];
        break;
        case 'E':
        if (tokenLen >= 4) {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekText];
        }
        else {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekShortText];
        }
        break;
        case 'D':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfYearWithInt:tokenLen];
        break;
        case 'w':
        [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendWeekOfWeekyearWithInt:tokenLen];
        break;
        case 'z':
        if (tokenLen >= 4) {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneName];
        }
        else {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneShortNameWithJavaUtilMap:nil];
        }
        break;
        case 'Z':
        if (tokenLen == 1) {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneOffsetWithNSString:nil withNSString:@"Z" withBoolean:false withInt:2 withInt:2];
        }
        else if (tokenLen == 2) {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneOffsetWithNSString:nil withNSString:@"Z" withBoolean:true withInt:2 withInt:2];
        }
        else {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneId];
        }
        break;
        case '\'':
        sub = [token substring:1];
        if (((jint) [((NSString *) nil_chk(sub)) length]) == 1) {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendLiteralWithChar:[sub charAtWithInt:0]];
        }
        else {
          [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendLiteralWithNSString:[NSString stringWithString:sub]];
        }
        break;
        default:
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal pattern component: ", token));
      }
    }
  }
}

NSString *OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(NSString *pattern, IOSIntArray *indexRef) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  jint i = IOSIntArray_Get(nil_chk(indexRef), 0);
  jint length = ((jint) [((NSString *) nil_chk(pattern)) length]);
  jchar c = [pattern charAtWithInt:i];
  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
    [buf appendWithChar:c];
    while (i + 1 < length) {
      jchar peek = [pattern charAtWithInt:i + 1];
      if (peek == c) {
        [buf appendWithChar:c];
        i++;
      }
      else {
        break;
      }
    }
  }
  else {
    [buf appendWithChar:'\''];
    jboolean inLiteral = false;
    for (; i < length; i++) {
      c = [pattern charAtWithInt:i];
      if (c == '\'') {
        if (i + 1 < length && [pattern charAtWithInt:i + 1] == '\'') {
          i++;
          [buf appendWithChar:c];
        }
        else {
          inLiteral = !inLiteral;
        }
      }
      else if (!inLiteral && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) {
        i--;
        break;
      }
      else {
        [buf appendWithChar:c];
      }
    }
  }
  *IOSIntArray_GetRef(indexRef, 0) = i;
  return [buf description];
}

jboolean OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(NSString *token) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint tokenLen = ((jint) [((NSString *) nil_chk(token)) length]);
  if (tokenLen > 0) {
    jchar c = [token charAtWithInt:0];
    switch (c) {
      case 'c':
      case 'C':
      case 'x':
      case 'y':
      case 'Y':
      case 'd':
      case 'h':
      case 'H':
      case 'm':
      case 's':
      case 'S':
      case 'e':
      case 'D':
      case 'F':
      case 'w':
      case 'W':
      case 'k':
      case 'K':
      return true;
      case 'M':
      if (tokenLen <= 2) {
        return true;
      }
    }
  }
  return false;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  if (pattern == nil || ((jint) [pattern length]) == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid pattern specification");
  }
  OrgJodaTimeFormatDateTimeFormatter *formatter = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeFormatDateTimeFormat_cPatternCache)) getWithId:pattern];
  if (formatter == nil) {
    OrgJodaTimeFormatDateTimeFormatterBuilder *builder = create_OrgJodaTimeFormatDateTimeFormatterBuilder_init();
    OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
    formatter = [builder toFormatter];
    if ([OrgJodaTimeFormatDateTimeFormat_cPatternCache size] < OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE) {
      OrgJodaTimeFormatDateTimeFormatter *oldFormatter = [OrgJodaTimeFormatDateTimeFormat_cPatternCache putIfAbsentWithId:pattern withId:formatter];
      if (oldFormatter != nil) {
        formatter = oldFormatter;
      }
    }
  }
  return formatter;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(NSString *style) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  if (style == nil || ((jint) [style length]) != 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid style specification: ", style));
  }
  jint dateStyle = OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_([((NSString *) nil_chk(style)) charAtWithInt:0]);
  jint timeStyle = OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_([style charAtWithInt:1]);
  if (dateStyle == OrgJodaTimeFormatDateTimeFormat_NONE && timeStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Style '--' is invalid");
  }
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(dateStyle, timeStyle);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(jint dateStyle, jint timeStyle) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint index = ((JreLShift32(dateStyle, 2)) + dateStyle) + timeStyle;
  if (index >= [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(OrgJodaTimeFormatDateTimeFormat_cStyleCache)) length]) {
    return OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
  }
  OrgJodaTimeFormatDateTimeFormatter *f = [OrgJodaTimeFormatDateTimeFormat_cStyleCache getWithInt:index];
  if (f == nil) {
    f = OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
    if ([OrgJodaTimeFormatDateTimeFormat_cStyleCache compareAndSetWithInt:index withId:nil withId:f] == false) {
      f = [OrgJodaTimeFormatDateTimeFormat_cStyleCache getWithInt:index];
    }
  }
  return f;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(jint dateStyle, jint timeStyle) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint type = OrgJodaTimeFormatDateTimeFormat_DATETIME;
  if (dateStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    type = OrgJodaTimeFormatDateTimeFormat_TIME;
  }
  else if (timeStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    type = OrgJodaTimeFormatDateTimeFormat_DATE;
  }
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter *llf = create_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(dateStyle, timeStyle, type);
  return create_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(llf, llf);
}

jint OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(jchar ch) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  switch (ch) {
    case 'S':
    return OrgJodaTimeFormatDateTimeFormat_SHORT;
    case 'M':
    return OrgJodaTimeFormatDateTimeFormat_MEDIUM;
    case 'L':
    return OrgJodaTimeFormatDateTimeFormat_LONG;
    case 'F':
    return OrgJodaTimeFormatDateTimeFormat_FULL;
    case '-':
    return OrgJodaTimeFormatDateTimeFormat_NONE;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Invalid style character: ", ch));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

@implementation OrgJodaTimeFormatDateTimeFormat_StyleFormatter

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle
                    withInt:(jint)type {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(self, dateStyle, timeStyle, type);
  return self;
}

- (jint)estimatePrintedLength {
  return 40;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatInternalPrinter> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale))) getPrinter0];
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(p)) printToWithJavaLangAppendable:appenadble withLong:instant withOrgJodaTimeChronology:chrono withInt:displayOffset withOrgJodaTimeDateTimeZone:displayZone withJavaUtilLocale:locale];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatInternalPrinter> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale))) getPrinter0];
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(p)) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
}

- (jint)estimateParsedLength {
  return 40;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  id<OrgJodaTimeFormatInternalParser> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getLocale]))) getParser0];
  return [((id<OrgJodaTimeFormatInternalParser>) nil_chk(p)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatterWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale);
}

- (NSString *)getPatternWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaTextDateFormat *f = nil;
  switch (iType_) {
    case OrgJodaTimeFormatDateTimeFormat_DATE:
    f = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(iDateStyle_, locale);
    break;
    case OrgJodaTimeFormatDateTimeFormat_TIME:
    f = JavaTextDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_(iTimeStyle_, locale);
    break;
    case OrgJodaTimeFormatDateTimeFormat_DATETIME:
    f = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(iDateStyle_, iTimeStyle_, locale);
    break;
  }
  if ([f isKindOfClass:[JavaTextSimpleDateFormat class]] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"No datetime pattern for locale: ", locale));
  }
  return [((JavaTextSimpleDateFormat *) nil_chk(((JavaTextSimpleDateFormat *) cast_chk(f, [JavaTextSimpleDateFormat class])))) toPattern];
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormat_StyleFormatter class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache, new_JavaUtilConcurrentConcurrentHashMap_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "StyleFormatter", NULL, 0x0, NULL, NULL },
    { "estimatePrintedLength", NULL, "I", 0x1, NULL, NULL },
    { "printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:", "printTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "estimateParsedLength", NULL, "I", 0x1, NULL, NULL },
    { "parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:", "parseInto", "I", 0x1, NULL, NULL },
    { "getFormatterWithJavaUtilLocale:", "getFormatter", "Lorg.joda.time.format.DateTimeFormatter;", 0x2, NULL, NULL },
    { "getPatternWithJavaUtilLocale:", "getPattern", "Ljava.lang.String;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cCache", "cCache", 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/format/DateTimeFormat$StyleFormatterCacheKey;Lorg/joda/time/format/DateTimeFormatter;>;", .constantValue.asLong = 0 },
    { "iDateStyle_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iTimeStyle_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iType_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat_StyleFormatter = { 2, "StyleFormatter", "org.joda.time.format", "DateTimeFormat", 0x8, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFormatDateTimeFormat_StyleFormatter;
}

@end

void OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, jint dateStyle, jint timeStyle, jint type) {
  NSObject_init(self);
  self->iDateStyle_ = dateStyle;
  self->iTimeStyle_ = timeStyle;
  self->iType_ = type;
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatter *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(jint dateStyle, jint timeStyle, jint type) {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self = [OrgJodaTimeFormatDateTimeFormat_StyleFormatter alloc];
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(self, dateStyle, timeStyle, type);
  return self;
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatter *create_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(jint dateStyle, jint timeStyle, jint type) {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self = [[OrgJodaTimeFormatDateTimeFormat_StyleFormatter alloc] autorelease];
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(self, dateStyle, timeStyle, type);
  return self;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, JavaUtilLocale *locale) {
  locale = (locale == nil ? JavaUtilLocale_getDefault() : locale);
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *key = create_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self->iType_, self->iDateStyle_, self->iTimeStyle_, locale);
  OrgJodaTimeFormatDateTimeFormatter *f = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache)) getWithId:key];
  if (f == nil) {
    f = OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_([self getPatternWithJavaUtilLocale:locale]);
    OrgJodaTimeFormatDateTimeFormatter *oldFormatter = [OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache putIfAbsentWithId:key withId:f];
    if (oldFormatter != nil) {
      f = oldFormatter;
    }
  }
  return f;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

@implementation OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey

- (instancetype)initWithInt:(jint)iType
                    withInt:(jint)iDateStyle
                    withInt:(jint)iTimeStyle
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self, iType, iDateStyle, iTimeStyle, locale);
  return self;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + combinedTypeAndStyle_;
  result = prime * result + ((locale_ == nil) ? 0 : ((jint) [locale_ hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if (!([obj isKindOfClass:[OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey class]])) {
    return false;
  }
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *other = (OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *) cast_chk(obj, [OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey class]);
  if (combinedTypeAndStyle_ != ((OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *) nil_chk(other))->combinedTypeAndStyle_) {
    return false;
  }
  if (locale_ == nil) {
    if (other->locale_ != nil) {
      return false;
    }
  }
  else if (![locale_ isEqual:other->locale_]) {
    return false;
  }
  return true;
}

- (void)dealloc {
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withJavaUtilLocale:", "StyleFormatterCacheKey", NULL, 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "combinedTypeAndStyle_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey = { 2, "StyleFormatterCacheKey", "org.joda.time.format", "DateTimeFormat", 0x8, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey;
}

@end

void OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *self, jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssign(&self->locale_, locale);
  self->combinedTypeAndStyle_ = iType + (JreLShift32(iDateStyle, 4)) + (JreLShift32(iTimeStyle, 8));
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *self = [OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey alloc];
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self, iType, iDateStyle, iTimeStyle, locale);
  return self;
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *create_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *self = [[OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey alloc] autorelease];
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self, iType, iDateStyle, iTimeStyle, locale);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java
//

#include "J2ObjC_source.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/field/DelegatedDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/SkipUndoDateTimeField.h"

static jint (*OrgJodaTimeFieldSkipUndoDateTimeField_super$_getMinimumValue)(id, SEL);

@interface OrgJodaTimeFieldSkipUndoDateTimeField () {
 @public
  OrgJodaTimeChronology *iChronology_;
  jint iSkip_;
  jint iMinValue_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldSkipUndoDateTimeField, iChronology_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeFieldSkipUndoDateTimeField_get_serialVersionUID();
#define OrgJodaTimeFieldSkipUndoDateTimeField_serialVersionUID -5875876968979LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFieldSkipUndoDateTimeField, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFieldSkipUndoDateTimeField)

@implementation OrgJodaTimeFieldSkipUndoDateTimeField

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(self, chronology, field);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(jint)skip {
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(self, chronology, field, skip);
  return self;
}

- (jint)getWithLong:(jlong)millis {
  jint value = [super getWithLong:millis];
  if (value < iSkip_) {
    value++;
  }
  return value;
}

- (jlong)setWithLong:(jlong)millis
             withInt:(jint)value {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, value, iMinValue_, [self getMaximumValue]);
  if (value <= iSkip_) {
    value--;
  }
  return [super setWithLong:millis withInt:value];
}

- (jint)getMinimumValue {
  return iMinValue_;
}

- (id)readResolve {
  return [((OrgJodaTimeDateTimeFieldType *) nil_chk([self getType])) getFieldWithOrgJodaTimeChronology:iChronology_];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeFieldSkipUndoDateTimeField class]) {
    OrgJodaTimeFieldSkipUndoDateTimeField_super$_getMinimumValue = (jint (*)(id, SEL))[OrgJodaTimeFieldDelegatedDateTimeField instanceMethodForSelector:@selector(getMinimumValue)];
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFieldSkipUndoDateTimeField)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeField:", "SkipUndoDateTimeField", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeField:withInt:", "SkipUndoDateTimeField", NULL, 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeFieldSkipUndoDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL, NULL, .constantValue.asLong = 0 },
    { "iSkip_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iMinValue_", NULL, 0x82, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldSkipUndoDateTimeField = { 2, "SkipUndoDateTimeField", "org.joda.time.field", NULL, 0x11, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFieldSkipUndoDateTimeField;
}

@end

void OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeFieldSkipUndoDateTimeField *self, OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(self, chronology, field, 0);
}

OrgJodaTimeFieldSkipUndoDateTimeField *new_OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldSkipUndoDateTimeField *self = [OrgJodaTimeFieldSkipUndoDateTimeField alloc];
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(self, chronology, field);
  return self;
}

OrgJodaTimeFieldSkipUndoDateTimeField *create_OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldSkipUndoDateTimeField *self = [[OrgJodaTimeFieldSkipUndoDateTimeField alloc] autorelease];
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(self, chronology, field);
  return self;
}

void OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeFieldSkipUndoDateTimeField *self, OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip) {
  OrgJodaTimeFieldDelegatedDateTimeField_initWithOrgJodaTimeDateTimeField_(self, field);
  JreStrongAssign(&self->iChronology_, chronology);
  jint min = OrgJodaTimeFieldSkipUndoDateTimeField_super$_getMinimumValue(self, @selector(getMinimumValue));
  if (min < skip) {
    self->iMinValue_ = min + 1;
  }
  else if (min == skip + 1) {
    self->iMinValue_ = skip;
  }
  else {
    self->iMinValue_ = min;
  }
  self->iSkip_ = skip;
}

OrgJodaTimeFieldSkipUndoDateTimeField *new_OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip) {
  OrgJodaTimeFieldSkipUndoDateTimeField *self = [OrgJodaTimeFieldSkipUndoDateTimeField alloc];
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(self, chronology, field, skip);
  return self;
}

OrgJodaTimeFieldSkipUndoDateTimeField *create_OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip) {
  OrgJodaTimeFieldSkipUndoDateTimeField *self = [[OrgJodaTimeFieldSkipUndoDateTimeField alloc] autorelease];
  OrgJodaTimeFieldSkipUndoDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(self, chronology, field, skip);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldSkipUndoDateTimeField)

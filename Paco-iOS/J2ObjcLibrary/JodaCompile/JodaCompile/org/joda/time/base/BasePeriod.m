//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/base/BasePeriod.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/Duration.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/MutablePeriod.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadWritablePeriod.h"
#include "org/joda/time/ReadableDuration.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/AbstractPeriod.h"
#include "org/joda/time/base/BaseLocal.h"
#include "org/joda/time/base/BasePeriod.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/convert/ConverterManager.h"
#include "org/joda/time/convert/PeriodConverter.h"
#include "org/joda/time/field/FieldUtils.h"

@interface OrgJodaTimeBaseBasePeriod () {
 @public
  OrgJodaTimePeriodType *iType_;
  IOSIntArray *iValues_;
}

- (void)checkAndUpdateWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                          withIntArray:(IOSIntArray *)values
                                               withInt:(jint)newValue;

- (void)setPeriodInternalWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (IOSIntArray *)setPeriodInternalWithInt:(jint)years
                                  withInt:(jint)months
                                  withInt:(jint)weeks
                                  withInt:(jint)days
                                  withInt:(jint)hours
                                  withInt:(jint)minutes
                                  withInt:(jint)seconds
                                  withInt:(jint)millis;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeBaseBasePeriod, iType_, OrgJodaTimePeriodType *)
J2OBJC_FIELD_SETTER(OrgJodaTimeBaseBasePeriod, iValues_, IOSIntArray *)

inline jlong OrgJodaTimeBaseBasePeriod_get_serialVersionUID();
#define OrgJodaTimeBaseBasePeriod_serialVersionUID -2110953284060001145LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeBaseBasePeriod, serialVersionUID, jlong)

inline id<OrgJodaTimeReadablePeriod> OrgJodaTimeBaseBasePeriod_get_DUMMY_PERIOD();
static id<OrgJodaTimeReadablePeriod> OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeBaseBasePeriod, DUMMY_PERIOD, id<OrgJodaTimeReadablePeriod>)

__attribute__((unused)) static void OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(OrgJodaTimeBaseBasePeriod *self, OrgJodaTimeDurationFieldType *type, IOSIntArray *values, jint newValue);

__attribute__((unused)) static void OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadablePeriod> period);

__attribute__((unused)) static IOSIntArray *OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeBaseBasePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis);

@interface OrgJodaTimeBaseBasePeriod_$1 : OrgJodaTimeBaseAbstractPeriod

- (jint)getValueWithInt:(jint)index;

- (OrgJodaTimePeriodType *)getPeriodType;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeBaseBasePeriod_$1)

__attribute__((unused)) static void OrgJodaTimeBaseBasePeriod_$1_init(OrgJodaTimeBaseBasePeriod_$1 *self);

__attribute__((unused)) static OrgJodaTimeBaseBasePeriod_$1 *new_OrgJodaTimeBaseBasePeriod_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeBaseBasePeriod_$1 *create_OrgJodaTimeBaseBasePeriod_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeBaseBasePeriod_$1)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeBaseBasePeriod)

@implementation OrgJodaTimeBaseBasePeriod

- (instancetype)initWithInt:(jint)years
                    withInt:(jint)months
                    withInt:(jint)weeks
                    withInt:(jint)days
                    withInt:(jint)hours
                    withInt:(jint)minutes
                    withInt:(jint)seconds
                    withInt:(jint)millis
  withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimePeriodType_(self, years, months, weeks, days, hours, minutes, seconds, millis, type);
  return self;
}

- (instancetype)initWithLong:(jlong)startInstant
                    withLong:(jlong)endInstant
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeBaseBasePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(self, startInstant, endInstant, type, chrono);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                    withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(self, startInstant, endInstant, type);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                    withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimePeriodType_(self, start, end, type);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant
                   withOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                         withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_withOrgJodaTimePeriodType_(self, startInstant, duration, type);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                     withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant
                          withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(self, duration, endInstant, type);
  return self;
}

- (instancetype)initWithLong:(jlong)duration {
  OrgJodaTimeBaseBasePeriod_initWithLong_(self, duration);
  return self;
}

- (instancetype)initWithLong:(jlong)duration
   withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeBaseBasePeriod_initWithLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(self, duration, type, chrono);
  return self;
}

- (instancetype)initWithId:(id)period
 withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeBaseBasePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(self, period, type, chrono);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)values
       withOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  OrgJodaTimeBaseBasePeriod_initWithIntArray_withOrgJodaTimePeriodType_(self, values, type);
  return self;
}

- (OrgJodaTimePeriodType *)checkPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  return OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(type);
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return iType_;
}

- (jint)getValueWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (OrgJodaTimeDuration *)toDurationFromWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)startInstant {
  jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(startInstant);
  jlong endMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:startMillis withInt:1];
  return create_OrgJodaTimeDuration_initWithLong_withLong_(startMillis, endMillis);
}

- (OrgJodaTimeDuration *)toDurationToWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)endInstant {
  jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(endInstant);
  jlong startMillis = [((OrgJodaTimeChronology *) nil_chk(chrono)) addWithOrgJodaTimeReadablePeriod:self withLong:endMillis withInt:-1];
  return create_OrgJodaTimeDuration_initWithLong_withLong_(startMillis, endMillis);
}

- (void)checkAndUpdateWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                          withIntArray:(IOSIntArray *)values
                                               withInt:(jint)newValue {
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, values, newValue);
}

- (void)setPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period == nil) {
    [self setValuesWithIntArray:[IOSIntArray arrayWithLength:[self size]]];
  }
  else {
    OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(self, period);
  }
}

- (void)setPeriodInternalWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(self, period);
}

- (void)setPeriodWithInt:(jint)years
                 withInt:(jint)months
                 withInt:(jint)weeks
                 withInt:(jint)days
                 withInt:(jint)hours
                 withInt:(jint)minutes
                 withInt:(jint)seconds
                 withInt:(jint)millis {
  IOSIntArray *newValues = OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis);
  [self setValuesWithIntArray:newValues];
}

- (IOSIntArray *)setPeriodInternalWithInt:(jint)years
                                  withInt:(jint)months
                                  withInt:(jint)weeks
                                  withInt:(jint)days
                                  withInt:(jint)hours
                                  withInt:(jint)minutes
                                  withInt:(jint)seconds
                                  withInt:(jint)millis {
  return OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis);
}

- (void)setFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(jint)value {
  [self setFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)setFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(jint)value {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Period does not support field '", field, '\''));
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = value;
  }
}

- (void)addFieldWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                                         withInt:(jint)value {
  [self addFieldIntoWithIntArray:iValues_ withOrgJodaTimeDurationFieldType:field withInt:value];
}

- (void)addFieldIntoWithIntArray:(IOSIntArray *)values
withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)field
                         withInt:(jint)value {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:field];
  if (index == -1) {
    if (value != 0 || field == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"Period does not support field '", field, '\''));
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_(IOSIntArray_Get(values, index), value);
  }
}

- (void)mergePeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self mergePeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)mergePeriodIntoWithIntArray:(IOSIntArray *)values
               withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, values, value);
  }
  return values;
}

- (void)addPeriodWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  if (period != nil) {
    [self setValuesWithIntArray:[self addPeriodIntoWithIntArray:[self getValues] withOrgJodaTimeReadablePeriod:period]];
  }
}

- (IOSIntArray *)addPeriodIntoWithIntArray:(IOSIntArray *)values
             withOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    if (value != 0) {
      jint index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
      if (index == -1) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"Period does not support field '", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName], '\''));
      }
      else {
        *IOSIntArray_GetRef(nil_chk(values), index) = OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_([self getValueWithInt:index], value);
      }
    }
  }
  return values;
}

- (void)setValueWithInt:(jint)index
                withInt:(jint)value {
  *IOSIntArray_GetRef(nil_chk(iValues_), index) = value;
}

- (void)setValuesWithIntArray:(IOSIntArray *)values {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, 0, iValues_, 0, ((IOSIntArray *) nil_chk(iValues_))->size_);
}

- (void)dealloc {
  RELEASE_(iType_);
  RELEASE_(iValues_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeBaseBasePeriod class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD, new_OrgJodaTimeBaseBasePeriod_$1_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeBaseBasePeriod)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithLong:withLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableDuration:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithOrgJodaTimeReadableDuration:withOrgJodaTimeReadableInstant:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithLong:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithLong:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithId:withOrgJodaTimePeriodType:withOrgJodaTimeChronology:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "initWithIntArray:withOrgJodaTimePeriodType:", "BasePeriod", NULL, 0x4, NULL, NULL },
    { "checkPeriodTypeWithOrgJodaTimePeriodType:", "checkPeriodType", "Lorg.joda.time.PeriodType;", 0x4, NULL, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL, NULL },
    { "toDurationFromWithOrgJodaTimeReadableInstant:", "toDurationFrom", "Lorg.joda.time.Duration;", 0x1, NULL, NULL },
    { "toDurationToWithOrgJodaTimeReadableInstant:", "toDurationTo", "Lorg.joda.time.Duration;", 0x1, NULL, NULL },
    { "checkAndUpdateWithOrgJodaTimeDurationFieldType:withIntArray:withInt:", "checkAndUpdate", "V", 0x2, NULL, NULL },
    { "setPeriodWithOrgJodaTimeReadablePeriod:", "setPeriod", "V", 0x4, NULL, NULL },
    { "setPeriodInternalWithOrgJodaTimeReadablePeriod:", "setPeriodInternal", "V", 0x2, NULL, NULL },
    { "setPeriodWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriod", "V", 0x4, NULL, NULL },
    { "setPeriodInternalWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "setPeriodInternal", "[I", 0x2, NULL, NULL },
    { "setFieldWithOrgJodaTimeDurationFieldType:withInt:", "setField", "V", 0x4, NULL, NULL },
    { "setFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "setFieldInto", "V", 0x4, NULL, NULL },
    { "addFieldWithOrgJodaTimeDurationFieldType:withInt:", "addField", "V", 0x4, NULL, NULL },
    { "addFieldIntoWithIntArray:withOrgJodaTimeDurationFieldType:withInt:", "addFieldInto", "V", 0x4, NULL, NULL },
    { "mergePeriodWithOrgJodaTimeReadablePeriod:", "mergePeriod", "V", 0x4, NULL, NULL },
    { "mergePeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "mergePeriodInto", "[I", 0x4, NULL, NULL },
    { "addPeriodWithOrgJodaTimeReadablePeriod:", "addPeriod", "V", 0x4, NULL, NULL },
    { "addPeriodIntoWithIntArray:withOrgJodaTimeReadablePeriod:", "addPeriodInto", "[I", 0x4, NULL, NULL },
    { "setValueWithInt:withInt:", "setValue", "V", 0x4, NULL, NULL },
    { "setValuesWithIntArray:", "setValues", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeBaseBasePeriod_serialVersionUID },
    { "DUMMY_PERIOD", "DUMMY_PERIOD", 0x1a, "Lorg.joda.time.ReadablePeriod;", &OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD, NULL, .constantValue.asLong = 0 },
    { "iType_", NULL, 0x12, "Lorg.joda.time.PeriodType;", NULL, NULL, .constantValue.asLong = 0 },
    { "iValues_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod = { 2, "BasePeriod", "org.joda.time.base", NULL, 0x401, 30, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeBaseBasePeriod;
}

@end

void OrgJodaTimeBaseBasePeriod_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, years, months, weeks, days, hours, minutes, seconds, millis));
}

void OrgJodaTimeBaseBasePeriod_initWithLong_withLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimeBaseBasePeriod *self, jlong startInstant, jlong endInstant, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startInstant withLong:endInstant]);
}

void OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  if (startInstant == nil && endInstant == nil) {
    JreStrongAssign(&self->iType_, type);
    JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithLength:[self size]]);
  }
  else {
    jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
    jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(startInstant, endInstant);
    JreStrongAssign(&self->iType_, type);
    JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
  }
}

void OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  if (start == nil || end == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ReadablePartial objects must not be null");
  }
  if ([start isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [end isKindOfClass:[OrgJodaTimeBaseBaseLocal class]] && [((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getClass] == (id) [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) getClass]) {
    type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
    jlong startMillis = [((OrgJodaTimeBaseBaseLocal *) cast_chk(start, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
    jlong endMillis = [((OrgJodaTimeBaseBaseLocal *) cast_chk(end, [OrgJodaTimeBaseBaseLocal class])) getLocalMillis];
    OrgJodaTimeChronology *chrono = [start getChronology];
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
    JreStrongAssign(&self->iType_, type);
    JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
  }
  else {
    if ([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) size] != [((id<OrgJodaTimeReadablePartial>) nil_chk(end)) size]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ReadablePartial objects must have the same set of fields");
    }
    for (jint i = 0, isize = [start size]; i < isize; i++) {
      if ([start getFieldTypeWithInt:i] != [end getFieldTypeWithInt:i]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ReadablePartial objects must have the same set of fields");
      }
    }
    if (OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(start) == false) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ReadablePartial objects must be contiguous");
    }
    JreStrongAssign(&self->iType_, [self checkPeriodTypeWithOrgJodaTimePeriodType:type]);
    OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([start getChronology]))) withUTC];
    JreStrongAssign(&self->iValues_, [chrono getWithOrgJodaTimeReadablePeriod:self withLong:[((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:start withLong:0LL] withLong:[chrono setWithOrgJodaTimeReadablePartial:end withLong:0LL]]);
  }
}

void OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableDuration_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadableInstant> startInstant, id<OrgJodaTimeReadableDuration> duration, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  jlong startMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(startInstant);
  jlong durationMillis = OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
  jlong endMillis = OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_(startMillis, durationMillis);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(startInstant);
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
}

void OrgJodaTimeBaseBasePeriod_initWithOrgJodaTimeReadableDuration_withOrgJodaTimeReadableInstant_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadableDuration> duration, id<OrgJodaTimeReadableInstant> endInstant, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  jlong durationMillis = OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
  jlong endMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(endInstant);
  jlong startMillis = OrgJodaTimeFieldFieldUtils_safeSubtractWithLong_withLong_(endMillis, durationMillis);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(endInstant);
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:startMillis withLong:endMillis]);
}

void OrgJodaTimeBaseBasePeriod_initWithLong_(OrgJodaTimeBaseBasePeriod *self, jlong duration) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  JreStrongAssign(&self->iType_, OrgJodaTimePeriodType_standard());
  IOSIntArray *values = [((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) getWithOrgJodaTimeReadablePeriod:OrgJodaTimeBaseBasePeriod_DUMMY_PERIOD withLong:duration];
  JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithLength:8]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, 0, self->iValues_, 4, 4);
}

void OrgJodaTimeBaseBasePeriod_initWithLong_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimeBaseBasePeriod *self, jlong duration, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, [((OrgJodaTimeChronology *) nil_chk(chrono)) getWithOrgJodaTimeReadablePeriod:self withLong:duration]);
}

void OrgJodaTimeBaseBasePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(OrgJodaTimeBaseBasePeriod *self, id period, OrgJodaTimePeriodType *type, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  id<OrgJodaTimeConvertPeriodConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPeriodConverterWithId:period];
  type = (type == nil ? [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) getPeriodTypeWithId:period] : type);
  type = [self checkPeriodTypeWithOrgJodaTimePeriodType:type];
  JreStrongAssign(&self->iType_, type);
  if ([OrgJodaTimeReadWritablePeriod_class_() isInstance:self]) {
    JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithLength:[self size]]);
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
    [((id<OrgJodaTimeConvertPeriodConverter>) nil_chk(converter)) setIntoWithOrgJodaTimeReadWritablePeriod:(id<OrgJodaTimeReadWritablePeriod>) cast_check(self, OrgJodaTimeReadWritablePeriod_class_()) withId:period withOrgJodaTimeChronology:chrono];
  }
  else {
    JreStrongAssign(&self->iValues_, [create_OrgJodaTimeMutablePeriod_initWithId_withOrgJodaTimePeriodType_withOrgJodaTimeChronology_(period, type, chrono) getValues]);
  }
}

void OrgJodaTimeBaseBasePeriod_initWithIntArray_withOrgJodaTimePeriodType_(OrgJodaTimeBaseBasePeriod *self, IOSIntArray *values, OrgJodaTimePeriodType *type) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
  JreStrongAssign(&self->iType_, type);
  JreStrongAssign(&self->iValues_, values);
}

void OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(OrgJodaTimeBaseBasePeriod *self, OrgJodaTimeDurationFieldType *type, IOSIntArray *values, jint newValue) {
  jint index = [self indexOfWithOrgJodaTimeDurationFieldType:type];
  if (index == -1) {
    if (newValue != 0) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"Period does not support field '", [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getName], '\''));
    }
  }
  else {
    *IOSIntArray_GetRef(nil_chk(values), index) = newValue;
  }
}

void OrgJodaTimeBaseBasePeriod_setPeriodInternalWithOrgJodaTimeReadablePeriod_(OrgJodaTimeBaseBasePeriod *self, id<OrgJodaTimeReadablePeriod> period) {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i < isize; i++) {
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    jint value = [period getValueWithInt:i];
    OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, type, newValues, value);
  }
  [self setValuesWithIntArray:newValues];
}

IOSIntArray *OrgJodaTimeBaseBasePeriod_setPeriodInternalWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeBaseBasePeriod *self, jint years, jint months, jint weeks, jint days, jint hours, jint minutes, jint seconds, jint millis) {
  IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size]];
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_years(), newValues, years);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_months(), newValues, months);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_weeks(), newValues, weeks);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_days(), newValues, days);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_hours(), newValues, hours);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_minutes(), newValues, minutes);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_seconds(), newValues, seconds);
  OrgJodaTimeBaseBasePeriod_checkAndUpdateWithOrgJodaTimeDurationFieldType_withIntArray_withInt_(self, OrgJodaTimeDurationFieldType_millis(), newValues, millis);
  return newValues;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBasePeriod)

@implementation OrgJodaTimeBaseBasePeriod_$1

- (jint)getValueWithInt:(jint)index {
  return 0;
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return OrgJodaTimePeriodType_time();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeBaseBasePeriod_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValueWithInt:", "getValue", "I", 0x1, NULL, NULL },
    { "getPeriodType", NULL, "Lorg.joda.time.PeriodType;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeBaseBasePeriod_$1 = { 2, "", "org.joda.time.base", "BasePeriod", 0x8008, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeBaseBasePeriod_$1;
}

@end

void OrgJodaTimeBaseBasePeriod_$1_init(OrgJodaTimeBaseBasePeriod_$1 *self) {
  OrgJodaTimeBaseAbstractPeriod_init(self);
}

OrgJodaTimeBaseBasePeriod_$1 *new_OrgJodaTimeBaseBasePeriod_$1_init() {
  OrgJodaTimeBaseBasePeriod_$1 *self = [OrgJodaTimeBaseBasePeriod_$1 alloc];
  OrgJodaTimeBaseBasePeriod_$1_init(self);
  return self;
}

OrgJodaTimeBaseBasePeriod_$1 *create_OrgJodaTimeBaseBasePeriod_$1_init() {
  OrgJodaTimeBaseBasePeriod_$1 *self = [[OrgJodaTimeBaseBasePeriod_$1 alloc] autorelease];
  OrgJodaTimeBaseBasePeriod_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeBaseBasePeriod_$1)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/ZonedChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeChronoZonedChronology_INCLUDE_ALL")
#ifdef OrgJodaTimeChronoZonedChronology_RESTRICT
#define OrgJodaTimeChronoZonedChronology_INCLUDE_ALL 0
#else
#define OrgJodaTimeChronoZonedChronology_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeChronoZonedChronology_RESTRICT

#if !defined (OrgJodaTimeChronoZonedChronology_) && (OrgJodaTimeChronoZonedChronology_INCLUDE_ALL || defined(OrgJodaTimeChronoZonedChronology_INCLUDE))
#define OrgJodaTimeChronoZonedChronology_

#define OrgJodaTimeChronoAssembledChronology_RESTRICT 1
#define OrgJodaTimeChronoAssembledChronology_INCLUDE 1
#include "org/joda/time/chrono/AssembledChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;

@interface OrgJodaTimeChronoZonedChronology : OrgJodaTimeChronoAssembledChronology

#pragma mark Public

- (jboolean)isEqual:(id)obj;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay;

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond;

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond;

+ (OrgJodaTimeChronoZonedChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                               withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTimeZone *)getZone;

- (NSUInteger)hash;

- (NSString *)description;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

+ (jboolean)useTimeArithmeticWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoZonedChronology)

FOUNDATION_EXPORT OrgJodaTimeChronoZonedChronology *OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT jboolean OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoZonedChronology)

#endif

#if !defined (OrgJodaTimeChronoZonedChronology_ZonedDurationField_) && (OrgJodaTimeChronoZonedChronology_INCLUDE_ALL || defined(OrgJodaTimeChronoZonedChronology_ZonedDurationField_INCLUDE))
#define OrgJodaTimeChronoZonedChronology_ZonedDurationField_

#define OrgJodaTimeFieldBaseDurationField_RESTRICT 1
#define OrgJodaTimeFieldBaseDurationField_INCLUDE 1
#include "org/joda/time/field/BaseDurationField.h"

@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;

@interface OrgJodaTimeChronoZonedChronology_ZonedDurationField : OrgJodaTimeFieldBaseDurationField {
 @public
  OrgJodaTimeDurationField *iField_;
  jboolean iTimeField_;
  OrgJodaTimeDateTimeZone *iZone_;
}

#pragma mark Public

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jboolean)isEqual:(id)obj;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant;

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant;

- (jlong)getUnitMillis;

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant;

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant;

- (NSUInteger)hash;

- (jboolean)isPrecise;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoZonedChronology_ZonedDurationField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDurationField, iField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDurationField, iZone_, OrgJodaTimeDateTimeZone *)

FOUNDATION_EXPORT void OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoZonedChronology_ZonedDurationField *new_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoZonedChronology_ZonedDurationField *create_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoZonedChronology_ZonedDurationField)

#endif

#if !defined (OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_) && (OrgJodaTimeChronoZonedChronology_INCLUDE_ALL || defined(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_INCLUDE))
#define OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_

#define OrgJodaTimeFieldBaseDateTimeField_RESTRICT 1
#define OrgJodaTimeFieldBaseDateTimeField_INCLUDE 1
#include "org/joda/time/field/BaseDateTimeField.h"

@class IOSIntArray;
@class JavaUtilLocale;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationField;
@protocol OrgJodaTimeReadablePartial;

@interface OrgJodaTimeChronoZonedChronology_ZonedDateTimeField : OrgJodaTimeFieldBaseDateTimeField {
 @public
  OrgJodaTimeDateTimeField *iField_;
  OrgJodaTimeDateTimeZone *iZone_;
  OrgJodaTimeDurationField *iDurationField_;
  jboolean iTimeField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
  OrgJodaTimeDurationField *iLeapDurationField_;
}

#pragma mark Public

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)value;

- (jboolean)isEqual:(id)obj;

- (jint)getWithLong:(jlong)instant;

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (OrgJodaTimeDurationField *)getDurationField;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumValue;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values;

- (jint)getMinimumValue;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (NSUInteger)hash;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jboolean)isLenient;

- (jlong)remainderWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iZone_, OrgJodaTimeDateTimeZone *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iRangeDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, iLeapDurationField_, OrgJodaTimeDurationField *)

FOUNDATION_EXPORT void OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField);

FOUNDATION_EXPORT OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *new_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *create_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField)

#endif

#pragma pop_macro("OrgJodaTimeChronoZonedChronology_INCLUDE_ALL")

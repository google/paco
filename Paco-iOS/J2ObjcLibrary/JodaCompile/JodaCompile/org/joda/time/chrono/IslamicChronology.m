//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/IslamicChronology.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicMonthOfYearDateTimeField.h"
#include "org/joda/time/chrono/BasicSingleEraDateTimeField.h"
#include "org/joda/time/chrono/IslamicChronology.h"
#include "org/joda/time/chrono/LimitChronology.h"
#include "org/joda/time/chrono/ZonedChronology.h"

@interface OrgJodaTimeChronoIslamicChronology () {
 @public
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *iLeapYears_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoIslamicChronology, iLeapYears_, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)

inline jlong OrgJodaTimeChronoIslamicChronology_get_serialVersionUID();
#define OrgJodaTimeChronoIslamicChronology_serialVersionUID -3663823829888LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, serialVersionUID, jlong)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoIslamicChronology_get_ERA_FIELD();
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoIslamicChronology_ERA_FIELD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoIslamicChronology, ERA_FIELD, OrgJodaTimeDateTimeField *)

inline jint OrgJodaTimeChronoIslamicChronology_get_MIN_YEAR();
#define OrgJodaTimeChronoIslamicChronology_MIN_YEAR -292269337
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MIN_YEAR, jint)

inline jint OrgJodaTimeChronoIslamicChronology_get_MAX_YEAR();
#define OrgJodaTimeChronoIslamicChronology_MAX_YEAR 292271022
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MAX_YEAR, jint)

inline jint OrgJodaTimeChronoIslamicChronology_get_MONTH_PAIR_LENGTH();
#define OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH 59
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MONTH_PAIR_LENGTH, jint)

inline jint OrgJodaTimeChronoIslamicChronology_get_LONG_MONTH_LENGTH();
#define OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, LONG_MONTH_LENGTH, jint)

inline jint OrgJodaTimeChronoIslamicChronology_get_SHORT_MONTH_LENGTH();
#define OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH 29
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, SHORT_MONTH_LENGTH, jint)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_MONTH_PAIR();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR 5097600000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_MONTH_PAIR, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_MONTH();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH 2551440384LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_MONTH, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_LONG_MONTH();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH 2592000000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_LONG_MONTH, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_YEAR();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR 30617280288LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_YEAR, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_SHORT_YEAR();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR 30585600000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_SHORT_YEAR, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_LONG_YEAR();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR 30672000000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_LONG_YEAR, jlong)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_YEAR_1();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 -42521587200000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_YEAR_1, jlong)

inline jint OrgJodaTimeChronoIslamicChronology_get_CYCLE();
#define OrgJodaTimeChronoIslamicChronology_CYCLE 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, CYCLE, jint)

inline jlong OrgJodaTimeChronoIslamicChronology_get_MILLIS_PER_CYCLE();
#define OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE 918518400000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology, MILLIS_PER_CYCLE, jlong)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoIslamicChronology_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoIslamicChronology_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoIslamicChronology, cCache, JavaUtilConcurrentConcurrentHashMap *)

inline OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_get_INSTANCE_UTC();
static OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoIslamicChronology, INSTANCE_UTC, OrgJodaTimeChronoIslamicChronology *)

@interface OrgJodaTimeChronoIslamicChronology_LeapYearPatternType ()

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_get_serialVersionUID();
#define OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_serialVersionUID 26581275372698LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoIslamicChronology)

OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN;
OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB;

@implementation OrgJodaTimeChronoIslamicChronology

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceUTC {
  return OrgJodaTimeChronoIslamicChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstance {
  return OrgJodaTimeChronoIslamicChronology_getInstance();
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoIslamicChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(zone, leapYears);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)leapYears {
  OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(self, base, param, leapYears);
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  return base == nil ? OrgJodaTimeChronoIslamicChronology_getInstanceUTC() : OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_([base getZone]);
}

- (OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *)getLeapYearPatternType {
  return iLeapYears_;
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology class]]) {
    OrgJodaTimeChronoIslamicChronology *chrono = (OrgJodaTimeChronoIslamicChronology *) cast_chk(obj, [OrgJodaTimeChronoIslamicChronology class]);
    return ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType]))->index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([((OrgJodaTimeChronoIslamicChronology *) nil_chk(chrono)) getLeapYearPatternType]))->index_ && [super isEqual:obj];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [super hash]) * 13 + ((jint) [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk([self getLeapYearPatternType])) hash]);
}

- (jint)getYearWithLong:(jlong)instant {
  jlong millisIslamic = instant - OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1;
  jlong cycles = millisIslamic / OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jlong cycleRemainder = millisIslamic % OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jint year = (jint) ((cycles * OrgJodaTimeChronoIslamicChronology_CYCLE) + 1LL);
  jlong yearMillis = ([self isLeapYearWithInt:year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  while (cycleRemainder >= yearMillis) {
    cycleRemainder -= yearMillis;
    yearMillis = ([self isLeapYearWithInt:++year] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return year;
}

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year {
  jint thisYear = [self getYearWithLong:instant];
  jint dayOfYear = [self getDayOfYearWithLong:instant withInt:thisYear];
  jint millisOfDay = [self getMillisOfDayWithLong:instant];
  if (dayOfYear > 354 && ![self isLeapYearWithInt:year]) {
    dayOfYear--;
  }
  instant = [self getYearMonthDayMillisWithInt:year withInt:1 withInt:dayOfYear];
  instant += millisOfDay;
  return instant;
}

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant {
  jint minuendYear = [self getYearWithLong:minuendInstant];
  jint subtrahendYear = [self getYearWithLong:subtrahendInstant];
  jlong minuendRem = minuendInstant - [self getYearMillisWithInt:minuendYear];
  jlong subtrahendRem = subtrahendInstant - [self getYearMillisWithInt:subtrahendYear];
  jint difference = minuendYear - subtrahendYear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month {
  if (--month % 2 == 1) {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR + OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH;
  }
  else {
    month /= 2;
    return month * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR;
  }
}

- (jint)getDayOfMonthWithLong:(jlong)millis {
  jint doy = [self getDayOfYearWithLong:millis] - 1;
  if (doy == 354) {
    return 30;
  }
  return (doy % OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) % OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH + 1;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  return [((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(iLeapYears_)) isLeapYearWithInt:year];
}

- (jint)getDaysInYearMax {
  return 355;
}

- (jint)getDaysInYearWithInt:(jint)year {
  return [self isLeapYearWithInt:year] ? 355 : 354;
}

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month {
  if (month == 12 && [self isLeapYearWithInt:year]) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (jint)getDaysInMonthMax {
  return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
}

- (jint)getDaysInMonthMaxWithInt:(jint)month {
  if (month == 12) {
    return OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH;
  }
  return (--month % 2 == 0 ? OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH : OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH);
}

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year {
  jint doyZeroBased = (jint) ((millis - [self getYearMillisWithInt:year]) / OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY);
  if (doyZeroBased == 354) {
    return 12;
  }
  return ((doyZeroBased * 2) / OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH) + 1;
}

- (jlong)getAverageMillisPerYear {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR / 2;
}

- (jlong)getAverageMillisPerMonth {
  return OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH;
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  if (year > OrgJodaTimeChronoIslamicChronology_MAX_YEAR) {
    @throw create_JavaLangArithmeticException_initWithNSString_(JreStrcat("$I$I", @"Year is too large: ", year, @" > ", OrgJodaTimeChronoIslamicChronology_MAX_YEAR));
  }
  if (year < OrgJodaTimeChronoIslamicChronology_MIN_YEAR) {
    @throw create_JavaLangArithmeticException_initWithNSString_(JreStrcat("$I$I", @"Year is too small: ", year, @" < ", OrgJodaTimeChronoIslamicChronology_MIN_YEAR));
  }
  year--;
  jlong cycle = year / OrgJodaTimeChronoIslamicChronology_CYCLE;
  jlong millis = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 + cycle * OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE;
  jint cycleRemainder = (year % OrgJodaTimeChronoIslamicChronology_CYCLE) + 1;
  for (jint i = 1; i < cycleRemainder; i++) {
    millis += ([self isLeapYearWithInt:i] ? OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR : OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR);
  }
  return millis;
}

- (jint)getMinYear {
  return 1;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoIslamicChronology_MAX_YEAR;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (-OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    JreStrongAssign(&((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->era_, OrgJodaTimeChronoIslamicChronology_ERA_FIELD);
    JreStrongAssignAndConsume(&fields->monthOfYear_, new_OrgJodaTimeChronoBasicMonthOfYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_withInt_(self, 12));
    JreStrongAssign(&fields->months_, [fields->monthOfYear_ getDurationField]);
  }
}

- (void)dealloc {
  RELEASE_(iLeapYears_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoIslamicChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_ERA_FIELD, new_OrgJodaTimeChronoBasicSingleEraDateTimeField_initWithNSString_(@"AH"));
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED, new_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(0, 623158436));
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED, new_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(1, 623191204));
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN, new_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(2, 690562340));
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB, new_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(3, 153692453));
    JreStrongAssignAndConsume(&OrgJodaTimeChronoIslamicChronology_cCache, new_JavaUtilConcurrentConcurrentHashMap_init());
    {
      JreStrongAssign(&OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC, OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoIslamicChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "getInstance", "Lorg.joda.time.chrono.IslamicChronology;", 0x9, NULL, NULL },
    { "initWithOrgJodaTimeChronology:withId:withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType:", "IslamicChronology", NULL, 0x0, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "getLeapYearPatternType", NULL, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", 0x1, NULL, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "getYearWithLong:", "getYear", "I", 0x0, NULL, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x0, NULL, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x0, NULL, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x0, NULL, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL, NULL },
    { "getDaysInYearMax", NULL, "I", 0x0, NULL, NULL },
    { "getDaysInYearWithInt:", "getDaysInYear", "I", 0x0, NULL, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x0, NULL, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x0, NULL, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x0, NULL, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_serialVersionUID },
    { "AH", "AH", 0x19, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_AH },
    { "ERA_FIELD", "ERA_FIELD", 0x1a, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoIslamicChronology_ERA_FIELD, NULL, .constantValue.asLong = 0 },
    { "LEAP_YEAR_15_BASED", "LEAP_YEAR_15_BASED", 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_15_BASED, NULL, .constantValue.asLong = 0 },
    { "LEAP_YEAR_16_BASED", "LEAP_YEAR_16_BASED", 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED, NULL, .constantValue.asLong = 0 },
    { "LEAP_YEAR_INDIAN", "LEAP_YEAR_INDIAN", 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_INDIAN, NULL, .constantValue.asLong = 0 },
    { "LEAP_YEAR_HABASH_AL_HASIB", "LEAP_YEAR_HABASH_AL_HASIB", 0x19, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", &OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_HABASH_AL_HASIB, NULL, .constantValue.asLong = 0 },
    { "MIN_YEAR", "MIN_YEAR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MIN_YEAR },
    { "MAX_YEAR", "MAX_YEAR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MAX_YEAR },
    { "MONTH_PAIR_LENGTH", "MONTH_PAIR_LENGTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_MONTH_PAIR_LENGTH },
    { "LONG_MONTH_LENGTH", "LONG_MONTH_LENGTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_LONG_MONTH_LENGTH },
    { "SHORT_MONTH_LENGTH", "SHORT_MONTH_LENGTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_SHORT_MONTH_LENGTH },
    { "MILLIS_PER_MONTH_PAIR", "MILLIS_PER_MONTH_PAIR", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH_PAIR },
    { "MILLIS_PER_MONTH", "MILLIS_PER_MONTH", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_MONTH },
    { "MILLIS_PER_LONG_MONTH", "MILLIS_PER_LONG_MONTH", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_MONTH },
    { "MILLIS_PER_YEAR", "MILLIS_PER_YEAR", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_SHORT_YEAR", "MILLIS_PER_SHORT_YEAR", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_SHORT_YEAR },
    { "MILLIS_PER_LONG_YEAR", "MILLIS_PER_LONG_YEAR", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_LONG_YEAR },
    { "MILLIS_YEAR_1", "MILLIS_YEAR_1", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_YEAR_1 },
    { "CYCLE", "CYCLE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoIslamicChronology_CYCLE },
    { "MILLIS_PER_CYCLE", "MILLIS_PER_CYCLE", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_MILLIS_PER_CYCLE },
    { "cCache", "cCache", 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoIslamicChronology_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/DateTimeZone;L[Lorg/joda/time/chrono/IslamicChronology;;>;", .constantValue.asLong = 0 },
    { "INSTANCE_UTC", "INSTANCE_UTC", 0x1a, "Lorg.joda.time.chrono.IslamicChronology;", &OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC, NULL, .constantValue.asLong = 0 },
    { "iLeapYears_", NULL, 0x12, "Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.chrono.IslamicChronology$LeapYearPatternType;"};
  static const J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology = { 2, "IslamicChronology", "org.joda.time.chrono", NULL, 0x11, 31, methods, 24, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgJodaTimeChronoIslamicChronology;
}

@end

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceUTC() {
  OrgJodaTimeChronoIslamicChronology_initialize();
  return OrgJodaTimeChronoIslamicChronology_INSTANCE_UTC;
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstance() {
  OrgJodaTimeChronoIslamicChronology_initialize();
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone_getDefault(), OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED);
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoIslamicChronology_initialize();
  return OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(zone, OrgJodaTimeChronoIslamicChronology_LEAP_YEAR_16_BASED);
}

OrgJodaTimeChronoIslamicChronology *OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeDateTimeZone *zone, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears) {
  OrgJodaTimeChronoIslamicChronology_initialize();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoIslamicChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoIslamicChronology_cCache)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:4 type:OrgJodaTimeChronoIslamicChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoIslamicChronology_cCache putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  chrono = IOSObjectArray_Get(nil_chk(chronos), ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(leapYears))->index_);
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(chronos, leapYears->index_);
      if (chrono == nil) {
        if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
          chrono = create_OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(nil, nil, leapYears);
          OrgJodaTimeDateTime *lowerLimit = create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(1, 1, 1, 0, 0, 0, 0, chrono);
          chrono = create_OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(chrono, lowerLimit, nil), nil, leapYears);
        }
        else {
          chrono = OrgJodaTimeChronoIslamicChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), leapYears);
          chrono = create_OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone), nil, leapYears);
        }
        IOSObjectArray_Set(chronos, leapYears->index_, chrono);
      }
    }
  }
  return chrono;
}

void OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeChronoIslamicChronology *self, OrgJodaTimeChronology *base, id param, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears) {
  OrgJodaTimeChronoBasicChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, 4);
  JreStrongAssign(&self->iLeapYears_, leapYears);
}

OrgJodaTimeChronoIslamicChronology *new_OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeChronology *base, id param, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears) {
  OrgJodaTimeChronoIslamicChronology *self = [OrgJodaTimeChronoIslamicChronology alloc];
  OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(self, base, param, leapYears);
  return self;
}

OrgJodaTimeChronoIslamicChronology *create_OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(OrgJodaTimeChronology *base, id param, OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *leapYears) {
  OrgJodaTimeChronoIslamicChronology *self = [[OrgJodaTimeChronoIslamicChronology alloc] autorelease];
  OrgJodaTimeChronoIslamicChronology_initWithOrgJodaTimeChronology_withId_withOrgJodaTimeChronoIslamicChronology_LeapYearPatternType_(self, base, param, leapYears);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoIslamicChronology)

@implementation OrgJodaTimeChronoIslamicChronology_LeapYearPatternType

- (instancetype)initWithInt:(jint)index
                    withInt:(jint)pattern {
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(self, index, pattern);
  return self;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  jint key = JreLShift32(1, (year % 30));
  return ((pattern_ & key) > 0);
}

- (id)readResolve {
  switch (index_) {
    case 0:
    return JreLoadStatic(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_15_BASED);
    case 1:
    return JreLoadStatic(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_16_BASED);
    case 2:
    return JreLoadStatic(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_INDIAN);
    case 3:
    return JreLoadStatic(OrgJodaTimeChronoIslamicChronology, LEAP_YEAR_HABASH_AL_HASIB);
    default:
    return self;
  }
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]]) {
    return index_ == ((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) nil_chk(((OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *) cast_chk(obj, [OrgJodaTimeChronoIslamicChronology_LeapYearPatternType class]))))->index_;
  }
  return false;
}

- (NSUInteger)hash {
  return index_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "LeapYearPatternType", NULL, 0x0, NULL, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_serialVersionUID },
    { "index_", NULL, 0x10, "B", NULL, NULL, .constantValue.asLong = 0 },
    { "pattern_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoIslamicChronology_LeapYearPatternType = { 2, "LeapYearPatternType", "org.joda.time.chrono", "IslamicChronology", 0x9, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType;
}

@end

void OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *self, jint index, jint pattern) {
  NSObject_init(self);
  self->index_ = (jbyte) index;
  self->pattern_ = pattern;
}

OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *new_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(jint index, jint pattern) {
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *self = [OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc];
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(self, index, pattern);
  return self;
}

OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *create_OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(jint index, jint pattern) {
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType *self = [[OrgJodaTimeChronoIslamicChronology_LeapYearPatternType alloc] autorelease];
  OrgJodaTimeChronoIslamicChronology_LeapYearPatternType_initWithInt_withInt_(self, index, pattern);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoIslamicChronology_LeapYearPatternType)

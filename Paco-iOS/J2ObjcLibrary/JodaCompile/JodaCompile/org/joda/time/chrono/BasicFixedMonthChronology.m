//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java
//

#include "J2ObjC_source.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicFixedMonthChronology.h"

inline jlong OrgJodaTimeChronoBasicFixedMonthChronology_get_serialVersionUID();
#define OrgJodaTimeChronoBasicFixedMonthChronology_serialVersionUID 261387371998LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicFixedMonthChronology, serialVersionUID, jlong)

@implementation OrgJodaTimeChronoBasicFixedMonthChronology

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  OrgJodaTimeChronoBasicFixedMonthChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

- (jlong)setYearWithLong:(jlong)instant
                 withInt:(jint)year {
  jint thisYear = [self getYearWithLong:instant];
  jint dayOfYear = [self getDayOfYearWithLong:instant withInt:thisYear];
  jint millisOfDay = [self getMillisOfDayWithLong:instant];
  if (dayOfYear > 365) {
    if (![self isLeapYearWithInt:year]) {
      dayOfYear--;
    }
  }
  instant = [self getYearMonthDayMillisWithInt:year withInt:1 withInt:dayOfYear];
  instant += millisOfDay;
  return instant;
}

- (jlong)getYearDifferenceWithLong:(jlong)minuendInstant
                          withLong:(jlong)subtrahendInstant {
  jint minuendYear = [self getYearWithLong:minuendInstant];
  jint subtrahendYear = [self getYearWithLong:subtrahendInstant];
  jlong minuendRem = minuendInstant - [self getYearMillisWithInt:minuendYear];
  jlong subtrahendRem = subtrahendInstant - [self getYearMillisWithInt:subtrahendYear];
  jint difference = minuendYear - subtrahendYear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (jlong)getTotalMillisByYearMonthWithInt:(jint)year
                                  withInt:(jint)month {
  return ((month - 1) * OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_MONTH);
}

- (jint)getDayOfMonthWithLong:(jlong)millis {
  return ([self getDayOfYearWithLong:millis] - 1) % OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH + 1;
}

- (jboolean)isLeapYearWithInt:(jint)year {
  return (year & 3) == 3;
}

- (jint)getDaysInYearMonthWithInt:(jint)year
                          withInt:(jint)month {
  return (month != 13) ? OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH : ([self isLeapYearWithInt:year] ? 6 : 5);
}

- (jint)getDaysInMonthMax {
  return OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH;
}

- (jint)getDaysInMonthMaxWithInt:(jint)month {
  return (month != 13 ? OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH : 6);
}

- (jint)getMonthOfYearWithLong:(jlong)millis {
  return ([self getDayOfYearWithLong:millis] - 1) / OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH + 1;
}

- (jint)getMonthOfYearWithLong:(jlong)millis
                       withInt:(jint)year {
  jlong monthZeroBased = (millis - [self getYearMillisWithInt:year]) / OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_MONTH;
  return ((jint) monthZeroBased) + 1;
}

- (jint)getMaxMonth {
  return 13;
}

- (jlong)getAverageMillisPerYear {
  return OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_YEAR;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_YEAR / 2;
}

- (jlong)getAverageMillisPerMonth {
  return OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_MONTH;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronology:withId:withInt:", "BasicFixedMonthChronology", NULL, 0x0, NULL, NULL },
    { "setYearWithLong:withInt:", "setYear", "J", 0x0, NULL, NULL },
    { "getYearDifferenceWithLong:withLong:", "getYearDifference", "J", 0x0, NULL, NULL },
    { "getTotalMillisByYearMonthWithInt:withInt:", "getTotalMillisByYearMonth", "J", 0x0, NULL, NULL },
    { "getDayOfMonthWithLong:", "getDayOfMonth", "I", 0x0, NULL, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL, NULL },
    { "getDaysInYearMonthWithInt:withInt:", "getDaysInYearMonth", "I", 0x0, NULL, NULL },
    { "getDaysInMonthMax", NULL, "I", 0x0, NULL, NULL },
    { "getDaysInMonthMaxWithInt:", "getDaysInMonthMax", "I", 0x0, NULL, NULL },
    { "getMonthOfYearWithLong:", "getMonthOfYear", "I", 0x0, NULL, NULL },
    { "getMonthOfYearWithLong:withInt:", "getMonthOfYear", "I", 0x0, NULL, NULL },
    { "getMaxMonth", NULL, "I", 0x0, NULL, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoBasicFixedMonthChronology_serialVersionUID },
    { "MONTH_LENGTH", "MONTH_LENGTH", 0x18, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoBasicFixedMonthChronology_MONTH_LENGTH },
    { "MILLIS_PER_YEAR", "MILLIS_PER_YEAR", 0x18, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_MONTH", "MILLIS_PER_MONTH", 0x18, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_MONTH },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicFixedMonthChronology = { 2, "BasicFixedMonthChronology", "org.joda.time.chrono", NULL, 0x400, 15, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoBasicFixedMonthChronology;
}

@end

void OrgJodaTimeChronoBasicFixedMonthChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoBasicFixedMonthChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoBasicChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicFixedMonthChronology)

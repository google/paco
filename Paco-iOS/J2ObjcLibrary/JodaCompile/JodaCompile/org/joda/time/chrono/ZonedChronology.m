//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/ZonedChronology.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/IllegalFieldValueException.h"
#include "org/joda/time/IllegalInstantException.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/ZonedChronology.h"
#include "org/joda/time/field/BaseDateTimeField.h"
#include "org/joda/time/field/BaseDurationField.h"

@interface OrgJodaTimeChronoZonedChronology ()

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (jlong)localToUTCWithLong:(jlong)localInstant;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

@end

inline jlong OrgJodaTimeChronoZonedChronology_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_serialVersionUID -1079258847191166848LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoZonedChronology_get_NEAR_ZERO();
#define OrgJodaTimeChronoZonedChronology_NEAR_ZERO 604800000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology, NEAR_ZERO, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone);

__attribute__((unused)) static OrgJodaTimeChronoZonedChronology *new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoZonedChronology *create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone);

__attribute__((unused)) static jlong OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(OrgJodaTimeChronoZonedChronology *self, jlong localInstant);

__attribute__((unused)) static OrgJodaTimeDurationField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted);

__attribute__((unused)) static OrgJodaTimeDateTimeField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted);

@interface OrgJodaTimeChronoZonedChronology_ZonedDurationField ()

- (jint)getOffsetToAddWithLong:(jlong)instant;

- (jint)getOffsetFromLocalToSubtractWithLong:(jlong)instant;

- (jlong)addOffsetWithLong:(jlong)instant;

@end

inline jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID -485345310999208286LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology_ZonedDurationField, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

__attribute__((unused)) static jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

@interface OrgJodaTimeChronoZonedChronology_ZonedDateTimeField ()

- (jint)getOffsetToAddWithLong:(jlong)instant;

@end

inline jlong OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID -3968986277775529794LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, jlong instant);

@implementation OrgJodaTimeChronoZonedChronology

+ (OrgJodaTimeChronoZonedChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                               withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(base, zone);
}

+ (jboolean)useTimeArithmeticWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(self, base, zone);
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return (OrgJodaTimeDateTimeZone *) cast_chk([self getParam], [OrgJodaTimeDateTimeZone class]);
}

- (OrgJodaTimeChronology *)withUTC {
  return [self getBase];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getParam]) {
    return self;
  }
  if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
    return [self getBase];
  }
  return create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_([self getBase], zone);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay]);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]);
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant + [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getOffsetWithLong:instant] withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]);
}

- (jlong)localToUTCWithLong:(jlong)localInstant {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, localInstant);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = create_JavaUtilHashMap_init();
  JreStrongAssign(&((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->eras_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->eras_, converted));
  JreStrongAssign(&fields->centuries_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->centuries_, converted));
  JreStrongAssign(&fields->years_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->years_, converted));
  JreStrongAssign(&fields->months_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->months_, converted));
  JreStrongAssign(&fields->weekyears_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weekyears_, converted));
  JreStrongAssign(&fields->weeks_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weeks_, converted));
  JreStrongAssign(&fields->days_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->days_, converted));
  JreStrongAssign(&fields->halfdays_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->halfdays_, converted));
  JreStrongAssign(&fields->hours_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->hours_, converted));
  JreStrongAssign(&fields->minutes_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->minutes_, converted));
  JreStrongAssign(&fields->seconds_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->seconds_, converted));
  JreStrongAssign(&fields->millis_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->millis_, converted));
  JreStrongAssign(&fields->year_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->year_, converted));
  JreStrongAssign(&fields->yearOfEra_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfEra_, converted));
  JreStrongAssign(&fields->yearOfCentury_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfCentury_, converted));
  JreStrongAssign(&fields->centuryOfEra_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->centuryOfEra_, converted));
  JreStrongAssign(&fields->era_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->era_, converted));
  JreStrongAssign(&fields->dayOfWeek_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfWeek_, converted));
  JreStrongAssign(&fields->dayOfMonth_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfMonth_, converted));
  JreStrongAssign(&fields->dayOfYear_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfYear_, converted));
  JreStrongAssign(&fields->monthOfYear_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->monthOfYear_, converted));
  JreStrongAssign(&fields->weekOfWeekyear_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekOfWeekyear_, converted));
  JreStrongAssign(&fields->weekyear_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyear_, converted));
  JreStrongAssign(&fields->weekyearOfCentury_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyearOfCentury_, converted));
  JreStrongAssign(&fields->millisOfSecond_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfSecond_, converted));
  JreStrongAssign(&fields->millisOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfDay_, converted));
  JreStrongAssign(&fields->secondOfMinute_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfMinute_, converted));
  JreStrongAssign(&fields->secondOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfDay_, converted));
  JreStrongAssign(&fields->minuteOfHour_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfHour_, converted));
  JreStrongAssign(&fields->minuteOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfDay_, converted));
  JreStrongAssign(&fields->hourOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfDay_, converted));
  JreStrongAssign(&fields->hourOfHalfday_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfHalfday_, converted));
  JreStrongAssign(&fields->clockhourOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfDay_, converted));
  JreStrongAssign(&fields->clockhourOfHalfday_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfHalfday_, converted));
  JreStrongAssign(&fields->halfdayOfDay_, OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->halfdayOfDay_, converted));
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, field, converted);
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, field, converted);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology class]] == false) {
    return false;
  }
  OrgJodaTimeChronoZonedChronology *chrono = (OrgJodaTimeChronoZonedChronology *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoZonedChronology *) nil_chk(chrono)) getBase]] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
}

- (NSUInteger)hash {
  return 326565 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) * 11 + ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
}

- (NSString *)description {
  return JreStrcat("$@$$C", @"ZonedChronology[", [self getBase], @", ", [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.ZonedChronology;", 0x9, NULL, NULL },
    { "useTimeArithmeticWithOrgJodaTimeDurationField:", "useTimeArithmetic", "Z", 0x8, NULL, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:", "ZonedChronology", NULL, 0x2, NULL, NULL },
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:", "getDateTimeMillis", "J", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "localToUTCWithLong:", "localToUTC", "J", 0x2, NULL, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL, NULL },
    { "convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DurationField;", 0x2, NULL, "(Lorg/joda/time/DurationField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DurationField;" },
    { "convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:", "convertField", "Lorg.joda.time.DateTimeField;", 0x2, NULL, "(Lorg/joda/time/DateTimeField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DateTimeField;" },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_serialVersionUID },
    { "NEAR_ZERO", "NEAR_ZERO", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_NEAR_ZERO },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.chrono.ZonedChronology$ZonedDurationField;", "Lorg.joda.time.chrono.ZonedChronology$ZonedDateTimeField;"};
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology = { 2, "ZonedChronology", "org.joda.time.chrono", NULL, 0x11, 16, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgJodaTimeChronoZonedChronology;
}

@end

OrgJodaTimeChronoZonedChronology *OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology_initialize();
  if (base == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must supply a chronology");
  }
  base = [((OrgJodaTimeChronology *) nil_chk(base)) withUTC];
  if (base == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"UTC chronology must not be null");
  }
  if (zone == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"DateTimeZone must not be null");
  }
  return create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(base, zone);
}

jboolean OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field) {
  OrgJodaTimeChronoZonedChronology_initialize();
  return field != nil && [field getUnitMillis] < OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR * 12;
}

void OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, zone);
}

OrgJodaTimeChronoZonedChronology *new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology *self = [OrgJodaTimeChronoZonedChronology alloc];
  OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(self, base, zone);
  return self;
}

OrgJodaTimeChronoZonedChronology *create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology *self = [[OrgJodaTimeChronoZonedChronology alloc] autorelease];
  OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(self, base, zone);
  return self;
}

jlong OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(OrgJodaTimeChronoZonedChronology *self, jlong localInstant) {
  if (localInstant == JavaLangLong_MAX_VALUE) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (localInstant == JavaLangLong_MIN_VALUE) {
    return JavaLangLong_MIN_VALUE;
  }
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetFromLocalWithLong:localInstant];
  jlong utcInstant = localInstant - offset;
  if (localInstant > OrgJodaTimeChronoZonedChronology_NEAR_ZERO && utcInstant < 0) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (localInstant < -OrgJodaTimeChronoZonedChronology_NEAR_ZERO && utcInstant > 0) {
    return JavaLangLong_MIN_VALUE;
  }
  jint offsetBasedOnUtc = [zone getOffsetWithLong:utcInstant];
  if (offset != offsetBasedOnUtc) {
    @throw create_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(localInstant, [zone getID]);
  }
  return utcInstant;
}

OrgJodaTimeDurationField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) cast_chk([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDurationField *zonedField = create_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(field, [self getZone]);
  [converted putWithId:field withId:zonedField];
  return zonedField;
}

OrgJodaTimeDateTimeField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) cast_chk([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *zonedField = create_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(field, [self getZone], OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField], converted), OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getRangeDurationField], converted), OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getLeapDurationField], converted));
  [converted putWithId:field withId:zonedField];
  return zonedField;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology)

@implementation OrgJodaTimeChronoZonedChronology_ZonedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(self, field, zone);
  return self;
}

- (jboolean)isPrecise {
  return iTimeField_ ? [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] : [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] && [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) isFixed];
}

- (jlong)getUnitMillis {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getUnitMillis];
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueWithLong:duration withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueAsLongWithLong:duration withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithInt:value withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithLong:value withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
  return instant - (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant));
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
  return instant - (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant));
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
}

- (jint)getOffsetFromLocalToSubtractWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant);
}

- (jlong)addOffsetWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDurationField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDurationField *other = (OrgJodaTimeChronoZonedChronology_ZonedDurationField *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology_ZonedDurationField class]);
    return [((OrgJodaTimeDurationField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDurationField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDurationField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

- (void)dealloc {
  RELEASE_(iField_);
  RELEASE_(iZone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDurationField:withOrgJodaTimeDateTimeZone:", "ZonedDurationField", NULL, 0x0, NULL, NULL },
    { "isPrecise", NULL, "Z", 0x1, NULL, NULL },
    { "getUnitMillis", NULL, "J", 0x1, NULL, NULL },
    { "getValueWithLong:withLong:", "getValue", "I", 0x1, NULL, NULL },
    { "getValueAsLongWithLong:withLong:", "getValueAsLong", "J", 0x1, NULL, NULL },
    { "getMillisWithInt:withLong:", "getMillis", "J", 0x1, NULL, NULL },
    { "getMillisWithLong:withLong:", "getMillis", "J", 0x1, NULL, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL, NULL },
    { "getOffsetToAddWithLong:", "getOffsetToAdd", "I", 0x2, NULL, NULL },
    { "getOffsetFromLocalToSubtractWithLong:", "getOffsetFromLocalToSubtract", "I", 0x2, NULL, NULL },
    { "addOffsetWithLong:", "addOffset", "J", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID },
    { "iField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iTimeField_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDurationField = { 2, "ZonedDurationField", "org.joda.time.chrono", "ZonedChronology", 0x8, 16, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoZonedChronology_ZonedDurationField;
}

@end

void OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeFieldBaseDurationField_initWithOrgJodaTimeDurationFieldType_(self, [((OrgJodaTimeDurationField *) nil_chk(field)) getType]);
  if (![field isSupported]) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  JreStrongAssign(&self->iField_, field);
  self->iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
  JreStrongAssign(&self->iZone_, zone);
}

OrgJodaTimeChronoZonedChronology_ZonedDurationField *new_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology_ZonedDurationField *self = [OrgJodaTimeChronoZonedChronology_ZonedDurationField alloc];
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(self, field, zone);
  return self;
}

OrgJodaTimeChronoZonedChronology_ZonedDurationField *create_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology_ZonedDurationField *self = [[OrgJodaTimeChronoZonedChronology_ZonedDurationField alloc] autorelease];
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(self, field, zone);
  return self;
}

jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return offset;
}

jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetFromLocalWithLong:instant];
  jlong diff = instant - offset;
  if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Subtracting time zone offset caused overflow");
  }
  return offset;
}

jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) convertUTCToLocalWithLong:instant];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology_ZonedDurationField)

@implementation OrgJodaTimeChronoZonedChronology_ZonedDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, field, zone, durationField, rangeDurationField, leapDurationField);
  return self;
}

- (jboolean)isLenient {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLenient];
}

- (jint)getWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getWithLong:localInstant];
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withLong:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withInt:value];
  jlong result = [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  if ([self getWithLong:result] != value) {
    OrgJodaTimeIllegalInstantException *cause = create_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(localInstant, [iZone_ getID]);
    OrgJodaTimeIllegalFieldValueException *ex = create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_([iField_ getType], JavaLangInteger_valueOfWithInt_(value), [cause getMessage]);
    [ex initCauseWithNSException:cause];
    @throw ex;
  }
  return result;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withNSString:text withJavaUtilLocale:locale];
  return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLeapWithLong:localInstant];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getLeapAmountWithLong:localInstant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)remainderWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) remainderWithLong:localInstant];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValue];
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithLong:localInstant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValue];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithLong:localInstant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *other = (OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]);
    return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_] && [((OrgJodaTimeDurationField *) nil_chk(iDurationField_)) isEqual:other->iDurationField_] && [((OrgJodaTimeDurationField *) nil_chk(iRangeDurationField_)) isEqual:other->iRangeDurationField_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

- (void)dealloc {
  RELEASE_(iField_);
  RELEASE_(iZone_);
  RELEASE_(iDurationField_);
  RELEASE_(iRangeDurationField_);
  RELEASE_(iLeapDurationField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeZone:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "ZonedDateTimeField", NULL, 0x0, NULL, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "getAsTextWithLong:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAsShortTextWithLong:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAsShortTextWithInt:withJavaUtilLocale:", "getAsShortText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x11, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMinimumValueWithLong:", "getMinimumValue", "I", 0x1, NULL, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:", "getMinimumValue", "I", 0x1, NULL, NULL },
    { "getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMinimumValue", "I", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumValueWithLong:", "getMaximumValue", "I", 0x1, NULL, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:", "getMaximumValue", "I", 0x1, NULL, NULL },
    { "getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:", "getMaximumValue", "I", 0x1, NULL, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL, NULL },
    { "getMaximumShortTextLengthWithJavaUtilLocale:", "getMaximumShortTextLength", "I", 0x1, NULL, NULL },
    { "getOffsetToAddWithLong:", "getOffsetToAdd", "I", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID },
    { "iField_", NULL, 0x10, "Lorg.joda.time.DateTimeField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iZone_", NULL, 0x10, "Lorg.joda.time.DateTimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "iDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iTimeField_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "iRangeDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iLeapDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDateTimeField = { 2, "ZonedDateTimeField", "org.joda.time.chrono", "ZonedChronology", 0x18, 35, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField;
}

@end

void OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  OrgJodaTimeFieldBaseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]);
  if (![field isSupported]) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  JreStrongAssign(&self->iField_, field);
  JreStrongAssign(&self->iZone_, zone);
  JreStrongAssign(&self->iDurationField_, durationField);
  self->iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(durationField);
  JreStrongAssign(&self->iRangeDurationField_, rangeDurationField);
  JreStrongAssign(&self->iLeapDurationField_, leapDurationField);
}

OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *new_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self = [OrgJodaTimeChronoZonedChronology_ZonedDateTimeField alloc];
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, field, zone, durationField, rangeDurationField, leapDurationField);
  return self;
}

OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *create_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self = [[OrgJodaTimeChronoZonedChronology_ZonedDateTimeField alloc] autorelease];
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, field, zone, durationField, rangeDurationField, leapDurationField);
  return self;
}

jint OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/field/SkipDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeFieldSkipDateTimeField_INCLUDE_ALL")
#ifdef OrgJodaTimeFieldSkipDateTimeField_RESTRICT
#define OrgJodaTimeFieldSkipDateTimeField_INCLUDE_ALL 0
#else
#define OrgJodaTimeFieldSkipDateTimeField_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeFieldSkipDateTimeField_RESTRICT

#if !defined (OrgJodaTimeFieldSkipDateTimeField_) && (OrgJodaTimeFieldSkipDateTimeField_INCLUDE_ALL || defined(OrgJodaTimeFieldSkipDateTimeField_INCLUDE))
#define OrgJodaTimeFieldSkipDateTimeField_

#define OrgJodaTimeFieldDelegatedDateTimeField_RESTRICT 1
#define OrgJodaTimeFieldDelegatedDateTimeField_INCLUDE 1
#include "org/joda/time/field/DelegatedDateTimeField.h"

@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;

@interface OrgJodaTimeFieldSkipDateTimeField : OrgJodaTimeFieldDelegatedDateTimeField

#pragma mark Public

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
                 withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                      withInt:(jint)skip;

- (jint)getWithLong:(jlong)millis;

- (jint)getMinimumValue;

- (jlong)setWithLong:(jlong)millis
             withInt:(jint)value;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeFieldSkipDateTimeField)

FOUNDATION_EXPORT void OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeFieldSkipDateTimeField *self, OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT OrgJodaTimeFieldSkipDateTimeField *new_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldSkipDateTimeField *create_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT void OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeFieldSkipDateTimeField *self, OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip);

FOUNDATION_EXPORT OrgJodaTimeFieldSkipDateTimeField *new_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeFieldSkipDateTimeField *create_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_withInt_(OrgJodaTimeChronology *chronology, OrgJodaTimeDateTimeField *field, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeFieldSkipDateTimeField)

#endif

#pragma pop_macro("OrgJodaTimeFieldSkipDateTimeField_INCLUDE_ALL")

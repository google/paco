//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/LocalDate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeLocalDate_INCLUDE_ALL")
#ifdef OrgJodaTimeLocalDate_RESTRICT
#define OrgJodaTimeLocalDate_INCLUDE_ALL 0
#else
#define OrgJodaTimeLocalDate_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeLocalDate_RESTRICT

#if !defined (OrgJodaTimeLocalDate_) && (OrgJodaTimeLocalDate_INCLUDE_ALL || defined(OrgJodaTimeLocalDate_INCLUDE))
#define OrgJodaTimeLocalDate_

#define OrgJodaTimeBaseBaseLocal_RESTRICT 1
#define OrgJodaTimeBaseBaseLocal_INCLUDE 1
#include "org/joda/time/base/BaseLocal.h"

#define OrgJodaTimeReadablePartial_RESTRICT 1
#define OrgJodaTimeReadablePartial_INCLUDE 1
#include "org/joda/time/ReadablePartial.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateMidnight;
@class OrgJodaTimeDateTime;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeDateTimeFieldType;
@class OrgJodaTimeDateTimeZone;
@class OrgJodaTimeDurationFieldType;
@class OrgJodaTimeFormatDateTimeFormatter;
@class OrgJodaTimeInterval;
@class OrgJodaTimeLocalDateTime;
@class OrgJodaTimeLocalDate_Property;
@class OrgJodaTimeLocalTime;
@protocol OrgJodaTimeReadablePeriod;

@interface OrgJodaTimeLocalDate : OrgJodaTimeBaseBaseLocal < OrgJodaTimeReadablePartial, JavaIoSerializable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth;

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

- (instancetype)initWithLong:(jlong)instant;

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (instancetype)initWithId:(id)instant;

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeLocalDate_Property *)centuryOfEra;

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial;

- (OrgJodaTimeLocalDate_Property *)dayOfMonth;

- (OrgJodaTimeLocalDate_Property *)dayOfWeek;

- (OrgJodaTimeLocalDate_Property *)dayOfYear;

- (jboolean)isEqual:(id)partial;

- (OrgJodaTimeLocalDate_Property *)era;

+ (OrgJodaTimeLocalDate *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

+ (OrgJodaTimeLocalDate *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date;

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

- (jint)getCenturyOfEra;

- (OrgJodaTimeChronology *)getChronology;

- (jint)getDayOfMonth;

- (jint)getDayOfWeek;

- (jint)getDayOfYear;

- (jint)getEra;

- (jint)getMonthOfYear;

- (jint)getValueWithInt:(jint)index;

- (jint)getWeekOfWeekyear;

- (jint)getWeekyear;

- (jint)getYear;

- (jint)getYearOfCentury;

- (jint)getYearOfEra;

- (NSUInteger)hash;

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type;

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type;

- (OrgJodaTimeLocalDate *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (OrgJodaTimeLocalDate *)minusDaysWithInt:(jint)days;

- (OrgJodaTimeLocalDate *)minusMonthsWithInt:(jint)months;

- (OrgJodaTimeLocalDate *)minusWeeksWithInt:(jint)weeks;

- (OrgJodaTimeLocalDate *)minusYearsWithInt:(jint)years;

- (OrgJodaTimeLocalDate_Property *)monthOfYear;

+ (OrgJodaTimeLocalDate *)now;

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology;

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str;

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter;

- (OrgJodaTimeLocalDate *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period;

- (OrgJodaTimeLocalDate *)plusDaysWithInt:(jint)days;

- (OrgJodaTimeLocalDate *)plusMonthsWithInt:(jint)months;

- (OrgJodaTimeLocalDate *)plusWeeksWithInt:(jint)weeks;

- (OrgJodaTimeLocalDate *)plusYearsWithInt:(jint)years;

- (OrgJodaTimeLocalDate_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType;

- (jint)size;

- (JavaUtilDate *)toDate;

- (OrgJodaTimeDateMidnight *)toDateMidnight;

- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time;

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime;

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTime *)toDateTimeAtMidnight;

- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDay;

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeInterval *)toInterval;

- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (OrgJodaTimeLocalDateTime *)toLocalDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time;

- (NSString *)description;

- (NSString *)toStringWithNSString:(NSString *)pattern;

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeLocalDate_Property *)weekOfWeekyear;

- (OrgJodaTimeLocalDate_Property *)weekyear;

- (OrgJodaTimeLocalDate *)withCenturyOfEraWithInt:(jint)centuryOfEra;

- (OrgJodaTimeLocalDate *)withDayOfMonthWithInt:(jint)dayOfMonth;

- (OrgJodaTimeLocalDate *)withDayOfWeekWithInt:(jint)dayOfWeek;

- (OrgJodaTimeLocalDate *)withDayOfYearWithInt:(jint)dayOfYear;

- (OrgJodaTimeLocalDate *)withEraWithInt:(jint)era;

- (OrgJodaTimeLocalDate *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value;

- (OrgJodaTimeLocalDate *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount;

- (OrgJodaTimeLocalDate *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (OrgJodaTimeLocalDate *)withMonthOfYearWithInt:(jint)monthOfYear;

- (OrgJodaTimeLocalDate *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar;

- (OrgJodaTimeLocalDate *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear;

- (OrgJodaTimeLocalDate *)withWeekyearWithInt:(jint)weekyear;

- (OrgJodaTimeLocalDate *)withYearWithInt:(jint)year;

- (OrgJodaTimeLocalDate *)withYearOfCenturyWithInt:(jint)yearOfCentury;

- (OrgJodaTimeLocalDate *)withYearOfEraWithInt:(jint)yearOfEra;

- (OrgJodaTimeLocalDate_Property *)year;

- (OrgJodaTimeLocalDate_Property *)yearOfCentury;

- (OrgJodaTimeLocalDate_Property *)yearOfEra;

#pragma mark Protected

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

- (jlong)getLocalMillis;

#pragma mark Package-Private

- (OrgJodaTimeLocalDate *)withLocalMillisWithLong:(jlong)newMillis;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeLocalDate)

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_now();

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_(NSString *str);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_init(OrgJodaTimeLocalDate *self);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_init();

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_(OrgJodaTimeLocalDate *self, jlong instant);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_(jlong instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_(jlong instant);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_(OrgJodaTimeLocalDate *self, id instant);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_(id instant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_(id instant);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth);

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology);

FOUNDATION_EXPORT OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalDate)

#endif

#if !defined (OrgJodaTimeLocalDate_Property_) && (OrgJodaTimeLocalDate_INCLUDE_ALL || defined(OrgJodaTimeLocalDate_Property_INCLUDE))
#define OrgJodaTimeLocalDate_Property_

#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_RESTRICT 1
#define OrgJodaTimeFieldAbstractReadableInstantFieldProperty_INCLUDE 1
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"

@class JavaUtilLocale;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeField;
@class OrgJodaTimeLocalDate;

@interface OrgJodaTimeLocalDate_Property : OrgJodaTimeFieldAbstractReadableInstantFieldProperty

#pragma mark Public

- (OrgJodaTimeLocalDate *)addToCopyWithInt:(jint)value;

- (OrgJodaTimeLocalDate *)addWrapFieldToCopyWithInt:(jint)value;

- (OrgJodaTimeDateTimeField *)getField;

- (OrgJodaTimeLocalDate *)getLocalDate;

- (OrgJodaTimeLocalDate *)roundCeilingCopy;

- (OrgJodaTimeLocalDate *)roundFloorCopy;

- (OrgJodaTimeLocalDate *)roundHalfCeilingCopy;

- (OrgJodaTimeLocalDate *)roundHalfEvenCopy;

- (OrgJodaTimeLocalDate *)roundHalfFloorCopy;

- (OrgJodaTimeLocalDate *)setCopyWithInt:(jint)value;

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text;

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeLocalDate *)withMaximumValue;

- (OrgJodaTimeLocalDate *)withMinimumValue;

#pragma mark Protected

- (OrgJodaTimeChronology *)getChronology;

- (jlong)getMillis;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeLocalDate:(OrgJodaTimeLocalDate *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeLocalDate_Property)

FOUNDATION_EXPORT void OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate_Property *self, OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field);

FOUNDATION_EXPORT OrgJodaTimeLocalDate_Property *new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeLocalDate_Property *create_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeLocalDate_Property)

#endif

#pragma pop_macro("OrgJodaTimeLocalDate_INCLUDE_ALL")

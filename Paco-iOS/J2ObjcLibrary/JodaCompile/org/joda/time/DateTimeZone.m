//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/DateTimeZone.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamException.h"
#include "java/io/Serializable.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/IllegalInstantException.h"
#include "org/joda/time/JodaTimePermission.h"
#include "org/joda/time/LocalDateTime.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/UTCDateTimeZone.h"
#include "org/joda/time/chrono/BaseChronology.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/DateTimeFormatterBuilder.h"
#include "org/joda/time/format/FormatUtils.h"
#include "org/joda/time/tz/DefaultNameProvider.h"
#include "org/joda/time/tz/FixedDateTimeZone.h"
#include "org/joda/time/tz/NameProvider.h"
#include "org/joda/time/tz/Provider.h"
#include "org/joda/time/tz/UTCProvider.h"
#include "org/joda/time/tz/ZoneInfoProvider.h"

@interface OrgJodaTimeDateTimeZone () {
 @public
  NSString *iID_;
}

+ (OrgJodaTimeDateTimeZone *)fixedOffsetZoneWithNSString:(NSString *)id_
                                                 withInt:(jint)offset;

+ (id<OrgJodaTimeTzProvider>)validateProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider;

+ (id<OrgJodaTimeTzProvider>)getDefaultProvider;

+ (id<OrgJodaTimeTzNameProvider>)getDefaultNameProvider;

+ (NSString *)getConvertedIdWithNSString:(NSString *)id_;

+ (jint)parseOffsetWithNSString:(NSString *)str;

+ (NSString *)printOffsetWithInt:(jint)offset;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeZone, iID_, NSString *)

inline jlong OrgJodaTimeDateTimeZone_get_serialVersionUID();
#define OrgJodaTimeDateTimeZone_serialVersionUID 5546345482340108586LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone, serialVersionUID, jlong)

inline jint OrgJodaTimeDateTimeZone_get_MAX_MILLIS();
#define OrgJodaTimeDateTimeZone_MAX_MILLIS 86399999
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone, MAX_MILLIS, jint)

inline JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_get_cProvider();
static JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_cProvider;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeZone, cProvider, JavaUtilConcurrentAtomicAtomicReference *)

inline JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_get_cNameProvider();
static JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_cNameProvider;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeZone, cNameProvider, JavaUtilConcurrentAtomicAtomicReference *)

inline JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_get_cDefault();
static JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeZone_cDefault;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeZone, cDefault, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(NSString *id_, jint offset);

__attribute__((unused)) static id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider);

__attribute__((unused)) static id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getDefaultProvider();

__attribute__((unused)) static id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getDefaultNameProvider();

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(NSString *id_);

__attribute__((unused)) static jint OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(NSString *str);

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_printOffsetWithInt_(jint offset);

__attribute__((unused)) static NSString *OrgJodaTimeDateTimeZone_getID(OrgJodaTimeDateTimeZone *self);

@interface OrgJodaTimeDateTimeZone_Stub : NSObject < JavaIoSerializable > {
 @public
  NSString *iID_;
}

- (instancetype)initWithNSString:(NSString *)id_;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (id)readResolve;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeDateTimeZone_Stub)

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeZone_Stub, iID_, NSString *)

inline jlong OrgJodaTimeDateTimeZone_Stub_get_serialVersionUID();
#define OrgJodaTimeDateTimeZone_Stub_serialVersionUID -6471952376487863581LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone_Stub, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_Stub_initWithNSString_(OrgJodaTimeDateTimeZone_Stub *self, NSString *id_);

__attribute__((unused)) static OrgJodaTimeDateTimeZone_Stub *new_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeDateTimeZone_Stub *create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeZone_Stub)

@interface OrgJodaTimeDateTimeZone_LazyInit ()

+ (OrgJodaTimeFormatDateTimeFormatter *)buildFormatter;

+ (id<JavaUtilMap>)buildMap;

@end

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_LazyInit_buildFormatter();

__attribute__((unused)) static id<JavaUtilMap> OrgJodaTimeDateTimeZone_LazyInit_buildMap();

@interface OrgJodaTimeDateTimeZone_LazyInit_$1 : OrgJodaTimeChronoBaseChronology

- (OrgJodaTimeDateTimeZone *)getZone;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeDateTimeZone_LazyInit_$1)

inline jlong OrgJodaTimeDateTimeZone_LazyInit_$1_get_serialVersionUID();
#define OrgJodaTimeDateTimeZone_LazyInit_$1_serialVersionUID -3128740902654445468LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeZone_LazyInit_$1, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeDateTimeZone_LazyInit_$1_init(OrgJodaTimeDateTimeZone_LazyInit_$1 *self);

__attribute__((unused)) static OrgJodaTimeDateTimeZone_LazyInit_$1 *new_OrgJodaTimeDateTimeZone_LazyInit_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeDateTimeZone_LazyInit_$1 *create_OrgJodaTimeDateTimeZone_LazyInit_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeZone_LazyInit_$1)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeDateTimeZone)

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_UTC;

@implementation OrgJodaTimeDateTimeZone

+ (OrgJodaTimeDateTimeZone *)getDefault {
  return OrgJodaTimeDateTimeZone_getDefault();
}

+ (void)setDefaultWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTimeZone_setDefaultWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeDateTimeZone *)forIDWithNSString:(NSString *)id_ {
  return OrgJodaTimeDateTimeZone_forIDWithNSString_(id_);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursWithInt:(jint)hoursOffset {
  return OrgJodaTimeDateTimeZone_forOffsetHoursWithInt_(hoursOffset);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetHoursMinutesWithInt:(jint)hoursOffset
                                                  withInt:(jint)minutesOffset {
  return OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(hoursOffset, minutesOffset);
}

+ (OrgJodaTimeDateTimeZone *)forOffsetMillisWithInt:(jint)millisOffset {
  return OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(millisOffset);
}

+ (OrgJodaTimeDateTimeZone *)forTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone {
  return OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(zone);
}

+ (OrgJodaTimeDateTimeZone *)fixedOffsetZoneWithNSString:(NSString *)id_
                                                 withInt:(jint)offset {
  return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, offset);
}

+ (id<JavaUtilSet>)getAvailableIDs {
  return OrgJodaTimeDateTimeZone_getAvailableIDs();
}

+ (id<OrgJodaTimeTzProvider>)getProvider {
  return OrgJodaTimeDateTimeZone_getProvider();
}

+ (void)setProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  OrgJodaTimeDateTimeZone_setProviderWithOrgJodaTimeTzProvider_(provider);
}

+ (id<OrgJodaTimeTzProvider>)validateProviderWithOrgJodaTimeTzProvider:(id<OrgJodaTimeTzProvider>)provider {
  return OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(provider);
}

+ (id<OrgJodaTimeTzProvider>)getDefaultProvider {
  return OrgJodaTimeDateTimeZone_getDefaultProvider();
}

+ (id<OrgJodaTimeTzNameProvider>)getNameProvider {
  return OrgJodaTimeDateTimeZone_getNameProvider();
}

+ (void)setNameProviderWithOrgJodaTimeTzNameProvider:(id<OrgJodaTimeTzNameProvider>)nameProvider {
  OrgJodaTimeDateTimeZone_setNameProviderWithOrgJodaTimeTzNameProvider_(nameProvider);
}

+ (id<OrgJodaTimeTzNameProvider>)getDefaultNameProvider {
  return OrgJodaTimeDateTimeZone_getDefaultNameProvider();
}

+ (NSString *)getConvertedIdWithNSString:(NSString *)id_ {
  return OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(id_);
}

+ (jint)parseOffsetWithNSString:(NSString *)str {
  return OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(str);
}

+ (NSString *)printOffsetWithInt:(jint)offset {
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
}

- (instancetype)initWithNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeZone_initWithNSString_(self, id_);
  return self;
}

- (NSString *)getID {
  return OrgJodaTimeDateTimeZone_getID(self);
}

- (NSString *)getNameKeyWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getShortNameWithLong:(jlong)instant {
  return [self getShortNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getShortNameWithLong:(jlong)instant
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name;
  id<OrgJodaTimeTzNameProvider> np = OrgJodaTimeDateTimeZone_getNameProvider();
  if ([np isKindOfClass:[OrgJodaTimeTzDefaultNameProvider class]]) {
    name = [((OrgJodaTimeTzDefaultNameProvider *) nil_chk(((OrgJodaTimeTzDefaultNameProvider *) cast_chk(np, [OrgJodaTimeTzDefaultNameProvider class])))) getShortNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey withBoolean:[self isStandardOffsetWithLong:instant]];
  }
  else {
    name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(np)) getShortNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  }
  if (name != nil) {
    return name;
  }
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_([self getOffsetWithLong:instant]);
}

- (NSString *)getNameWithLong:(jlong)instant {
  return [self getNameWithLong:instant withJavaUtilLocale:nil];
}

- (NSString *)getNameWithLong:(jlong)instant
           withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  NSString *nameKey = [self getNameKeyWithLong:instant];
  if (nameKey == nil) {
    return iID_;
  }
  NSString *name;
  id<OrgJodaTimeTzNameProvider> np = OrgJodaTimeDateTimeZone_getNameProvider();
  if ([np isKindOfClass:[OrgJodaTimeTzDefaultNameProvider class]]) {
    name = [((OrgJodaTimeTzDefaultNameProvider *) nil_chk(((OrgJodaTimeTzDefaultNameProvider *) cast_chk(np, [OrgJodaTimeTzDefaultNameProvider class])))) getNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey withBoolean:[self isStandardOffsetWithLong:instant]];
  }
  else {
    name = [((id<OrgJodaTimeTzNameProvider>) nil_chk(np)) getNameWithJavaUtilLocale:locale withNSString:iID_ withNSString:nameKey];
  }
  if (name != nil) {
    return name;
  }
  return OrgJodaTimeDateTimeZone_printOffsetWithInt_([self getOffsetWithLong:instant]);
}

- (jint)getOffsetWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getOffsetWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    return [self getOffsetWithLong:OrgJodaTimeDateTimeUtils_currentTimeMillis()];
  }
  return [self getOffsetWithLong:[((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getMillis]];
}

- (jint)getStandardOffsetWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isStandardOffsetWithLong:(jlong)instant {
  return [self getOffsetWithLong:instant] == [self getStandardOffsetWithLong:instant];
}

- (jint)getOffsetFromLocalWithLong:(jlong)instantLocal {
  jint offsetLocal = [self getOffsetWithLong:instantLocal];
  jlong instantAdjusted = instantLocal - offsetLocal;
  jint offsetAdjusted = [self getOffsetWithLong:instantAdjusted];
  if (offsetLocal != offsetAdjusted) {
    if ((offsetLocal - offsetAdjusted) < 0) {
      jlong nextLocal = [self nextTransitionWithLong:instantAdjusted];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      jlong nextAdjusted = [self nextTransitionWithLong:instantLocal - offsetAdjusted];
      if (nextAdjusted == (instantLocal - offsetAdjusted)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        return offsetLocal;
      }
    }
  }
  else if (offsetLocal >= 0) {
    jlong prev = [self previousTransitionWithLong:instantAdjusted];
    if (prev < instantAdjusted) {
      jint offsetPrev = [self getOffsetWithLong:prev];
      jint diff = offsetPrev - offsetLocal;
      if (instantAdjusted - prev <= diff) {
        return offsetPrev;
      }
    }
  }
  return offsetAdjusted;
}

- (jlong)convertUTCToLocalWithLong:(jlong)instantUTC {
  jint offset = [self getOffsetWithLong:instantUTC];
  jlong instantLocal = instantUTC + offset;
  if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return instantLocal;
}

- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict
                          withLong:(jlong)originalInstantUTC {
  jint offsetOriginal = [self getOffsetWithLong:originalInstantUTC];
  jlong instantUTC = instantLocal - offsetOriginal;
  jint offsetLocalFromOriginal = [self getOffsetWithLong:instantUTC];
  if (offsetLocalFromOriginal == offsetOriginal) {
    return instantUTC;
  }
  return [self convertLocalToUTCWithLong:instantLocal withBoolean:strict];
}

- (jlong)convertLocalToUTCWithLong:(jlong)instantLocal
                       withBoolean:(jboolean)strict {
  jint offsetLocal = [self getOffsetWithLong:instantLocal];
  jint offset = [self getOffsetWithLong:instantLocal - offsetLocal];
  if (offsetLocal != offset) {
    if (strict || offsetLocal < 0) {
      jlong nextLocal = [self nextTransitionWithLong:instantLocal - offsetLocal];
      if (nextLocal == (instantLocal - offsetLocal)) {
        nextLocal = JavaLangLong_MAX_VALUE;
      }
      jlong nextAdjusted = [self nextTransitionWithLong:instantLocal - offset];
      if (nextAdjusted == (instantLocal - offset)) {
        nextAdjusted = JavaLangLong_MAX_VALUE;
      }
      if (nextLocal != nextAdjusted) {
        if (strict) {
          @throw create_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(instantLocal, OrgJodaTimeDateTimeZone_getID(self));
        }
        else {
          offset = offsetLocal;
        }
      }
    }
  }
  jlong instantUTC = instantLocal - offset;
  if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
    @throw create_JavaLangArithmeticException_initWithNSString_(@"Subtracting time zone offset caused overflow");
  }
  return instantUTC;
}

- (jlong)getMillisKeepLocalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone
                                              withLong:(jlong)oldInstant {
  if (newZone == nil) {
    newZone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (newZone == self) {
    return oldInstant;
  }
  jlong instantLocal = [self convertUTCToLocalWithLong:oldInstant];
  return [((OrgJodaTimeDateTimeZone *) nil_chk(newZone)) convertLocalToUTCWithLong:instantLocal withBoolean:false withLong:oldInstant];
}

- (jboolean)isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)localDateTime {
  if ([self isFixed]) {
    return false;
  }
  @try {
    [((OrgJodaTimeLocalDateTime *) nil_chk(localDateTime)) toDateTimeWithOrgJodaTimeDateTimeZone:self];
    return false;
  }
  @catch (OrgJodaTimeIllegalInstantException *ex) {
    return true;
  }
}

- (jlong)adjustOffsetWithLong:(jlong)instant
                  withBoolean:(jboolean)earlierOrLater {
  jlong instantBefore = instant - 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong instantAfter = instant + 3 * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong offsetBefore = [self getOffsetWithLong:instantBefore];
  jlong offsetAfter = [self getOffsetWithLong:instantAfter];
  if (offsetBefore <= offsetAfter) {
    return instant;
  }
  jlong diff = offsetBefore - offsetAfter;
  jlong transition = [self nextTransitionWithLong:instantBefore];
  jlong overlapStart = transition - diff;
  jlong overlapEnd = transition + diff;
  if (instant < overlapStart || instant >= overlapEnd) {
    return instant;
  }
  jlong afterStart = instant - overlapStart;
  if (afterStart >= diff) {
    return earlierOrLater ? instant : instant - diff;
  }
  else {
    return earlierOrLater ? instant + diff : instant;
  }
}

- (jboolean)isFixed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)nextTransitionWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)previousTransitionWithLong:(jlong)instant {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilTimeZone *)toTimeZone {
  return JavaUtilTimeZone_getTimeZoneWithNSString_(iID_);
}

- (jboolean)isEqual:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  return 57 + ((jint) [((NSString *) nil_chk(OrgJodaTimeDateTimeZone_getID(self))) hash]);
}

- (NSString *)description {
  return OrgJodaTimeDateTimeZone_getID(self);
}

- (id)writeReplace {
  return create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(iID_);
}

- (void)dealloc {
  RELEASE_(iID_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeZone class]) {
    JreStrongAssign(&OrgJodaTimeDateTimeZone_UTC, JreLoadStatic(OrgJodaTimeUTCDateTimeZone, INSTANCE));
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeZone_cProvider, new_JavaUtilConcurrentAtomicAtomicReference_init());
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeZone_cNameProvider, new_JavaUtilConcurrentAtomicAtomicReference_init());
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeZone_cDefault, new_JavaUtilConcurrentAtomicAtomicReference_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeZone)
  }
}

+ (IOSObjectArray *)__annotations_forIDWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getID {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDefault", NULL, "Lorg.joda.time.DateTimeZone;", 0x9, NULL, NULL },
    { "setDefaultWithOrgJodaTimeDateTimeZone:", "setDefault", "V", 0x9, "Ljava.lang.SecurityException;", NULL },
    { "forIDWithNSString:", "forID", "Lorg.joda.time.DateTimeZone;", 0x9, NULL, NULL },
    { "forOffsetHoursWithInt:", "forOffsetHours", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.lang.IllegalArgumentException;", NULL },
    { "forOffsetHoursMinutesWithInt:withInt:", "forOffsetHoursMinutes", "Lorg.joda.time.DateTimeZone;", 0x9, "Ljava.lang.IllegalArgumentException;", NULL },
    { "forOffsetMillisWithInt:", "forOffsetMillis", "Lorg.joda.time.DateTimeZone;", 0x9, NULL, NULL },
    { "forTimeZoneWithJavaUtilTimeZone:", "forTimeZone", "Lorg.joda.time.DateTimeZone;", 0x9, NULL, NULL },
    { "fixedOffsetZoneWithNSString:withInt:", "fixedOffsetZone", "Lorg.joda.time.DateTimeZone;", 0xa, NULL, NULL },
    { "getAvailableIDs", NULL, "Ljava.util.Set;", 0x9, NULL, "()Ljava/util/Set<Ljava/lang/String;>;" },
    { "getProvider", NULL, "Lorg.joda.time.tz.Provider;", 0x9, NULL, NULL },
    { "setProviderWithOrgJodaTimeTzProvider:", "setProvider", "V", 0x9, "Ljava.lang.SecurityException;", NULL },
    { "validateProviderWithOrgJodaTimeTzProvider:", "validateProvider", "Lorg.joda.time.tz.Provider;", 0xa, NULL, NULL },
    { "getDefaultProvider", NULL, "Lorg.joda.time.tz.Provider;", 0xa, NULL, NULL },
    { "getNameProvider", NULL, "Lorg.joda.time.tz.NameProvider;", 0x9, NULL, NULL },
    { "setNameProviderWithOrgJodaTimeTzNameProvider:", "setNameProvider", "V", 0x9, "Ljava.lang.SecurityException;", NULL },
    { "getDefaultNameProvider", NULL, "Lorg.joda.time.tz.NameProvider;", 0xa, NULL, NULL },
    { "getConvertedIdWithNSString:", "getConvertedId", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "parseOffsetWithNSString:", "parseOffset", "I", 0xa, NULL, NULL },
    { "printOffsetWithInt:", "printOffset", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "initWithNSString:", "DateTimeZone", NULL, 0x4, NULL, NULL },
    { "getID", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNameKeyWithLong:", "getNameKey", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "getShortNameWithLong:", "getShortName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getShortNameWithLong:withJavaUtilLocale:", "getShortName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNameWithLong:", "getName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNameWithLong:withJavaUtilLocale:", "getName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOffsetWithLong:", "getOffset", "I", 0x401, NULL, NULL },
    { "getOffsetWithOrgJodaTimeReadableInstant:", "getOffset", "I", 0x11, NULL, NULL },
    { "getStandardOffsetWithLong:", "getStandardOffset", "I", 0x401, NULL, NULL },
    { "isStandardOffsetWithLong:", "isStandardOffset", "Z", 0x1, NULL, NULL },
    { "getOffsetFromLocalWithLong:", "getOffsetFromLocal", "I", 0x1, NULL, NULL },
    { "convertUTCToLocalWithLong:", "convertUTCToLocal", "J", 0x1, NULL, NULL },
    { "convertLocalToUTCWithLong:withBoolean:withLong:", "convertLocalToUTC", "J", 0x1, NULL, NULL },
    { "convertLocalToUTCWithLong:withBoolean:", "convertLocalToUTC", "J", 0x1, NULL, NULL },
    { "getMillisKeepLocalWithOrgJodaTimeDateTimeZone:withLong:", "getMillisKeepLocal", "J", 0x1, NULL, NULL },
    { "isLocalDateTimeGapWithOrgJodaTimeLocalDateTime:", "isLocalDateTimeGap", "Z", 0x1, NULL, NULL },
    { "adjustOffsetWithLong:withBoolean:", "adjustOffset", "J", 0x1, NULL, NULL },
    { "isFixed", NULL, "Z", 0x401, NULL, NULL },
    { "nextTransitionWithLong:", "nextTransition", "J", 0x401, NULL, NULL },
    { "previousTransitionWithLong:", "previousTransition", "J", 0x401, NULL, NULL },
    { "toTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x401, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "writeReplace", NULL, "Ljava.lang.Object;", 0x4, "Ljava.io.ObjectStreamException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_serialVersionUID },
    { "UTC", "UTC", 0x19, "Lorg.joda.time.DateTimeZone;", &OrgJodaTimeDateTimeZone_UTC, NULL, .constantValue.asLong = 0 },
    { "MAX_MILLIS", "MAX_MILLIS", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeDateTimeZone_MAX_MILLIS },
    { "cProvider", "cProvider", 0x1a, "Ljava.util.concurrent.atomic.AtomicReference;", &OrgJodaTimeDateTimeZone_cProvider, "Ljava/util/concurrent/atomic/AtomicReference<Lorg/joda/time/tz/Provider;>;", .constantValue.asLong = 0 },
    { "cNameProvider", "cNameProvider", 0x1a, "Ljava.util.concurrent.atomic.AtomicReference;", &OrgJodaTimeDateTimeZone_cNameProvider, "Ljava/util/concurrent/atomic/AtomicReference<Lorg/joda/time/tz/NameProvider;>;", .constantValue.asLong = 0 },
    { "cDefault", "cDefault", 0x1a, "Ljava.util.concurrent.atomic.AtomicReference;", &OrgJodaTimeDateTimeZone_cDefault, "Ljava/util/concurrent/atomic/AtomicReference<Lorg/joda/time/DateTimeZone;>;", .constantValue.asLong = 0 },
    { "iID_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.DateTimeZone$Stub;", "Lorg.joda.time.DateTimeZone$LazyInit;"};
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone = { 2, "DateTimeZone", "org.joda.time", NULL, 0x401, 45, methods, 7, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgJodaTimeDateTimeZone;
}

@end

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_getDefault() {
  OrgJodaTimeDateTimeZone_initialize();
  OrgJodaTimeDateTimeZone *zone = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cDefault)) get];
  if (zone == nil) {
    @try {
      @try {
        NSString *id_ = JavaLangSystem_getPropertyWithNSString_(@"user.timezone");
        if (id_ != nil) {
          zone = OrgJodaTimeDateTimeZone_forIDWithNSString_(id_);
        }
      }
      @catch (JavaLangRuntimeException *ex) {
      }
      if (zone == nil) {
        zone = OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(JavaUtilTimeZone_getDefault());
      }
    }
    @catch (JavaLangIllegalArgumentException *ex) {
    }
    if (zone == nil) {
      zone = OrgJodaTimeDateTimeZone_UTC;
    }
    if (![OrgJodaTimeDateTimeZone_cDefault compareAndSetWithId:nil withId:zone]) {
      zone = [OrgJodaTimeDateTimeZone_cDefault get];
    }
  }
  return zone;
}

void OrgJodaTimeDateTimeZone_setDefaultWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setDefault")];
  }
  if (zone == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The datetime zone must not be null");
  }
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cDefault)) setWithId:zone];
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forIDWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_initialize();
  if (id_ == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  if ([((NSString *) nil_chk(id_)) isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  OrgJodaTimeDateTimeZone *zone = [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_getProvider())) getZoneWithNSString:id_];
  if (zone != nil) {
    return zone;
  }
  if ([id_ hasPrefix:@"+"] || [id_ hasPrefix:@"-"]) {
    jint offset = OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(id_);
    if (offset == 0LL) {
      return OrgJodaTimeDateTimeZone_UTC;
    }
    else {
      id_ = OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
      return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, offset);
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The datetime zone id '", id_, @"' is not recognised"));
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursWithInt_(jint hoursOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  return OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(hoursOffset, 0);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetHoursMinutesWithInt_withInt_(jint hoursOffset, jint minutesOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  if (hoursOffset == 0 && minutesOffset == 0) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  if (hoursOffset < -23 || hoursOffset > 23) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Hours out of range: ", hoursOffset));
  }
  if (minutesOffset < -59 || minutesOffset > 59) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Minutes out of range: ", minutesOffset));
  }
  if (hoursOffset > 0 && minutesOffset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positive hours must not have negative minutes: ", minutesOffset));
  }
  jint offset = 0;
  @try {
    jint hoursInMinutes = hoursOffset * 60;
    if (hoursInMinutes < 0) {
      minutesOffset = hoursInMinutes - JavaLangMath_absWithInt_(minutesOffset);
    }
    else {
      minutesOffset = hoursInMinutes + minutesOffset;
    }
    offset = OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_(minutesOffset, OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE);
  }
  @catch (JavaLangArithmeticException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Offset is too large");
  }
  return OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(offset);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forOffsetMillisWithInt_(jint millisOffset) {
  OrgJodaTimeDateTimeZone_initialize();
  if (millisOffset < -OrgJodaTimeDateTimeZone_MAX_MILLIS || millisOffset > OrgJodaTimeDateTimeZone_MAX_MILLIS) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Millis out of range: ", millisOffset));
  }
  NSString *id_ = OrgJodaTimeDateTimeZone_printOffsetWithInt_(millisOffset);
  return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(id_, millisOffset);
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_forTimeZoneWithJavaUtilTimeZone_(JavaUtilTimeZone *zone) {
  OrgJodaTimeDateTimeZone_initialize();
  if (zone == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  NSString *id_ = [((JavaUtilTimeZone *) nil_chk(zone)) getID];
  if (id_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The TimeZone id must not be null");
  }
  if ([((NSString *) nil_chk(id_)) isEqual:@"UTC"]) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  OrgJodaTimeDateTimeZone *dtz = nil;
  NSString *convId = OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(id_);
  id<OrgJodaTimeTzProvider> provider = OrgJodaTimeDateTimeZone_getProvider();
  if (convId != nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(provider)) getZoneWithNSString:convId];
  }
  if (dtz == nil) {
    dtz = [((id<OrgJodaTimeTzProvider>) nil_chk(provider)) getZoneWithNSString:id_];
  }
  if (dtz != nil) {
    return dtz;
  }
  if (convId == nil) {
    convId = id_;
    if ([convId hasPrefix:@"GMT+"] || [convId hasPrefix:@"GMT-"]) {
      convId = [convId substring:3];
      jint offset = OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(convId);
      if (offset == 0LL) {
        return OrgJodaTimeDateTimeZone_UTC;
      }
      else {
        convId = OrgJodaTimeDateTimeZone_printOffsetWithInt_(offset);
        return OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(convId, offset);
      }
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"The datetime zone id '", id_, @"' is not recognised"));
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeZone_fixedOffsetZoneWithNSString_withInt_(NSString *id_, jint offset) {
  OrgJodaTimeDateTimeZone_initialize();
  if (offset == 0) {
    return OrgJodaTimeDateTimeZone_UTC;
  }
  return create_OrgJodaTimeTzFixedDateTimeZone_initWithNSString_withNSString_withInt_withInt_(id_, nil, offset, offset);
}

id<JavaUtilSet> OrgJodaTimeDateTimeZone_getAvailableIDs() {
  OrgJodaTimeDateTimeZone_initialize();
  return [((id<OrgJodaTimeTzProvider>) nil_chk(OrgJodaTimeDateTimeZone_getProvider())) getAvailableIDs];
}

id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  id<OrgJodaTimeTzProvider> provider = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cProvider)) get];
  if (provider == nil) {
    provider = OrgJodaTimeDateTimeZone_getDefaultProvider();
    if (![OrgJodaTimeDateTimeZone_cProvider compareAndSetWithId:nil withId:provider]) {
      provider = [OrgJodaTimeDateTimeZone_cProvider get];
    }
  }
  return provider;
}

void OrgJodaTimeDateTimeZone_setProviderWithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setProvider")];
  }
  if (provider == nil) {
    provider = OrgJodaTimeDateTimeZone_getDefaultProvider();
  }
  else {
    OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(provider);
  }
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cProvider)) setWithId:provider];
}

id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(id<OrgJodaTimeTzProvider> provider) {
  OrgJodaTimeDateTimeZone_initialize();
  id<JavaUtilSet> ids = [((id<OrgJodaTimeTzProvider>) nil_chk(provider)) getAvailableIDs];
  if (ids == nil || [ids size] == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The provider doesn't have any available ids");
  }
  if (![((id<JavaUtilSet>) nil_chk(ids)) containsWithId:@"UTC"]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The provider doesn't support UTC");
  }
  if (![((OrgJodaTimeDateTimeZone *) nil_chk(OrgJodaTimeDateTimeZone_UTC)) isEqual:[provider getZoneWithNSString:@"UTC"]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid UTC zone provided");
  }
  return provider;
}

id<OrgJodaTimeTzProvider> OrgJodaTimeDateTimeZone_getDefaultProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  @try {
    NSString *providerClass = JavaLangSystem_getPropertyWithNSString_(@"org.joda.time.DateTimeZone.Provider");
    if (providerClass != nil) {
      @try {
        id<OrgJodaTimeTzProvider> provider = (id<OrgJodaTimeTzProvider>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(providerClass))) newInstance], OrgJodaTimeTzProvider_class_());
        return OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(provider);
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithNSException_(ex);
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  @try {
    NSString *dataFolder = JavaLangSystem_getPropertyWithNSString_(@"org.joda.time.DateTimeZone.Folder");
    if (dataFolder != nil) {
      @try {
        id<OrgJodaTimeTzProvider> provider = create_OrgJodaTimeTzZoneInfoProvider_initWithJavaIoFile_(create_JavaIoFile_initWithNSString_(dataFolder));
        return OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(provider);
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithNSException_(ex);
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  @try {
    id<OrgJodaTimeTzProvider> provider = create_OrgJodaTimeTzZoneInfoProvider_initWithNSString_(@"org/joda/time/tz/data");
    return OrgJodaTimeDateTimeZone_validateProviderWithOrgJodaTimeTzProvider_(provider);
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
  return create_OrgJodaTimeTzUTCProvider_init();
}

id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getNameProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  id<OrgJodaTimeTzNameProvider> nameProvider = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider)) get];
  if (nameProvider == nil) {
    nameProvider = OrgJodaTimeDateTimeZone_getDefaultNameProvider();
    if (![OrgJodaTimeDateTimeZone_cNameProvider compareAndSetWithId:nil withId:nameProvider]) {
      nameProvider = [OrgJodaTimeDateTimeZone_cNameProvider get];
    }
  }
  return nameProvider;
}

void OrgJodaTimeDateTimeZone_setNameProviderWithOrgJodaTimeTzNameProvider_(id<OrgJodaTimeTzNameProvider> nameProvider) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"DateTimeZone.setNameProvider")];
  }
  if (nameProvider == nil) {
    nameProvider = OrgJodaTimeDateTimeZone_getDefaultNameProvider();
  }
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeZone_cNameProvider)) setWithId:nameProvider];
}

id<OrgJodaTimeTzNameProvider> OrgJodaTimeDateTimeZone_getDefaultNameProvider() {
  OrgJodaTimeDateTimeZone_initialize();
  id<OrgJodaTimeTzNameProvider> nameProvider = nil;
  @try {
    NSString *providerClass = JavaLangSystem_getPropertyWithNSString_(@"org.joda.time.DateTimeZone.NameProvider");
    if (providerClass != nil) {
      @try {
        nameProvider = (id<OrgJodaTimeTzNameProvider>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(providerClass))) newInstance], OrgJodaTimeTzNameProvider_class_());
      }
      @catch (JavaLangException *ex) {
        @throw create_JavaLangRuntimeException_initWithNSException_(ex);
      }
    }
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if (nameProvider == nil) {
    nameProvider = create_OrgJodaTimeTzDefaultNameProvider_init();
  }
  return nameProvider;
}

NSString *OrgJodaTimeDateTimeZone_getConvertedIdWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_initialize();
  return [((id<JavaUtilMap>) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone_LazyInit, CONVERSION_MAP))) getWithId:id_];
}

jint OrgJodaTimeDateTimeZone_parseOffsetWithNSString_(NSString *str) {
  OrgJodaTimeDateTimeZone_initialize();
  return -(jint) [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone_LazyInit, OFFSET_FORMATTER))) parseMillisWithNSString:str];
}

NSString *OrgJodaTimeDateTimeZone_printOffsetWithInt_(jint offset) {
  OrgJodaTimeDateTimeZone_initialize();
  JavaLangStringBuffer *buf = create_JavaLangStringBuffer_init();
  if (offset >= 0) {
    [buf appendWithChar:'+'];
  }
  else {
    [buf appendWithChar:'-'];
    offset = -offset;
  }
  jint hours = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, hours, 2);
  offset -= hours * (jint) OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jint minutes = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  [buf appendWithChar:':'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, minutes, 2);
  offset -= minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (offset == 0) {
    return [buf description];
  }
  jint seconds = offset / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  [buf appendWithChar:':'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, seconds, 2);
  offset -= seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (offset == 0) {
    return [buf description];
  }
  [buf appendWithChar:'.'];
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangStringBuffer_withInt_withInt_(buf, offset, 3);
  return [buf description];
}

void OrgJodaTimeDateTimeZone_initWithNSString_(OrgJodaTimeDateTimeZone *self, NSString *id_) {
  NSObject_init(self);
  if (id_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Id must not be null");
  }
  JreStrongAssign(&self->iID_, id_);
}

NSString *OrgJodaTimeDateTimeZone_getID(OrgJodaTimeDateTimeZone *self) {
  return self->iID_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone)

@implementation OrgJodaTimeDateTimeZone_Stub

- (instancetype)initWithNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeZone_Stub_initWithNSString_(self, id_);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeUTFWithNSString:iID_];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  JreStrongAssign(&iID_, [((JavaIoObjectInputStream *) nil_chk(inArg)) readUTF]);
}

- (id)readResolve {
  return OrgJodaTimeDateTimeZone_forIDWithNSString_(iID_);
}

- (void)dealloc {
  RELEASE_(iID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Stub", NULL, 0x0, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, "Ljava.io.ObjectStreamException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_Stub_serialVersionUID },
    { "iID_", NULL, 0x82, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone_Stub = { 2, "Stub", "org.joda.time", "DateTimeZone", 0x1a, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeZone_Stub;
}

@end

void OrgJodaTimeDateTimeZone_Stub_initWithNSString_(OrgJodaTimeDateTimeZone_Stub *self, NSString *id_) {
  NSObject_init(self);
  JreStrongAssign(&self->iID_, id_);
}

OrgJodaTimeDateTimeZone_Stub *new_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_Stub *self = [OrgJodaTimeDateTimeZone_Stub alloc];
  OrgJodaTimeDateTimeZone_Stub_initWithNSString_(self, id_);
  return self;
}

OrgJodaTimeDateTimeZone_Stub *create_OrgJodaTimeDateTimeZone_Stub_initWithNSString_(NSString *id_) {
  OrgJodaTimeDateTimeZone_Stub *self = [[OrgJodaTimeDateTimeZone_Stub alloc] autorelease];
  OrgJodaTimeDateTimeZone_Stub_initWithNSString_(self, id_);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone_Stub)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeDateTimeZone_LazyInit)

id<JavaUtilMap> OrgJodaTimeDateTimeZone_LazyInit_CONVERSION_MAP;
OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_LazyInit_OFFSET_FORMATTER;

@implementation OrgJodaTimeDateTimeZone_LazyInit

+ (OrgJodaTimeFormatDateTimeFormatter *)buildFormatter {
  return OrgJodaTimeDateTimeZone_LazyInit_buildFormatter();
}

+ (id<JavaUtilMap>)buildMap {
  return OrgJodaTimeDateTimeZone_LazyInit_buildMap();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTimeZone_LazyInit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeZone_LazyInit class]) {
    JreStrongAssign(&OrgJodaTimeDateTimeZone_LazyInit_CONVERSION_MAP, OrgJodaTimeDateTimeZone_LazyInit_buildMap());
    JreStrongAssign(&OrgJodaTimeDateTimeZone_LazyInit_OFFSET_FORMATTER, OrgJodaTimeDateTimeZone_LazyInit_buildFormatter());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeZone_LazyInit)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "buildFormatter", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0xa, NULL, NULL },
    { "buildMap", NULL, "Ljava.util.Map;", 0xa, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONVERSION_MAP", "CONVERSION_MAP", 0x18, "Ljava.util.Map;", &OrgJodaTimeDateTimeZone_LazyInit_CONVERSION_MAP, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "OFFSET_FORMATTER", "OFFSET_FORMATTER", 0x18, "Lorg.joda.time.format.DateTimeFormatter;", &OrgJodaTimeDateTimeZone_LazyInit_OFFSET_FORMATTER, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone_LazyInit = { 2, "LazyInit", "org.joda.time", "DateTimeZone", 0x18, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeZone_LazyInit;
}

@end

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeDateTimeZone_LazyInit_buildFormatter() {
  OrgJodaTimeDateTimeZone_LazyInit_initialize();
  OrgJodaTimeChronology *chrono = create_OrgJodaTimeDateTimeZone_LazyInit_$1_init();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk([create_OrgJodaTimeFormatDateTimeFormatterBuilder_init() appendTimeZoneOffsetWithNSString:nil withBoolean:true withInt:2 withInt:4])) toFormatter])) withChronologyWithOrgJodaTimeChronology:chrono];
}

id<JavaUtilMap> OrgJodaTimeDateTimeZone_LazyInit_buildMap() {
  OrgJodaTimeDateTimeZone_LazyInit_initialize();
  id<JavaUtilMap> map = create_JavaUtilHashMap_init();
  [map putWithId:@"GMT" withId:@"UTC"];
  [map putWithId:@"WET" withId:@"WET"];
  [map putWithId:@"CET" withId:@"CET"];
  [map putWithId:@"MET" withId:@"CET"];
  [map putWithId:@"ECT" withId:@"CET"];
  [map putWithId:@"EET" withId:@"EET"];
  [map putWithId:@"MIT" withId:@"Pacific/Apia"];
  [map putWithId:@"HST" withId:@"Pacific/Honolulu"];
  [map putWithId:@"AST" withId:@"America/Anchorage"];
  [map putWithId:@"PST" withId:@"America/Los_Angeles"];
  [map putWithId:@"MST" withId:@"America/Denver"];
  [map putWithId:@"PNT" withId:@"America/Phoenix"];
  [map putWithId:@"CST" withId:@"America/Chicago"];
  [map putWithId:@"EST" withId:@"America/New_York"];
  [map putWithId:@"IET" withId:@"America/Indiana/Indianapolis"];
  [map putWithId:@"PRT" withId:@"America/Puerto_Rico"];
  [map putWithId:@"CNT" withId:@"America/St_Johns"];
  [map putWithId:@"AGT" withId:@"America/Argentina/Buenos_Aires"];
  [map putWithId:@"BET" withId:@"America/Sao_Paulo"];
  [map putWithId:@"ART" withId:@"Africa/Cairo"];
  [map putWithId:@"CAT" withId:@"Africa/Harare"];
  [map putWithId:@"EAT" withId:@"Africa/Addis_Ababa"];
  [map putWithId:@"NET" withId:@"Asia/Yerevan"];
  [map putWithId:@"PLT" withId:@"Asia/Karachi"];
  [map putWithId:@"IST" withId:@"Asia/Kolkata"];
  [map putWithId:@"BST" withId:@"Asia/Dhaka"];
  [map putWithId:@"VST" withId:@"Asia/Ho_Chi_Minh"];
  [map putWithId:@"CTT" withId:@"Asia/Shanghai"];
  [map putWithId:@"JST" withId:@"Asia/Tokyo"];
  [map putWithId:@"ACT" withId:@"Australia/Darwin"];
  [map putWithId:@"AET" withId:@"Australia/Sydney"];
  [map putWithId:@"SST" withId:@"Pacific/Guadalcanal"];
  [map putWithId:@"NST" withId:@"Pacific/Auckland"];
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
}

void OrgJodaTimeDateTimeZone_LazyInit_init(OrgJodaTimeDateTimeZone_LazyInit *self) {
  NSObject_init(self);
}

OrgJodaTimeDateTimeZone_LazyInit *new_OrgJodaTimeDateTimeZone_LazyInit_init() {
  OrgJodaTimeDateTimeZone_LazyInit *self = [OrgJodaTimeDateTimeZone_LazyInit alloc];
  OrgJodaTimeDateTimeZone_LazyInit_init(self);
  return self;
}

OrgJodaTimeDateTimeZone_LazyInit *create_OrgJodaTimeDateTimeZone_LazyInit_init() {
  OrgJodaTimeDateTimeZone_LazyInit *self = [[OrgJodaTimeDateTimeZone_LazyInit alloc] autorelease];
  OrgJodaTimeDateTimeZone_LazyInit_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone_LazyInit)

@implementation OrgJodaTimeDateTimeZone_LazyInit_$1

- (OrgJodaTimeDateTimeZone *)getZone {
  return nil;
}

- (OrgJodaTimeChronology *)withUTC {
  return self;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return self;
}

- (NSString *)description {
  return [[self getClass] getName];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTimeZone_LazyInit_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getZone", NULL, "Lorg.joda.time.DateTimeZone;", 0x1, NULL, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeDateTimeZone_LazyInit_$1_serialVersionUID },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgJodaTimeDateTimeZone_LazyInit", "buildFormatter" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeZone_LazyInit_$1 = { 2, "", "org.joda.time", "DateTimeZone$LazyInit", 0x8008, 5, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgJodaTimeDateTimeZone_LazyInit_$1;
}

@end

void OrgJodaTimeDateTimeZone_LazyInit_$1_init(OrgJodaTimeDateTimeZone_LazyInit_$1 *self) {
  OrgJodaTimeChronoBaseChronology_init(self);
}

OrgJodaTimeDateTimeZone_LazyInit_$1 *new_OrgJodaTimeDateTimeZone_LazyInit_$1_init() {
  OrgJodaTimeDateTimeZone_LazyInit_$1 *self = [OrgJodaTimeDateTimeZone_LazyInit_$1 alloc];
  OrgJodaTimeDateTimeZone_LazyInit_$1_init(self);
  return self;
}

OrgJodaTimeDateTimeZone_LazyInit_$1 *create_OrgJodaTimeDateTimeZone_LazyInit_$1_init() {
  OrgJodaTimeDateTimeZone_LazyInit_$1 *self = [[OrgJodaTimeDateTimeZone_LazyInit_$1 alloc] autorelease];
  OrgJodaTimeDateTimeZone_LazyInit_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeZone_LazyInit_$1)

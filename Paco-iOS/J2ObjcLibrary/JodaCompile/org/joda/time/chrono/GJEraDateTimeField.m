//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/util/Locale.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/GJEraDateTimeField.h"
#include "org/joda/time/chrono/GJLocaleSymbols.h"
#include "org/joda/time/field/BaseDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/UnsupportedDurationField.h"

@interface OrgJodaTimeChronoGJEraDateTimeField () {
 @public
  OrgJodaTimeChronoBasicChronology *iChronology_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJEraDateTimeField, iChronology_, OrgJodaTimeChronoBasicChronology *)

inline jlong OrgJodaTimeChronoGJEraDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoGJEraDateTimeField_serialVersionUID 4240986525305515528LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGJEraDateTimeField, serialVersionUID, jlong)

@implementation OrgJodaTimeChronoGJEraDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

- (jboolean)isLenient {
  return false;
}

- (jint)getWithLong:(jlong)instant {
  if ([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant] <= 0) {
    return OrgJodaTimeDateTimeConstants_BCE;
  }
  else {
    return OrgJodaTimeDateTimeConstants_CE;
  }
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) eraValueToTextWithInt:fieldValue];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)era {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, era, OrgJodaTimeDateTimeConstants_BCE, OrgJodaTimeDateTimeConstants_CE);
  jint oldEra = [self getWithLong:instant];
  if (oldEra != era) {
    jint year = [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getYearWithLong:instant];
    return [iChronology_ setYearWithLong:instant withInt:-year];
  }
  else {
    return instant;
  }
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self setWithLong:instant withInt:[((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) eraTextToValueWithNSString:text]];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if ([self getWithLong:instant] == OrgJodaTimeDateTimeConstants_CE) {
    return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) setYearWithLong:0 withInt:1];
  }
  else {
    return JavaLangLong_MIN_VALUE;
  }
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if ([self getWithLong:instant] == OrgJodaTimeDateTimeConstants_BCE) {
    return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) setYearWithLong:0 withInt:1];
  }
  else {
    return JavaLangLong_MAX_VALUE;
  }
}

- (jlong)roundHalfFloorWithLong:(jlong)instant {
  return [self roundFloorWithLong:instant];
}

- (jlong)roundHalfCeilingWithLong:(jlong)instant {
  return [self roundFloorWithLong:instant];
}

- (jlong)roundHalfEvenWithLong:(jlong)instant {
  return [self roundFloorWithLong:instant];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return OrgJodaTimeFieldUnsupportedDurationField_getInstanceWithOrgJodaTimeDurationFieldType_(OrgJodaTimeDurationFieldType_eras());
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (jint)getMinimumValue {
  return OrgJodaTimeDateTimeConstants_BCE;
}

- (jint)getMaximumValue {
  return OrgJodaTimeDateTimeConstants_CE;
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeChronoGJLocaleSymbols *) nil_chk(OrgJodaTimeChronoGJLocaleSymbols_forLocaleWithJavaUtilLocale_(locale))) getEraMaxTextLength];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) era];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:", "GJEraDateTimeField", NULL, 0x0, NULL, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "getAsTextWithInt:withJavaUtilLocale:", "getAsText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "setWithLong:withNSString:withJavaUtilLocale:", "set", "J", 0x1, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL, NULL },
    { "roundHalfFloorWithLong:", "roundHalfFloor", "J", 0x1, NULL, NULL },
    { "roundHalfCeilingWithLong:", "roundHalfCeiling", "J", 0x1, NULL, NULL },
    { "roundHalfEvenWithLong:", "roundHalfEven", "J", 0x1, NULL, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumTextLengthWithJavaUtilLocale:", "getMaximumTextLength", "I", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoGJEraDateTimeField_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJEraDateTimeField = { 2, "GJEraDateTimeField", "org.joda.time.chrono", NULL, 0x10, 17, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoGJEraDateTimeField;
}

@end

void OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoGJEraDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeFieldBaseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_(self, OrgJodaTimeDateTimeFieldType_era());
  JreStrongAssign(&self->iChronology_, chronology);
}

OrgJodaTimeChronoGJEraDateTimeField *new_OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeChronoGJEraDateTimeField *self = [OrgJodaTimeChronoGJEraDateTimeField alloc];
  OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

OrgJodaTimeChronoGJEraDateTimeField *create_OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeChronoGJEraDateTimeField *self = [[OrgJodaTimeChronoGJEraDateTimeField alloc] autorelease];
  OrgJodaTimeChronoGJEraDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJEraDateTimeField)

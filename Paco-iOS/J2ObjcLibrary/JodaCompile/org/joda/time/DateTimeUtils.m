//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/DateTimeUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/text/DateFormatSymbols.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/Interval.h"
#include "org/joda/time/JodaTimePermission.h"
#include "org/joda/time/PeriodType.h"
#include "org/joda/time/ReadableDuration.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadableInterval.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/chrono/ISOChronology.h"

@interface OrgJodaTimeDateTimeUtils ()

+ (void)checkPermission;

+ (id<JavaUtilMap>)buildDefaultTimeZoneNames;

+ (void)putWithJavaUtilMap:(id<JavaUtilMap>)map
              withNSString:(NSString *)name
              withNSString:(NSString *)id_;

@end

inline OrgJodaTimeDateTimeUtils_SystemMillisProvider *OrgJodaTimeDateTimeUtils_get_SYSTEM_MILLIS_PROVIDER();
static OrgJodaTimeDateTimeUtils_SystemMillisProvider *OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeUtils, SYSTEM_MILLIS_PROVIDER, OrgJodaTimeDateTimeUtils_SystemMillisProvider *)

inline id<OrgJodaTimeDateTimeUtils_MillisProvider> OrgJodaTimeDateTimeUtils_get_cMillisProvider();
inline id<OrgJodaTimeDateTimeUtils_MillisProvider> OrgJodaTimeDateTimeUtils_set_cMillisProvider(id<OrgJodaTimeDateTimeUtils_MillisProvider> value);
static volatile_id OrgJodaTimeDateTimeUtils_cMillisProvider;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(OrgJodaTimeDateTimeUtils, cMillisProvider, id<OrgJodaTimeDateTimeUtils_MillisProvider>)

inline JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeUtils_get_cZoneNames();
static JavaUtilConcurrentAtomicAtomicReference *OrgJodaTimeDateTimeUtils_cZoneNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeUtils, cZoneNames, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void OrgJodaTimeDateTimeUtils_checkPermission();

__attribute__((unused)) static id<JavaUtilMap> OrgJodaTimeDateTimeUtils_buildDefaultTimeZoneNames();

__attribute__((unused)) static void OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(id<JavaUtilMap> map, NSString *name, NSString *id_);

@interface OrgJodaTimeDateTimeUtils_MillisProvider : NSObject

@end

@interface OrgJodaTimeDateTimeUtils_FixedMillisProvider () {
 @public
  jlong iMillis_;
}

@end

@interface OrgJodaTimeDateTimeUtils_OffsetMillisProvider () {
 @public
  jlong iMillis_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeDateTimeUtils)

@implementation OrgJodaTimeDateTimeUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTimeUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jlong)currentTimeMillis {
  return OrgJodaTimeDateTimeUtils_currentTimeMillis();
}

+ (void)setCurrentMillisSystem {
  OrgJodaTimeDateTimeUtils_setCurrentMillisSystem();
}

+ (void)setCurrentMillisFixedWithLong:(jlong)fixedMillis {
  OrgJodaTimeDateTimeUtils_setCurrentMillisFixedWithLong_(fixedMillis);
}

+ (void)setCurrentMillisOffsetWithLong:(jlong)offsetMillis {
  OrgJodaTimeDateTimeUtils_setCurrentMillisOffsetWithLong_(offsetMillis);
}

+ (void)setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:(id<OrgJodaTimeDateTimeUtils_MillisProvider>)millisProvider {
  OrgJodaTimeDateTimeUtils_setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider_(millisProvider);
}

+ (void)checkPermission {
  OrgJodaTimeDateTimeUtils_checkPermission();
}

+ (jlong)getInstantMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  return OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
}

+ (OrgJodaTimeChronology *)getInstantChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  return OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                                withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

+ (OrgJodaTimeChronology *)getIntervalChronologyWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInterval_(interval);
}

+ (id<OrgJodaTimeReadableInterval>)getReadableIntervalWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeDateTimeUtils_getReadableIntervalWithOrgJodaTimeReadableInterval_(interval);
}

+ (OrgJodaTimeChronology *)getChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
}

+ (OrgJodaTimeDateTimeZone *)getZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimePeriodType *)getPeriodTypeWithOrgJodaTimePeriodType:(OrgJodaTimePeriodType *)type {
  return OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(type);
}

+ (jlong)getDurationMillisWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(duration);
}

+ (jboolean)isContiguousWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(partial);
}

+ (JavaTextDateFormatSymbols *)getDateFormatSymbolsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(locale);
}

+ (id<JavaUtilMap>)getDefaultTimeZoneNames {
  return OrgJodaTimeDateTimeUtils_getDefaultTimeZoneNames();
}

+ (void)setDefaultTimeZoneNamesWithJavaUtilMap:(id<JavaUtilMap>)names {
  OrgJodaTimeDateTimeUtils_setDefaultTimeZoneNamesWithJavaUtilMap_(names);
}

+ (id<JavaUtilMap>)buildDefaultTimeZoneNames {
  return OrgJodaTimeDateTimeUtils_buildDefaultTimeZoneNames();
}

+ (void)putWithJavaUtilMap:(id<JavaUtilMap>)map
              withNSString:(NSString *)name
              withNSString:(NSString *)id_ {
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, name, id_);
}

+ (jdouble)toJulianDayWithLong:(jlong)epochMillis {
  return OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(epochMillis);
}

+ (jlong)toJulianDayNumberWithLong:(jlong)epochMillis {
  return OrgJodaTimeDateTimeUtils_toJulianDayNumberWithLong_(epochMillis);
}

+ (jlong)fromJulianDayWithDouble:(jdouble)julianDay {
  return OrgJodaTimeDateTimeUtils_fromJulianDayWithDouble_(julianDay);
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeUtils class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER, new_OrgJodaTimeDateTimeUtils_SystemMillisProvider_init());
    JreVolatileStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER);
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_cZoneNames, new_JavaUtilConcurrentAtomicAtomicReference_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeUtils)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DateTimeUtils", NULL, 0x4, NULL, NULL },
    { "currentTimeMillis", NULL, "J", 0x19, NULL, NULL },
    { "setCurrentMillisSystem", NULL, "V", 0x19, "Ljava.lang.SecurityException;", NULL },
    { "setCurrentMillisFixedWithLong:", "setCurrentMillisFixed", "V", 0x19, "Ljava.lang.SecurityException;", NULL },
    { "setCurrentMillisOffsetWithLong:", "setCurrentMillisOffset", "V", 0x19, "Ljava.lang.SecurityException;", NULL },
    { "setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider:", "setCurrentMillisProvider", "V", 0x19, "Ljava.lang.SecurityException;", NULL },
    { "checkPermission", NULL, "V", 0xa, "Ljava.lang.SecurityException;", NULL },
    { "getInstantMillisWithOrgJodaTimeReadableInstant:", "getInstantMillis", "J", 0x19, NULL, NULL },
    { "getInstantChronologyWithOrgJodaTimeReadableInstant:", "getInstantChronology", "Lorg.joda.time.Chronology;", 0x19, NULL, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL, NULL },
    { "getIntervalChronologyWithOrgJodaTimeReadableInterval:", "getIntervalChronology", "Lorg.joda.time.Chronology;", 0x19, NULL, NULL },
    { "getReadableIntervalWithOrgJodaTimeReadableInterval:", "getReadableInterval", "Lorg.joda.time.ReadableInterval;", 0x19, NULL, NULL },
    { "getChronologyWithOrgJodaTimeChronology:", "getChronology", "Lorg.joda.time.Chronology;", 0x19, NULL, NULL },
    { "getZoneWithOrgJodaTimeDateTimeZone:", "getZone", "Lorg.joda.time.DateTimeZone;", 0x19, NULL, NULL },
    { "getPeriodTypeWithOrgJodaTimePeriodType:", "getPeriodType", "Lorg.joda.time.PeriodType;", 0x19, NULL, NULL },
    { "getDurationMillisWithOrgJodaTimeReadableDuration:", "getDurationMillis", "J", 0x19, NULL, NULL },
    { "isContiguousWithOrgJodaTimeReadablePartial:", "isContiguous", "Z", 0x19, NULL, NULL },
    { "getDateFormatSymbolsWithJavaUtilLocale:", "getDateFormatSymbols", "Ljava.text.DateFormatSymbols;", 0x19, NULL, NULL },
    { "getDefaultTimeZoneNames", NULL, "Ljava.util.Map;", 0x19, NULL, "()Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;" },
    { "setDefaultTimeZoneNamesWithJavaUtilMap:", "setDefaultTimeZoneNames", "V", 0x19, NULL, "(Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;)V" },
    { "buildDefaultTimeZoneNames", NULL, "Ljava.util.Map;", 0xa, NULL, "()Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;" },
    { "putWithJavaUtilMap:withNSString:withNSString:", "put", "V", 0xa, NULL, "(Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;Ljava/lang/String;Ljava/lang/String;)V" },
    { "toJulianDayWithLong:", "toJulianDay", "D", 0x19, NULL, NULL },
    { "toJulianDayNumberWithLong:", "toJulianDayNumber", "J", 0x19, NULL, NULL },
    { "fromJulianDayWithDouble:", "fromJulianDay", "J", 0x19, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SYSTEM_MILLIS_PROVIDER", "SYSTEM_MILLIS_PROVIDER", 0x1a, "Lorg.joda.time.DateTimeUtils$SystemMillisProvider;", &OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER, NULL, .constantValue.asLong = 0 },
    { "cMillisProvider", "cMillisProvider", 0x4a, "Lorg.joda.time.DateTimeUtils$MillisProvider;", &OrgJodaTimeDateTimeUtils_cMillisProvider, NULL, .constantValue.asLong = 0 },
    { "cZoneNames", "cZoneNames", 0x1a, "Ljava.util.concurrent.atomic.AtomicReference;", &OrgJodaTimeDateTimeUtils_cZoneNames, "Ljava/util/concurrent/atomic/AtomicReference<Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.DateTimeUtils$MillisProvider;", "Lorg.joda.time.DateTimeUtils$SystemMillisProvider;", "Lorg.joda.time.DateTimeUtils$FixedMillisProvider;", "Lorg.joda.time.DateTimeUtils$OffsetMillisProvider;"};
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils = { 2, "DateTimeUtils", "org.joda.time", NULL, 0x1, 25, methods, 3, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgJodaTimeDateTimeUtils;
}

@end

void OrgJodaTimeDateTimeUtils_init(OrgJodaTimeDateTimeUtils *self) {
  NSObject_init(self);
}

OrgJodaTimeDateTimeUtils *new_OrgJodaTimeDateTimeUtils_init() {
  OrgJodaTimeDateTimeUtils *self = [OrgJodaTimeDateTimeUtils alloc];
  OrgJodaTimeDateTimeUtils_init(self);
  return self;
}

OrgJodaTimeDateTimeUtils *create_OrgJodaTimeDateTimeUtils_init() {
  OrgJodaTimeDateTimeUtils *self = [[OrgJodaTimeDateTimeUtils alloc] autorelease];
  OrgJodaTimeDateTimeUtils_init(self);
  return self;
}

jlong OrgJodaTimeDateTimeUtils_currentTimeMillis() {
  OrgJodaTimeDateTimeUtils_initialize();
  return [((id<OrgJodaTimeDateTimeUtils_MillisProvider>) nil_chk(JreLoadVolatileId(&OrgJodaTimeDateTimeUtils_cMillisProvider))) getMillis];
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisSystem() {
  OrgJodaTimeDateTimeUtils_initialize();
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreVolatileStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER);
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisFixedWithLong_(jlong fixedMillis) {
  OrgJodaTimeDateTimeUtils_initialize();
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreVolatileStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_cMillisProvider, new_OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(fixedMillis));
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisOffsetWithLong_(jlong offsetMillis) {
  OrgJodaTimeDateTimeUtils_initialize();
  OrgJodaTimeDateTimeUtils_checkPermission();
  if (offsetMillis == 0) {
    JreVolatileStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider, OrgJodaTimeDateTimeUtils_SYSTEM_MILLIS_PROVIDER);
  }
  else {
    JreVolatileStrongAssignAndConsume(&OrgJodaTimeDateTimeUtils_cMillisProvider, new_OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(offsetMillis));
  }
}

void OrgJodaTimeDateTimeUtils_setCurrentMillisProviderWithOrgJodaTimeDateTimeUtils_MillisProvider_(id<OrgJodaTimeDateTimeUtils_MillisProvider> millisProvider) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (millisProvider == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The MillisProvider must not be null");
  }
  OrgJodaTimeDateTimeUtils_checkPermission();
  JreVolatileStrongAssign(&OrgJodaTimeDateTimeUtils_cMillisProvider, millisProvider);
}

void OrgJodaTimeDateTimeUtils_checkPermission() {
  OrgJodaTimeDateTimeUtils_initialize();
  JavaLangSecurityManager *sm = JavaLangSystem_getSecurityManager();
  if (sm != nil) {
    [sm checkPermissionWithJavaSecurityPermission:create_OrgJodaTimeJodaTimePermission_initWithNSString_(@"CurrentTime.setProvider")];
  }
}

jlong OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> instant) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (instant == nil) {
    return OrgJodaTimeDateTimeUtils_currentTimeMillis();
  }
  return [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getMillis];
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> instant) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (instant == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(instant)) getChronology];
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end) {
  OrgJodaTimeDateTimeUtils_initialize();
  OrgJodaTimeChronology *chrono = nil;
  if (start != nil) {
    chrono = [start getChronology];
  }
  else if (end != nil) {
    chrono = [end getChronology];
  }
  if (chrono == nil) {
    chrono = OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getIntervalChronologyWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (interval == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInterval>) nil_chk(interval)) getChronology];
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

id<OrgJodaTimeReadableInterval> OrgJodaTimeDateTimeUtils_getReadableIntervalWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (interval == nil) {
    jlong now = OrgJodaTimeDateTimeUtils_currentTimeMillis();
    interval = create_OrgJodaTimeInterval_initWithLong_withLong_(now, now);
  }
  return interval;
}

OrgJodaTimeChronology *OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstance();
  }
  return chrono;
}

OrgJodaTimeDateTimeZone *OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (zone == nil) {
    return OrgJodaTimeDateTimeZone_getDefault();
  }
  return zone;
}

OrgJodaTimePeriodType *OrgJodaTimeDateTimeUtils_getPeriodTypeWithOrgJodaTimePeriodType_(OrgJodaTimePeriodType *type) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (type == nil) {
    return OrgJodaTimePeriodType_standard();
  }
  return type;
}

jlong OrgJodaTimeDateTimeUtils_getDurationMillisWithOrgJodaTimeReadableDuration_(id<OrgJodaTimeReadableDuration> duration) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (duration == nil) {
    return 0LL;
  }
  return [((id<OrgJodaTimeReadableDuration>) nil_chk(duration)) getMillis];
}

jboolean OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimeDateTimeUtils_initialize();
  if (partial == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Partial must not be null");
  }
  OrgJodaTimeDurationFieldType *lastType = nil;
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i++) {
    OrgJodaTimeDateTimeField *loopField = [partial getFieldWithInt:i];
    if (i > 0) {
      if ([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getRangeDurationField] == nil || [((OrgJodaTimeDurationField *) nil_chk([loopField getRangeDurationField])) getType] != lastType) {
        return false;
      }
    }
    lastType = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(loopField)) getDurationField])) getType];
  }
  return true;
}

JavaTextDateFormatSymbols *OrgJodaTimeDateTimeUtils_getDateFormatSymbolsWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgJodaTimeDateTimeUtils_initialize();
  @try {
    JavaLangReflectMethod *method = [JavaTextDateFormatSymbols_class_() getMethod:@"getInstance" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilLocale_class_() } count:1 type:IOSClass_class_()]];
    return (JavaTextDateFormatSymbols *) cast_chk([((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ locale } count:1 type:NSObject_class_()]], [JavaTextDateFormatSymbols class]);
  }
  @catch (JavaLangException *ex) {
    return create_JavaTextDateFormatSymbols_initWithJavaUtilLocale_(locale);
  }
}

id<JavaUtilMap> OrgJodaTimeDateTimeUtils_getDefaultTimeZoneNames() {
  OrgJodaTimeDateTimeUtils_initialize();
  id<JavaUtilMap> names = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeUtils_cZoneNames)) get];
  if (names == nil) {
    names = OrgJodaTimeDateTimeUtils_buildDefaultTimeZoneNames();
    if (![OrgJodaTimeDateTimeUtils_cZoneNames compareAndSetWithId:nil withId:names]) {
      names = [OrgJodaTimeDateTimeUtils_cZoneNames get];
    }
  }
  return names;
}

void OrgJodaTimeDateTimeUtils_setDefaultTimeZoneNamesWithJavaUtilMap_(id<JavaUtilMap> names) {
  OrgJodaTimeDateTimeUtils_initialize();
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(OrgJodaTimeDateTimeUtils_cZoneNames)) setWithId:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(create_JavaUtilHashMap_initWithJavaUtilMap_(names))];
}

id<JavaUtilMap> OrgJodaTimeDateTimeUtils_buildDefaultTimeZoneNames() {
  OrgJodaTimeDateTimeUtils_initialize();
  id<JavaUtilMap> map = create_JavaUtilLinkedHashMap_init();
  [map putWithId:@"UT" withId:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
  [map putWithId:@"UTC" withId:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
  [map putWithId:@"GMT" withId:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"EST", @"America/New_York");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"EDT", @"America/New_York");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"CST", @"America/Chicago");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"CDT", @"America/Chicago");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"MST", @"America/Denver");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"MDT", @"America/Denver");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"PST", @"America/Los_Angeles");
  OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(map, @"PDT", @"America/Los_Angeles");
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
}

void OrgJodaTimeDateTimeUtils_putWithJavaUtilMap_withNSString_withNSString_(id<JavaUtilMap> map, NSString *name, NSString *id_) {
  OrgJodaTimeDateTimeUtils_initialize();
  @try {
    [((id<JavaUtilMap>) nil_chk(map)) putWithId:name withId:OrgJodaTimeDateTimeZone_forIDWithNSString_(id_)];
  }
  @catch (JavaLangRuntimeException *ex) {
  }
}

jdouble OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(jlong epochMillis) {
  OrgJodaTimeDateTimeUtils_initialize();
  jdouble epochDay = epochMillis / 86400000.0;
  return epochDay + 2440587.5;
}

jlong OrgJodaTimeDateTimeUtils_toJulianDayNumberWithLong_(jlong epochMillis) {
  OrgJodaTimeDateTimeUtils_initialize();
  return JreFpToLong(JavaLangMath_floorWithDouble_(OrgJodaTimeDateTimeUtils_toJulianDayWithLong_(epochMillis) + 0.5));
}

jlong OrgJodaTimeDateTimeUtils_fromJulianDayWithDouble_(jdouble julianDay) {
  OrgJodaTimeDateTimeUtils_initialize();
  jdouble epochDay = julianDay - 2440587.5;
  return JreFpToLong((epochDay * 86400000.0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeUtils)

@implementation OrgJodaTimeDateTimeUtils_MillisProvider

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_MillisProvider = { 2, "MillisProvider", "org.joda.time", "DateTimeUtils", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeUtils_MillisProvider;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeUtils_MillisProvider)

@implementation OrgJodaTimeDateTimeUtils_SystemMillisProvider

- (jlong)getMillis {
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTimeUtils_SystemMillisProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMillis", NULL, "J", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_SystemMillisProvider = { 2, "SystemMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeUtils_SystemMillisProvider;
}

@end

void OrgJodaTimeDateTimeUtils_SystemMillisProvider_init(OrgJodaTimeDateTimeUtils_SystemMillisProvider *self) {
  NSObject_init(self);
}

OrgJodaTimeDateTimeUtils_SystemMillisProvider *new_OrgJodaTimeDateTimeUtils_SystemMillisProvider_init() {
  OrgJodaTimeDateTimeUtils_SystemMillisProvider *self = [OrgJodaTimeDateTimeUtils_SystemMillisProvider alloc];
  OrgJodaTimeDateTimeUtils_SystemMillisProvider_init(self);
  return self;
}

OrgJodaTimeDateTimeUtils_SystemMillisProvider *create_OrgJodaTimeDateTimeUtils_SystemMillisProvider_init() {
  OrgJodaTimeDateTimeUtils_SystemMillisProvider *self = [[OrgJodaTimeDateTimeUtils_SystemMillisProvider alloc] autorelease];
  OrgJodaTimeDateTimeUtils_SystemMillisProvider_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeUtils_SystemMillisProvider)

@implementation OrgJodaTimeDateTimeUtils_FixedMillisProvider

- (instancetype)initWithLong:(jlong)fixedMillis {
  OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(self, fixedMillis);
  return self;
}

- (jlong)getMillis {
  return iMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "FixedMillisProvider", NULL, 0x0, NULL, NULL },
    { "getMillis", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_FixedMillisProvider = { 2, "FixedMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeUtils_FixedMillisProvider;
}

@end

void OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(OrgJodaTimeDateTimeUtils_FixedMillisProvider *self, jlong fixedMillis) {
  NSObject_init(self);
  self->iMillis_ = fixedMillis;
}

OrgJodaTimeDateTimeUtils_FixedMillisProvider *new_OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(jlong fixedMillis) {
  OrgJodaTimeDateTimeUtils_FixedMillisProvider *self = [OrgJodaTimeDateTimeUtils_FixedMillisProvider alloc];
  OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(self, fixedMillis);
  return self;
}

OrgJodaTimeDateTimeUtils_FixedMillisProvider *create_OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(jlong fixedMillis) {
  OrgJodaTimeDateTimeUtils_FixedMillisProvider *self = [[OrgJodaTimeDateTimeUtils_FixedMillisProvider alloc] autorelease];
  OrgJodaTimeDateTimeUtils_FixedMillisProvider_initWithLong_(self, fixedMillis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeUtils_FixedMillisProvider)

@implementation OrgJodaTimeDateTimeUtils_OffsetMillisProvider

- (instancetype)initWithLong:(jlong)offsetMillis {
  OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(self, offsetMillis);
  return self;
}

- (jlong)getMillis {
  return JavaLangSystem_currentTimeMillis() + iMillis_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "OffsetMillisProvider", NULL, 0x0, NULL, NULL },
    { "getMillis", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMillis_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeUtils_OffsetMillisProvider = { 2, "OffsetMillisProvider", "org.joda.time", "DateTimeUtils", 0x8, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeDateTimeUtils_OffsetMillisProvider;
}

@end

void OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(OrgJodaTimeDateTimeUtils_OffsetMillisProvider *self, jlong offsetMillis) {
  NSObject_init(self);
  self->iMillis_ = offsetMillis;
}

OrgJodaTimeDateTimeUtils_OffsetMillisProvider *new_OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(jlong offsetMillis) {
  OrgJodaTimeDateTimeUtils_OffsetMillisProvider *self = [OrgJodaTimeDateTimeUtils_OffsetMillisProvider alloc];
  OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(self, offsetMillis);
  return self;
}

OrgJodaTimeDateTimeUtils_OffsetMillisProvider *create_OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(jlong offsetMillis) {
  OrgJodaTimeDateTimeUtils_OffsetMillisProvider *self = [[OrgJodaTimeDateTimeUtils_OffsetMillisProvider alloc] autorelease];
  OrgJodaTimeDateTimeUtils_OffsetMillisProvider_initWithLong_(self, offsetMillis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeUtils_OffsetMillisProvider)

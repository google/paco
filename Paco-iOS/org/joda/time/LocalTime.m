//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/LocalTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "org/joda/convert/FromString.h"
#include "org/joda/convert/ToString.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTime.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/LocalTime.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/BaseLocal.h"
#include "org/joda/time/chrono/ISOChronology.h"
#include "org/joda/time/convert/ConverterManager.h"
#include "org/joda/time/convert/PartialConverter.h"
#include "org/joda/time/field/AbstractReadableInstantFieldProperty.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

@interface OrgJodaTimeLocalTime () {
 @public
  jlong iLocalMillis_;
  OrgJodaTimeChronology *iChronology_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime, iChronology_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeLocalTime_get_serialVersionUID();
#define OrgJodaTimeLocalTime_serialVersionUID -12873158713873LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, serialVersionUID, jlong)

inline jint OrgJodaTimeLocalTime_get_HOUR_OF_DAY();
#define OrgJodaTimeLocalTime_HOUR_OF_DAY 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, HOUR_OF_DAY, jint)

inline jint OrgJodaTimeLocalTime_get_MINUTE_OF_HOUR();
#define OrgJodaTimeLocalTime_MINUTE_OF_HOUR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, MINUTE_OF_HOUR, jint)

inline jint OrgJodaTimeLocalTime_get_SECOND_OF_MINUTE();
#define OrgJodaTimeLocalTime_SECOND_OF_MINUTE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, SECOND_OF_MINUTE, jint)

inline jint OrgJodaTimeLocalTime_get_MILLIS_OF_SECOND();
#define OrgJodaTimeLocalTime_MILLIS_OF_SECOND 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, MILLIS_OF_SECOND, jint)

inline id<JavaUtilSet> OrgJodaTimeLocalTime_get_TIME_DURATION_TYPES();
static id<JavaUtilSet> OrgJodaTimeLocalTime_TIME_DURATION_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeLocalTime, TIME_DURATION_TYPES, id<JavaUtilSet>)

@interface OrgJodaTimeLocalTime_Property () {
 @public
  OrgJodaTimeLocalTime *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iInstant_, OrgJodaTimeLocalTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeLocalTime_Property_get_serialVersionUID();
#define OrgJodaTimeLocalTime_Property_serialVersionUID -325842547277223LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime_Property, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeLocalTime)

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_MIDNIGHT;

@implementation OrgJodaTimeLocalTime

+ (OrgJodaTimeLocalTime *)now {
  return OrgJodaTimeLocalTime_now();
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalTime_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(millisOfDay);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

+ (OrgJodaTimeLocalTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(date);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeLocalTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeLocalTime_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeLocalTime_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  OrgJodaTimeLocalTime_initWithInt_withInt_(self, hourOfDay, minuteOfHour);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, OrgJodaTimeChronoISOChronology_getInstanceUTC());
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC))) isEqual:[((OrgJodaTimeChronology *) nil_chk(iChronology_)) getZone]] == false) {
    return create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, [iChronology_ withUTC]);
  }
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) minuteOfHour];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) secondOfMinute];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfSecond];
    default:
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
    default:
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return false;
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:[((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getDurationType]] == false) {
    return false;
  }
  OrgJodaTimeDurationFieldType *range = [type getRangeDurationType];
  return ([self isSupportedWithOrgJodaTimeDurationFieldType:range] || range == OrgJodaTimeDurationFieldType_days());
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return false;
  }
  OrgJodaTimeDurationField *field = [((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalTime_TIME_DURATION_TYPES)) containsWithId:type] || [((OrgJodaTimeDurationField *) nil_chk(field)) getUnitMillis] < [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDurationField *) nil_chk(field)) isSupported];
  }
  return false;
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return true;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) cast_chk(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  cast_check(partial, OrgJodaTimeReadablePartial_class_());
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) cast_chk(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeLocalTime *)withLocalMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getLocalMillis] ? self : create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(newMillis, [self getChronology]));
}

- (OrgJodaTimeLocalTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  if (fieldType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  if (fieldType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:fieldType] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getLocalMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getFieldWithOrgJodaTimeChronology:[self getChronology]]);
}

- (jint)getHourOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
}

- (jint)getMinuteOfHour {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
}

- (jint)getSecondOfMinute {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfSecond {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalTime *)withHourOfDayWithInt:(jint)hour {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getLocalMillis] withInt:hour]];
}

- (OrgJodaTimeLocalTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getLocalMillis] withInt:minute]];
}

- (OrgJodaTimeLocalTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getLocalMillis] withInt:second]];
}

- (OrgJodaTimeLocalTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime_Property *)hourOfDay {
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]);
}

- (OrgJodaTimeLocalTime_Property *)minuteOfHour {
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]);
}

- (OrgJodaTimeLocalTime_Property *)secondOfMinute {
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]);
}

- (OrgJodaTimeLocalTime_Property *)millisOfSecond {
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]);
}

- (OrgJodaTimeLocalTime_Property *)millisOfDay {
  return create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]);
}

- (OrgJodaTimeDateTime *)toDateTimeToday {
  return [self toDateTimeTodayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(resolved, chrono);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_time())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeLocalTime class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeLocalTime_MIDNIGHT, new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0));
    JreStrongAssignAndConsume(&OrgJodaTimeLocalTime_TIME_DURATION_TYPES, new_JavaUtilHashSet_init());
    {
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_millis()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_seconds()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_minutes()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_hours()];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeLocalTime)
  }
}

+ (IOSObjectArray *)__annotations_parseWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertFromString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[OrgJodaConvertToString alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "now", NULL, "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "nowWithOrgJodaTimeDateTimeZone:", "now", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "nowWithOrgJodaTimeChronology:", "now", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "parseWithNSString:", "parse", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:", "parse", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "fromMillisOfDayWithLong:", "fromMillisOfDay", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "fromMillisOfDayWithLong:withOrgJodaTimeChronology:", "fromMillisOfDay", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "fromCalendarFieldsWithJavaUtilCalendar:", "fromCalendarFields", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "fromDateFieldsWithJavaUtilDate:", "fromDateFields", "Lorg.joda.time.LocalTime;", 0x9, NULL, NULL },
    { "init", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithLong:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithLong:withOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithLong:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithId:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithId:withOrgJodaTimeDateTimeZone:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithId:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withInt:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withInt:withInt:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withInt:withInt:withOrgJodaTimeChronology:", "LocalTime", NULL, 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL, NULL },
    { "getWithOrgJodaTimeDateTimeFieldType:", "get", "I", 0x1, NULL, NULL },
    { "isSupportedWithOrgJodaTimeDateTimeFieldType:", "isSupported", "Z", 0x1, NULL, NULL },
    { "isSupportedWithOrgJodaTimeDurationFieldType:", "isSupported", "Z", 0x1, NULL, NULL },
    { "getLocalMillis", NULL, "J", 0x4, NULL, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "withLocalMillisWithLong:", "withLocalMillis", "Lorg.joda.time.LocalTime;", 0x0, NULL, NULL },
    { "withFieldsWithOrgJodaTimeReadablePartial:", "withFields", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "plusHoursWithInt:", "plusHours", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "plusMinutesWithInt:", "plusMinutes", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "plusSecondsWithInt:", "plusSeconds", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "plusMillisWithInt:", "plusMillis", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "minusHoursWithInt:", "minusHours", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "minusMinutesWithInt:", "minusMinutes", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "minusSecondsWithInt:", "minusSeconds", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "minusMillisWithInt:", "minusMillis", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "getHourOfDay", NULL, "I", 0x1, NULL, NULL },
    { "getMinuteOfHour", NULL, "I", 0x1, NULL, NULL },
    { "getSecondOfMinute", NULL, "I", 0x1, NULL, NULL },
    { "getMillisOfSecond", NULL, "I", 0x1, NULL, NULL },
    { "getMillisOfDay", NULL, "I", 0x1, NULL, NULL },
    { "withHourOfDayWithInt:", "withHourOfDay", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withMinuteOfHourWithInt:", "withMinuteOfHour", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withSecondOfMinuteWithInt:", "withSecondOfMinute", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withMillisOfSecondWithInt:", "withMillisOfSecond", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withMillisOfDayWithInt:", "withMillisOfDay", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "hourOfDay", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "minuteOfHour", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "secondOfMinute", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "millisOfSecond", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "millisOfDay", NULL, "Lorg.joda.time.LocalTime$Property;", 0x1, NULL, NULL },
    { "toDateTimeToday", NULL, "Lorg.joda.time.DateTime;", 0x1, NULL, NULL },
    { "toDateTimeTodayWithOrgJodaTimeDateTimeZone:", "toDateTimeToday", "Lorg.joda.time.DateTime;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeLocalTime_serialVersionUID },
    { "MIDNIGHT", "MIDNIGHT", 0x19, "Lorg.joda.time.LocalTime;", &OrgJodaTimeLocalTime_MIDNIGHT, NULL, .constantValue.asLong = 0 },
    { "HOUR_OF_DAY", "HOUR_OF_DAY", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeLocalTime_HOUR_OF_DAY },
    { "MINUTE_OF_HOUR", "MINUTE_OF_HOUR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeLocalTime_MINUTE_OF_HOUR },
    { "SECOND_OF_MINUTE", "SECOND_OF_MINUTE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeLocalTime_SECOND_OF_MINUTE },
    { "MILLIS_OF_SECOND", "MILLIS_OF_SECOND", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeLocalTime_MILLIS_OF_SECOND },
    { "TIME_DURATION_TYPES", "TIME_DURATION_TYPES", 0x1a, "Ljava.util.Set;", &OrgJodaTimeLocalTime_TIME_DURATION_TYPES, "Ljava/util/Set<Lorg/joda/time/DurationFieldType;>;", .constantValue.asLong = 0 },
    { "iLocalMillis_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.LocalTime$Property;"};
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime = { 2, "LocalTime", "org.joda.time", NULL, 0x11, 69, methods, 9, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgJodaTimeLocalTime;
}

@end

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_now() {
  OrgJodaTimeLocalTime_initialize();
  return create_OrgJodaTimeLocalTime_init();
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initialize();
  if (zone == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return create_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime_initialize();
  if (chronology == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return create_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalTime_initialize();
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localTimeParser());
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalTime_initialize();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalTimeWithNSString:str];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(jlong millisOfDay) {
  OrgJodaTimeLocalTime_initialize();
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, nil);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeLocalTime_initialize();
  chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) withUTC];
  return create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalTime_initialize();
  if (calendar == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  return create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_([((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [calendar getWithInt:JavaUtilCalendar_MINUTE], [calendar getWithInt:JavaUtilCalendar_SECOND], [calendar getWithInt:JavaUtilCalendar_MILLISECOND]);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalTime_initialize();
  if (date == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_([((JavaUtilDate *) nil_chk(date)) getHours], [date getMinutes], [date getSeconds], (((jint) ([date getTime] % 1000)) + 1000) % 1000);
}

void OrgJodaTimeLocalTime_init(OrgJodaTimeLocalTime *self) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_init() {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_init(self);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_init() {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_init(self);
  return self;
}

void OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

void OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), chronology);
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

void OrgJodaTimeLocalTime_initWithLong_(OrgJodaTimeLocalTime *self, jlong instant) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_(jlong instant) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithLong_(self, instant);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_(jlong instant) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithLong_(self, instant);
  return self;
}

void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) withLong:instant];
  chronology = [chronology withUTC];
  self->iLocalMillis_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) millisOfDay])) getWithLong:localMillis];
  JreStrongAssign(&self->iChronology_, chronology);
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

void OrgJodaTimeLocalTime_initWithId_(OrgJodaTimeLocalTime *self, id instant) {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_(id instant) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithId_(self, instant);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_(id instant) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithId_(self, instant);
  return self;
}

void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  JreStrongAssign(&self->iChronology_, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  JreStrongAssign(&self->iChronology_, [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC]);
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

void OrgJodaTimeLocalTime_initWithInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, 0, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithInt_withInt_(self, hourOfDay, minuteOfHour);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithInt_withInt_(self, hourOfDay, minuteOfHour);
  return self;
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithLong:0LL withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  JreStrongAssign(&self->iChronology_, chronology);
  self->iLocalMillis_ = instant;
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [OrgJodaTimeLocalTime alloc];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime *self = [[OrgJodaTimeLocalTime alloc] autorelease];
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime)

@implementation OrgJodaTimeLocalTime_Property

- (instancetype)initWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  JreStrongAssign(&iInstant_, (OrgJodaTimeLocalTime *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalTime class]));
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  JreStrongAssign(&iField_, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology]]);
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalTime *)getLocalTime {
  return iInstant_;
}

- (OrgJodaTimeLocalTime *)addCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)addCopyWithLong:(jlong)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withLong:value]];
}

- (OrgJodaTimeLocalTime *)addNoWrapToCopyWithInt:(jint)value {
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value];
  jlong rounded = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([iInstant_ getChronology])) millisOfDay])) getWithLong:millis];
  if (rounded != millis) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The addition exceeded the boundaries of LocalTime");
  }
  return [iInstant_ withLocalMillisWithLong:millis];
}

- (OrgJodaTimeLocalTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithInt:(jint)value {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalTime *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalTime *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalTime *)roundFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfFloorCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfCeilingCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfEvenCopy {
  return [iInstant_ withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis]]];
}

- (void)dealloc {
  RELEASE_(iInstant_);
  RELEASE_(iField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeLocalTime:withOrgJodaTimeDateTimeField:", "Property", NULL, 0x0, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL, NULL },
    { "getMillis", NULL, "J", 0x4, NULL, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x4, NULL, NULL },
    { "getLocalTime", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "addCopyWithInt:", "addCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "addCopyWithLong:", "addCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "addNoWrapToCopyWithInt:", "addNoWrapToCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "roundFloorCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "roundCeilingCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "roundHalfFloorCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "roundHalfCeilingCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
    { "roundHalfEvenCopy", NULL, "Lorg.joda.time.LocalTime;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeLocalTime_Property_serialVersionUID },
    { "iInstant_", NULL, 0x82, "Lorg.joda.time.LocalTime;", NULL, NULL, .constantValue.asLong = 0 },
    { "iField_", NULL, 0x82, "Lorg.joda.time.DateTimeField;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime_Property = { 2, "Property", "org.joda.time", "LocalTime", 0x19, 21, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeLocalTime_Property;
}

@end

void OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime_Property *self, OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  JreStrongAssign(&self->iInstant_, instant);
  JreStrongAssign(&self->iField_, field);
}

OrgJodaTimeLocalTime_Property *new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeLocalTime_Property *self = [OrgJodaTimeLocalTime_Property alloc];
  OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

OrgJodaTimeLocalTime_Property *create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeLocalTime_Property *self = [[OrgJodaTimeLocalTime_Property alloc] autorelease];
  OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime_Property)

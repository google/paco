//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/field/BaseDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/PreciseDurationDateTimeField.h"

@interface OrgJodaTimeFieldPreciseDurationDateTimeField () {
 @public
  OrgJodaTimeDurationField *iUnitField_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldPreciseDurationDateTimeField, iUnitField_, OrgJodaTimeDurationField *)

inline jlong OrgJodaTimeFieldPreciseDurationDateTimeField_get_serialVersionUID();
#define OrgJodaTimeFieldPreciseDurationDateTimeField_serialVersionUID 5004523158306266035LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFieldPreciseDurationDateTimeField, serialVersionUID, jlong)

@implementation OrgJodaTimeFieldPreciseDurationDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)unit {
  OrgJodaTimeFieldPreciseDurationDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(self, type, unit);
  return self;
}

- (jboolean)isLenient {
  return false;
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, value, [self getMinimumValue], [self getMaximumValueForSetWithLong:instant withInt:value]);
  return instant + (value - [self getWithLong:instant]) * iUnitMillis_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (instant >= 0) {
    return instant - instant % iUnitMillis_;
  }
  else {
    instant += 1;
    return instant - instant % iUnitMillis_ - iUnitMillis_;
  }
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (instant > 0) {
    instant -= 1;
    return instant - instant % iUnitMillis_ + iUnitMillis_;
  }
  else {
    return instant - instant % iUnitMillis_;
  }
}

- (jlong)remainderWithLong:(jlong)instant {
  if (instant >= 0) {
    return instant % iUnitMillis_;
  }
  else {
    return (instant + 1) % iUnitMillis_ + iUnitMillis_ - 1;
  }
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iUnitField_;
}

- (jint)getMinimumValue {
  return 0;
}

- (jlong)getUnitMillis {
  return iUnitMillis_;
}

- (jint)getMaximumValueForSetWithLong:(jlong)instant
                              withInt:(jint)value {
  return [self getMaximumValueWithLong:instant];
}

- (void)dealloc {
  RELEASE_(iUnitField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDurationField:", "PreciseDurationDateTimeField", NULL, 0x1, NULL, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getUnitMillis", NULL, "J", 0x11, NULL, NULL },
    { "getMaximumValueForSetWithLong:withInt:", "getMaximumValueForSet", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeFieldPreciseDurationDateTimeField_serialVersionUID },
    { "iUnitMillis_", NULL, 0x10, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "iUnitField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldPreciseDurationDateTimeField = { 2, "PreciseDurationDateTimeField", "org.joda.time.field", NULL, 0x401, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFieldPreciseDurationDateTimeField;
}

@end

void OrgJodaTimeFieldPreciseDurationDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(OrgJodaTimeFieldPreciseDurationDateTimeField *self, OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit) {
  OrgJodaTimeFieldBaseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_(self, type);
  if (![((OrgJodaTimeDurationField *) nil_chk(unit)) isPrecise]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unit duration field must be precise");
  }
  self->iUnitMillis_ = [unit getUnitMillis];
  if (self->iUnitMillis_ < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The unit milliseconds must be at least 1");
  }
  JreStrongAssign(&self->iUnitField_, unit);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldPreciseDurationDateTimeField)

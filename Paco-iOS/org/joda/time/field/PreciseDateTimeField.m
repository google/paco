//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/field/PreciseDateTimeField.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/PreciseDateTimeField.h"
#include "org/joda/time/field/PreciseDurationDateTimeField.h"

@interface OrgJodaTimeFieldPreciseDateTimeField () {
 @public
  jint iRange_;
  OrgJodaTimeDurationField *iRangeField_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFieldPreciseDateTimeField, iRangeField_, OrgJodaTimeDurationField *)

inline jlong OrgJodaTimeFieldPreciseDateTimeField_get_serialVersionUID();
#define OrgJodaTimeFieldPreciseDateTimeField_serialVersionUID -5586801265774496376LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFieldPreciseDateTimeField, serialVersionUID, jlong)

@implementation OrgJodaTimeFieldPreciseDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)unit
                        withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)range {
  OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, type, unit, range);
  return self;
}

- (jint)getWithLong:(jlong)instant {
  if (instant >= 0) {
    return (jint) ((instant / [self getUnitMillis]) % iRange_);
  }
  else {
    return iRange_ - 1 + (jint) (((instant + 1) / [self getUnitMillis]) % iRange_);
  }
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount {
  jint thisValue = [self getWithLong:instant];
  jint wrappedValue = OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_withInt_(thisValue, amount, [self getMinimumValue], [self getMaximumValue]);
  return instant + (wrappedValue - thisValue) * [self getUnitMillis];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, value, [self getMinimumValue], [self getMaximumValue]);
  return instant + (value - [self getWithLong:instant]) * iUnitMillis_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeField_;
}

- (jint)getMaximumValue {
  return iRange_ - 1;
}

- (jint)getRange {
  return iRange_;
}

- (void)dealloc {
  RELEASE_(iRangeField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:", "PreciseDateTimeField", NULL, 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "getRange", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeFieldPreciseDateTimeField_serialVersionUID },
    { "iRange_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iRangeField_", NULL, 0x12, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldPreciseDateTimeField = { 2, "PreciseDateTimeField", "org.joda.time.field", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFieldPreciseDateTimeField;
}

@end

void OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeFieldPreciseDateTimeField *self, OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit, OrgJodaTimeDurationField *range) {
  OrgJodaTimeFieldPreciseDurationDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_(self, type, unit);
  if (![((OrgJodaTimeDurationField *) nil_chk(range)) isPrecise]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Range duration field must be precise");
  }
  jlong rangeMillis = [range getUnitMillis];
  self->iRange_ = (jint) (rangeMillis / [self getUnitMillis]);
  if (self->iRange_ < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The effective range must be at least 2");
  }
  JreStrongAssign(&self->iRangeField_, range);
}

OrgJodaTimeFieldPreciseDateTimeField *new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit, OrgJodaTimeDurationField *range) {
  OrgJodaTimeFieldPreciseDateTimeField *self = [OrgJodaTimeFieldPreciseDateTimeField alloc];
  OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, type, unit, range);
  return self;
}

OrgJodaTimeFieldPreciseDateTimeField *create_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType *type, OrgJodaTimeDurationField *unit, OrgJodaTimeDurationField *range) {
  OrgJodaTimeFieldPreciseDateTimeField *self = [[OrgJodaTimeFieldPreciseDateTimeField alloc] autorelease];
  OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, type, unit, range);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldPreciseDateTimeField)

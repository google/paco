//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/field/DividedDateTimeField.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/field/DecoratedDateTimeField.h"
#include "org/joda/time/field/DividedDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/RemainderDateTimeField.h"
#include "org/joda/time/field/ScaledDurationField.h"

@interface OrgJodaTimeFieldDividedDateTimeField () {
 @public
  jint iMin_;
  jint iMax_;
}

- (jint)getRemainderWithInt:(jint)value;

@end

inline jlong OrgJodaTimeFieldDividedDateTimeField_get_serialVersionUID();
#define OrgJodaTimeFieldDividedDateTimeField_serialVersionUID 8318475124230605365LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFieldDividedDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgJodaTimeFieldDividedDateTimeField_getRemainderWithInt_(OrgJodaTimeFieldDividedDateTimeField *self, jint value);

@implementation OrgJodaTimeFieldDividedDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(jint)divisor {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, type, divisor);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                         withInt:(jint)divisor {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, rangeField, type, divisor);
  return self;
}

- (instancetype)initWithOrgJodaTimeFieldRemainderDateTimeField:(OrgJodaTimeFieldRemainderDateTimeField *)remainderField
                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, type);
  return self;
}

- (instancetype)initWithOrgJodaTimeFieldRemainderDateTimeField:(OrgJodaTimeFieldRemainderDateTimeField *)remainderField
                                  withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, rangeField, type);
  return self;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  if (iRangeDurationField_ != nil) {
    return iRangeDurationField_;
  }
  return [super getRangeDurationField];
}

- (jint)getWithLong:(jlong)instant {
  jint value = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
  if (value >= 0) {
    return value / iDivisor_;
  }
  else {
    return ((value + 1) / iDivisor_) - 1;
  }
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)amount {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:amount * iDivisor_];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)amount {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:amount * iDivisor_];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)amount {
  return [self setWithLong:instant withInt:OrgJodaTimeFieldFieldUtils_getWrappedValueWithInt_withInt_withInt_withInt_([self getWithLong:instant], amount, iMin_, iMax_)];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant] / iDivisor_;
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant] / iDivisor_;
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, value, iMin_, iMax_);
  jint remainder = OrgJodaTimeFieldDividedDateTimeField_getRemainderWithInt_(self, [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant]);
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) setWithLong:instant withInt:value * iDivisor_ + remainder];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (jint)getMinimumValue {
  return iMin_;
}

- (jint)getMaximumValue {
  return iMax_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  OrgJodaTimeDateTimeField *field = [self getWrappedField];
  return [field roundFloorWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(field)) setWithLong:instant withInt:[self getWithLong:instant] * iDivisor_]];
}

- (jlong)remainderWithLong:(jlong)instant {
  return [self setWithLong:instant withInt:[self getWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant]]];
}

- (jint)getDivisor {
  return iDivisor_;
}

- (jint)getRemainderWithInt:(jint)value {
  return OrgJodaTimeFieldDividedDateTimeField_getRemainderWithInt_(self, value);
}

- (void)dealloc {
  RELEASE_(iDurationField_);
  RELEASE_(iRangeDurationField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeFieldType:withInt:", "DividedDateTimeField", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDateTimeFieldType:withInt:", "DividedDateTimeField", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeFieldRemainderDateTimeField:withOrgJodaTimeDateTimeFieldType:", "DividedDateTimeField", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeFieldRemainderDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDateTimeFieldType:", "DividedDateTimeField", NULL, 0x1, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "getDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL, NULL },
    { "getDivisor", NULL, "I", 0x1, NULL, NULL },
    { "getRemainderWithInt:", "getRemainder", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeFieldDividedDateTimeField_serialVersionUID },
    { "iDivisor_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iRangeDurationField_", NULL, 0x10, "Lorg.joda.time.DurationField;", NULL, NULL, .constantValue.asLong = 0 },
    { "iMin_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "iMax_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeFieldDividedDateTimeField = { 2, "DividedDateTimeField", "org.joda.time.field", NULL, 0x1, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeFieldDividedDateTimeField;
}

@end

void OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeFieldDividedDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getRangeDurationField], type, divisor);
}

OrgJodaTimeFieldDividedDateTimeField *new_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDividedDateTimeField *self = [OrgJodaTimeFieldDividedDateTimeField alloc];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, type, divisor);
  return self;
}

OrgJodaTimeFieldDividedDateTimeField *create_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDividedDateTimeField *self = [[OrgJodaTimeFieldDividedDateTimeField alloc] autorelease];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, type, divisor);
  return self;
}

void OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeFieldDividedDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDecoratedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, field, type);
  if (divisor < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The divisor must be at least 2");
  }
  OrgJodaTimeDurationField *unitField = [((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField];
  if (unitField == nil) {
    JreStrongAssign(&self->iDurationField_, nil);
  }
  else {
    JreStrongAssignAndConsume(&self->iDurationField_, new_OrgJodaTimeFieldScaledDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_(unitField, [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getDurationType], divisor));
  }
  JreStrongAssign(&self->iRangeDurationField_, rangeField);
  self->iDivisor_ = divisor;
  jint i = [field getMinimumValue];
  jint min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
  jint j = [field getMaximumValue];
  jint max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
  self->iMin_ = min;
  self->iMax_ = max;
}

OrgJodaTimeFieldDividedDateTimeField *new_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDividedDateTimeField *self = [OrgJodaTimeFieldDividedDateTimeField alloc];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, rangeField, type, divisor);
  return self;
}

OrgJodaTimeFieldDividedDateTimeField *create_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type, jint divisor) {
  OrgJodaTimeFieldDividedDateTimeField *self = [[OrgJodaTimeFieldDividedDateTimeField alloc] autorelease];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_withInt_(self, field, rangeField, type, divisor);
  return self;
}

void OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *self, OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, nil, type);
}

OrgJodaTimeFieldDividedDateTimeField *new_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDividedDateTimeField *self = [OrgJodaTimeFieldDividedDateTimeField alloc];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, type);
  return self;
}

OrgJodaTimeFieldDividedDateTimeField *create_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDividedDateTimeField *self = [[OrgJodaTimeFieldDividedDateTimeField alloc] autorelease];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, type);
  return self;
}

void OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldDividedDateTimeField *self, OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDecoratedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeFieldRemainderDateTimeField *) nil_chk(remainderField)) getWrappedField], type);
  jint divisor = self->iDivisor_ = remainderField->iDivisor_;
  JreStrongAssign(&self->iDurationField_, remainderField->iRangeField_);
  JreStrongAssign(&self->iRangeDurationField_, rangeField);
  OrgJodaTimeDateTimeField *field = [self getWrappedField];
  jint i = [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMinimumValue];
  jint min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
  jint j = [field getMaximumValue];
  jint max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
  self->iMin_ = min;
  self->iMax_ = max;
}

OrgJodaTimeFieldDividedDateTimeField *new_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDividedDateTimeField *self = [OrgJodaTimeFieldDividedDateTimeField alloc];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, rangeField, type);
  return self;
}

OrgJodaTimeFieldDividedDateTimeField *create_OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeFieldRemainderDateTimeField *remainderField, OrgJodaTimeDurationField *rangeField, OrgJodaTimeDateTimeFieldType *type) {
  OrgJodaTimeFieldDividedDateTimeField *self = [[OrgJodaTimeFieldDividedDateTimeField alloc] autorelease];
  OrgJodaTimeFieldDividedDateTimeField_initWithOrgJodaTimeFieldRemainderDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDateTimeFieldType_(self, remainderField, rangeField, type);
  return self;
}

jint OrgJodaTimeFieldDividedDateTimeField_getRemainderWithInt_(OrgJodaTimeFieldDividedDateTimeField *self, jint value) {
  if (value >= 0) {
    return value % self->iDivisor_;
  }
  else {
    return (self->iDivisor_ - 1) + ((value + 1) % self->iDivisor_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldDividedDateTimeField)

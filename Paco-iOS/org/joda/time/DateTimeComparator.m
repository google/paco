//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/DateTimeComparator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeComparator.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/convert/ConverterManager.h"
#include "org/joda/time/convert/InstantConverter.h"

@interface OrgJodaTimeDateTimeComparator () {
 @public
  OrgJodaTimeDateTimeFieldType *iLowerLimit_;
  OrgJodaTimeDateTimeFieldType *iUpperLimit_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeComparator, iLowerLimit_, OrgJodaTimeDateTimeFieldType *)
J2OBJC_FIELD_SETTER(OrgJodaTimeDateTimeComparator, iUpperLimit_, OrgJodaTimeDateTimeFieldType *)

inline jlong OrgJodaTimeDateTimeComparator_get_serialVersionUID();
#define OrgJodaTimeDateTimeComparator_serialVersionUID -6097339773320178364LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTimeComparator, serialVersionUID, jlong)

inline OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_get_ALL_INSTANCE();
static OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_ALL_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeComparator, ALL_INSTANCE, OrgJodaTimeDateTimeComparator *)

inline OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_get_DATE_INSTANCE();
static OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_DATE_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeComparator, DATE_INSTANCE, OrgJodaTimeDateTimeComparator *)

inline OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_get_TIME_INSTANCE();
static OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_TIME_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeDateTimeComparator, TIME_INSTANCE, OrgJodaTimeDateTimeComparator *)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeDateTimeComparator)

@implementation OrgJodaTimeDateTimeComparator

+ (OrgJodaTimeDateTimeComparator *)getInstance {
  return OrgJodaTimeDateTimeComparator_getInstance();
}

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit {
  return OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_(lowerLimit);
}

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit {
  return OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(lowerLimit, upperLimit);
}

+ (OrgJodaTimeDateTimeComparator *)getDateOnlyInstance {
  return OrgJodaTimeDateTimeComparator_getDateOnlyInstance();
}

+ (OrgJodaTimeDateTimeComparator *)getTimeOnlyInstance {
  return OrgJodaTimeDateTimeComparator_getTimeOnlyInstance();
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                    withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit {
  OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(self, lowerLimit, upperLimit);
  return self;
}

- (OrgJodaTimeDateTimeFieldType *)getLowerLimit {
  return iLowerLimit_;
}

- (OrgJodaTimeDateTimeFieldType *)getUpperLimit {
  return iUpperLimit_;
}

- (jint)compareWithId:(id)lhsObj
               withId:(id)rhsObj {
  id<OrgJodaTimeConvertInstantConverter> conv = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getInstantConverterWithId:lhsObj];
  OrgJodaTimeChronology *lhsChrono = [((id<OrgJodaTimeConvertInstantConverter>) nil_chk(conv)) getChronologyWithId:lhsObj withOrgJodaTimeChronology:nil];
  jlong lhsMillis = [conv getInstantMillisWithId:lhsObj withOrgJodaTimeChronology:lhsChrono];
  conv = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getInstantConverterWithId:rhsObj];
  OrgJodaTimeChronology *rhsChrono = [((id<OrgJodaTimeConvertInstantConverter>) nil_chk(conv)) getChronologyWithId:rhsObj withOrgJodaTimeChronology:nil];
  jlong rhsMillis = [conv getInstantMillisWithId:rhsObj withOrgJodaTimeChronology:rhsChrono];
  if (iLowerLimit_ != nil) {
    lhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iLowerLimit_ getFieldWithOrgJodaTimeChronology:lhsChrono])) roundFloorWithLong:lhsMillis];
    rhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iLowerLimit_ getFieldWithOrgJodaTimeChronology:rhsChrono])) roundFloorWithLong:rhsMillis];
  }
  if (iUpperLimit_ != nil) {
    lhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iUpperLimit_ getFieldWithOrgJodaTimeChronology:lhsChrono])) remainderWithLong:lhsMillis];
    rhsMillis = [((OrgJodaTimeDateTimeField *) nil_chk([iUpperLimit_ getFieldWithOrgJodaTimeChronology:rhsChrono])) remainderWithLong:rhsMillis];
  }
  if (lhsMillis < rhsMillis) {
    return -1;
  }
  else if (lhsMillis > rhsMillis) {
    return 1;
  }
  else {
    return 0;
  }
}

- (id)readResolve {
  return OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(iLowerLimit_, iUpperLimit_);
}

- (jboolean)isEqual:(id)object {
  if ([object isKindOfClass:[OrgJodaTimeDateTimeComparator class]]) {
    OrgJodaTimeDateTimeComparator *other = (OrgJodaTimeDateTimeComparator *) cast_chk(object, [OrgJodaTimeDateTimeComparator class]);
    return (iLowerLimit_ == [((OrgJodaTimeDateTimeComparator *) nil_chk(other)) getLowerLimit] || (iLowerLimit_ != nil && [iLowerLimit_ isEqual:[other getLowerLimit]])) && (iUpperLimit_ == [other getUpperLimit] || (iUpperLimit_ != nil && [iUpperLimit_ isEqual:[other getUpperLimit]]));
  }
  return false;
}

- (NSUInteger)hash {
  return (iLowerLimit_ == nil ? 0 : ((jint) [iLowerLimit_ hash])) + (123 * (iUpperLimit_ == nil ? 0 : ((jint) [iUpperLimit_ hash])));
}

- (NSString *)description {
  if (iLowerLimit_ == iUpperLimit_) {
    return JreStrcat("$$C", @"DateTimeComparator[", (iLowerLimit_ == nil ? @"" : [iLowerLimit_ getName]), ']');
  }
  else {
    return JreStrcat("$$C$C", @"DateTimeComparator[", (iLowerLimit_ == nil ? @"" : [iLowerLimit_ getName]), '-', (iUpperLimit_ == nil ? @"" : [iUpperLimit_ getName]), ']');
  }
}

- (void)dealloc {
  RELEASE_(iLowerLimit_);
  RELEASE_(iUpperLimit_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgJodaTimeDateTimeComparator class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeComparator_ALL_INSTANCE, new_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(nil, nil));
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeComparator_DATE_INSTANCE, new_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType_dayOfYear(), nil));
    JreStrongAssignAndConsume(&OrgJodaTimeDateTimeComparator_TIME_INSTANCE, new_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(nil, OrgJodaTimeDateTimeFieldType_dayOfYear()));
    J2OBJC_SET_INITIALIZED(OrgJodaTimeDateTimeComparator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeFieldType:", "getInstance", "Lorg.joda.time.DateTimeComparator;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDateTimeFieldType:", "getInstance", "Lorg.joda.time.DateTimeComparator;", 0x9, NULL, NULL },
    { "getDateOnlyInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL, NULL },
    { "getTimeOnlyInstance", NULL, "Lorg.joda.time.DateTimeComparator;", 0x9, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withOrgJodaTimeDateTimeFieldType:", "DateTimeComparator", NULL, 0x4, NULL, NULL },
    { "getLowerLimit", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "getUpperLimit", NULL, "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeDateTimeComparator_serialVersionUID },
    { "ALL_INSTANCE", "ALL_INSTANCE", 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_ALL_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "DATE_INSTANCE", "DATE_INSTANCE", 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_DATE_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "TIME_INSTANCE", "TIME_INSTANCE", 0x1a, "Lorg.joda.time.DateTimeComparator;", &OrgJodaTimeDateTimeComparator_TIME_INSTANCE, NULL, .constantValue.asLong = 0 },
    { "iLowerLimit_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL, NULL, .constantValue.asLong = 0 },
    { "iUpperLimit_", NULL, 0x12, "Lorg.joda.time.DateTimeFieldType;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeDateTimeComparator = { 2, "DateTimeComparator", "org.joda.time", NULL, 0x1, 13, methods, 6, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;Ljava/io/Serializable;" };
  return &_OrgJodaTimeDateTimeComparator;
}

@end

OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstance() {
  OrgJodaTimeDateTimeComparator_initialize();
  return OrgJodaTimeDateTimeComparator_ALL_INSTANCE;
}

OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit) {
  OrgJodaTimeDateTimeComparator_initialize();
  return OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(lowerLimit, nil);
}

OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit) {
  OrgJodaTimeDateTimeComparator_initialize();
  if (lowerLimit == nil && upperLimit == nil) {
    return OrgJodaTimeDateTimeComparator_ALL_INSTANCE;
  }
  if (lowerLimit == OrgJodaTimeDateTimeFieldType_dayOfYear() && upperLimit == nil) {
    return OrgJodaTimeDateTimeComparator_DATE_INSTANCE;
  }
  if (lowerLimit == nil && upperLimit == OrgJodaTimeDateTimeFieldType_dayOfYear()) {
    return OrgJodaTimeDateTimeComparator_TIME_INSTANCE;
  }
  return create_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(lowerLimit, upperLimit);
}

OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getDateOnlyInstance() {
  OrgJodaTimeDateTimeComparator_initialize();
  return OrgJodaTimeDateTimeComparator_DATE_INSTANCE;
}

OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getTimeOnlyInstance() {
  OrgJodaTimeDateTimeComparator_initialize();
  return OrgJodaTimeDateTimeComparator_TIME_INSTANCE;
}

void OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeComparator *self, OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit) {
  NSObject_init(self);
  JreStrongAssign(&self->iLowerLimit_, lowerLimit);
  JreStrongAssign(&self->iUpperLimit_, upperLimit);
}

OrgJodaTimeDateTimeComparator *new_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit) {
  OrgJodaTimeDateTimeComparator *self = [OrgJodaTimeDateTimeComparator alloc];
  OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(self, lowerLimit, upperLimit);
  return self;
}

OrgJodaTimeDateTimeComparator *create_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit) {
  OrgJodaTimeDateTimeComparator *self = [[OrgJodaTimeDateTimeComparator alloc] autorelease];
  OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(self, lowerLimit, upperLimit);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTimeComparator)

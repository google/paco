//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/chrono/GregorianChronology.h"
#include "org/joda/time/chrono/ISOYearOfEraDateTimeField.h"
#include "org/joda/time/field/DecoratedDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"

@interface OrgJodaTimeChronoISOYearOfEraDateTimeField ()

- (instancetype)init;

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoISOYearOfEraDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoISOYearOfEraDateTimeField_serialVersionUID 7037524068969447317LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoISOYearOfEraDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoISOYearOfEraDateTimeField_init(OrgJodaTimeChronoISOYearOfEraDateTimeField *self);

__attribute__((unused)) static OrgJodaTimeChronoISOYearOfEraDateTimeField *new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoISOYearOfEraDateTimeField *create_OrgJodaTimeChronoISOYearOfEraDateTimeField_init();

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoISOYearOfEraDateTimeField)

OrgJodaTimeDateTimeField *OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE;

@implementation OrgJodaTimeChronoISOYearOfEraDateTimeField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeChronoISOYearOfEraDateTimeField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk(OrgJodaTimeChronoGregorianChronology_getInstanceUTC())) eras];
}

- (jint)getWithLong:(jlong)instant {
  jint year = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
  return year < 0 ? -year : year;
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:years];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:years];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:years];
}

- (IOSIntArray *)addWrapFieldWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                                    withInt:(jint)fieldIndex
                                               withIntArray:(IOSIntArray *)values
                                                    withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:years];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, year, 0, [self getMaximumValue]);
  if ([((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant] < 0) {
    year = -year;
  }
  return [super setWithLong:instant withInt:year];
}

- (jint)getMinimumValue {
  return 0;
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValue];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
}

- (jlong)remainderWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
}

- (id)readResolve {
  return OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoISOYearOfEraDateTimeField class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE, new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init());
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoISOYearOfEraDateTimeField)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ISOYearOfEraDateTimeField", NULL, 0x2, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL, NULL },
    { "addWrapFieldWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:", "addWrapField", "[I", 0x1, NULL, NULL },
    { "getDifferenceWithLong:withLong:", "getDifference", "I", 0x1, NULL, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "roundCeilingWithLong:", "roundCeiling", "J", 0x1, NULL, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoISOYearOfEraDateTimeField_serialVersionUID },
    { "INSTANCE", "INSTANCE", 0x18, "Lorg.joda.time.DateTimeField;", &OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoISOYearOfEraDateTimeField = { 2, "ISOYearOfEraDateTimeField", "org.joda.time.chrono", NULL, 0x0, 16, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoISOYearOfEraDateTimeField;
}

@end

void OrgJodaTimeChronoISOYearOfEraDateTimeField_init(OrgJodaTimeChronoISOYearOfEraDateTimeField *self) {
  OrgJodaTimeFieldDecoratedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeChronoGregorianChronology *) nil_chk(OrgJodaTimeChronoGregorianChronology_getInstanceUTC())) year], OrgJodaTimeDateTimeFieldType_yearOfEra());
}

OrgJodaTimeChronoISOYearOfEraDateTimeField *new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() {
  OrgJodaTimeChronoISOYearOfEraDateTimeField *self = [OrgJodaTimeChronoISOYearOfEraDateTimeField alloc];
  OrgJodaTimeChronoISOYearOfEraDateTimeField_init(self);
  return self;
}

OrgJodaTimeChronoISOYearOfEraDateTimeField *create_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() {
  OrgJodaTimeChronoISOYearOfEraDateTimeField *self = [[OrgJodaTimeChronoISOYearOfEraDateTimeField alloc] autorelease];
  OrgJodaTimeChronoISOYearOfEraDateTimeField_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoISOYearOfEraDateTimeField)

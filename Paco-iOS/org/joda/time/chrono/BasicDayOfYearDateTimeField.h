//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE_ALL")
#ifdef OrgJodaTimeChronoBasicDayOfYearDateTimeField_RESTRICT
#define OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE_ALL 0
#else
#define OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeChronoBasicDayOfYearDateTimeField_RESTRICT

#if !defined (OrgJodaTimeChronoBasicDayOfYearDateTimeField_) && (OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE_ALL || defined(OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE))
#define OrgJodaTimeChronoBasicDayOfYearDateTimeField_

#define OrgJodaTimeFieldPreciseDurationDateTimeField_RESTRICT 1
#define OrgJodaTimeFieldPreciseDurationDateTimeField_INCLUDE 1
#include "org/joda/time/field/PreciseDurationDateTimeField.h"

@class IOSIntArray;
@class OrgJodaTimeChronoBasicChronology;
@class OrgJodaTimeDurationField;
@protocol OrgJodaTimeReadablePartial;

@interface OrgJodaTimeChronoBasicDayOfYearDateTimeField : OrgJodaTimeFieldPreciseDurationDateTimeField

#pragma mark Public

- (jint)getWithLong:(jlong)instant;

- (jint)getMaximumValue;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values;

- (jint)getMinimumValue;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

#pragma mark Protected

- (jint)getMaximumValueForSetWithLong:(jlong)instant
                              withInt:(jint)value;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology
                            withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)days;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoBasicDayOfYearDateTimeField)

FOUNDATION_EXPORT void OrgJodaTimeChronoBasicDayOfYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoBasicDayOfYearDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology, OrgJodaTimeDurationField *days);

FOUNDATION_EXPORT OrgJodaTimeChronoBasicDayOfYearDateTimeField *new_OrgJodaTimeChronoBasicDayOfYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoBasicChronology *chronology, OrgJodaTimeDurationField *days) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoBasicDayOfYearDateTimeField *create_OrgJodaTimeChronoBasicDayOfYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_withOrgJodaTimeDurationField_(OrgJodaTimeChronoBasicChronology *chronology, OrgJodaTimeDurationField *days);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoBasicDayOfYearDateTimeField)

#endif

#pragma pop_macro("OrgJodaTimeChronoBasicDayOfYearDateTimeField_INCLUDE_ALL")

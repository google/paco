//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/GregorianChronology.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeZone.h"
#include "org/joda/time/chrono/AssembledChronology.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicGJChronology.h"
#include "org/joda/time/chrono/GregorianChronology.h"
#include "org/joda/time/chrono/ZonedChronology.h"

@interface OrgJodaTimeChronoGregorianChronology ()

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoGregorianChronology_get_serialVersionUID();
#define OrgJodaTimeChronoGregorianChronology_serialVersionUID -861407383323710522LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoGregorianChronology_get_MILLIS_PER_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR 31556952000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_YEAR, jlong)

inline jlong OrgJodaTimeChronoGregorianChronology_get_MILLIS_PER_MONTH();
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH 2629746000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_MONTH, jlong)

inline jint OrgJodaTimeChronoGregorianChronology_get_DAYS_0000_TO_1970();
#define OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970 719527
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, DAYS_0000_TO_1970, jint)

inline jint OrgJodaTimeChronoGregorianChronology_get_MIN_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MIN_YEAR -292275054
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MIN_YEAR, jint)

inline jint OrgJodaTimeChronoGregorianChronology_get_MAX_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MAX_YEAR 292278993
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MAX_YEAR, jint)

inline OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_get_INSTANCE_UTC();
static OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoGregorianChronology, INSTANCE_UTC, OrgJodaTimeChronoGregorianChronology *)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGregorianChronology_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGregorianChronology_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoGregorianChronology, cCache, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoGregorianChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

__attribute__((unused)) static OrgJodaTimeChronoGregorianChronology *new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGregorianChronology *create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoGregorianChronology)

@implementation OrgJodaTimeChronoGregorianChronology

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceUTC {
  return OrgJodaTimeChronoGregorianChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstance {
  return OrgJodaTimeChronoGregorianChronology_getInstance();
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                         withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  jint minDays = [self getMinimumDaysInFirstWeek];
  minDays = (minDays == 0 ? 4 : minDays);
  return base == nil ? OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDays) : OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_([base getZone], minDays);
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  }
}

- (jboolean)isLeapYearWithInt:(jint)year {
  return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  jint leapYears = year / 100;
  if (year < 0) {
    leapYears = (JreRShift32((year + 3), 2)) - leapYears + (JreRShift32((leapYears + 3), 2)) - 1;
  }
  else {
    leapYears = (JreRShift32(year, 2)) - leapYears + (JreRShift32(leapYears, 2));
    if ([self isLeapYearWithInt:year]) {
      leapYears--;
    }
  }
  return (year * 365LL + (leapYears - OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970)) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getMinYear {
  return OrgJodaTimeChronoGregorianChronology_MIN_YEAR;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoGregorianChronology_MAX_YEAR;
}

- (jlong)getAverageMillisPerYear {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR / 2;
}

- (jlong)getAverageMillisPerMonth {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (1970LL * OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR) / 2;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGregorianChronology class]) {
    JreStrongAssignAndConsume(&OrgJodaTimeChronoGregorianChronology_cCache, new_JavaUtilConcurrentConcurrentHashMap_init());
    {
      JreStrongAssign(&OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC, OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoGregorianChronology)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstanceUTC", NULL, "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL, NULL },
    { "getInstance", NULL, "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:", "getInstance", "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL, NULL },
    { "getInstanceWithOrgJodaTimeDateTimeZone:withInt:", "getInstance", "Lorg.joda.time.chrono.GregorianChronology;", 0x9, NULL, NULL },
    { "initWithOrgJodaTimeChronology:withId:withInt:", "GregorianChronology", NULL, 0x2, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "withUTC", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "withZoneWithOrgJodaTimeDateTimeZone:", "withZone", "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "assembleWithOrgJodaTimeChronoAssembledChronology_Fields:", "assemble", "V", 0x4, NULL, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x0, NULL, NULL },
    { "calculateFirstDayOfYearMillisWithInt:", "calculateFirstDayOfYearMillis", "J", 0x0, NULL, NULL },
    { "getMinYear", NULL, "I", 0x0, NULL, NULL },
    { "getMaxYear", NULL, "I", 0x0, NULL, NULL },
    { "getAverageMillisPerYear", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerYearDividedByTwo", NULL, "J", 0x0, NULL, NULL },
    { "getAverageMillisPerMonth", NULL, "J", 0x0, NULL, NULL },
    { "getApproxMillisAtEpochDividedByTwo", NULL, "J", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_serialVersionUID },
    { "MILLIS_PER_YEAR", "MILLIS_PER_YEAR", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR },
    { "MILLIS_PER_MONTH", "MILLIS_PER_MONTH", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH },
    { "DAYS_0000_TO_1970", "DAYS_0000_TO_1970", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970 },
    { "MIN_YEAR", "MIN_YEAR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MIN_YEAR },
    { "MAX_YEAR", "MAX_YEAR", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MAX_YEAR },
    { "INSTANCE_UTC", "INSTANCE_UTC", 0x1a, "Lorg.joda.time.chrono.GregorianChronology;", &OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC, NULL, .constantValue.asLong = 0 },
    { "cCache", "cCache", 0x1a, "Ljava.util.concurrent.ConcurrentHashMap;", &OrgJodaTimeChronoGregorianChronology_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/DateTimeZone;L[Lorg/joda/time/chrono/GregorianChronology;;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGregorianChronology = { 2, "GregorianChronology", "org.joda.time.chrono", NULL, 0x11, 17, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoGregorianChronology;
}

@end

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceUTC() {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstance() {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_getDefault(), 4);
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, 4);
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGregorianChronology_initialize();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoGregorianChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGregorianChronology_cCache)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray arrayWithLength:7 type:OrgJodaTimeChronoGregorianChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoGregorianChronology_cCache putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek));
  }
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(nil_chk(chronos), minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
          chrono = create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(nil, nil, minDaysInFirstWeek);
        }
        else {
          chrono = OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDaysInFirstWeek);
          chrono = create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone), nil, minDaysInFirstWeek);
        }
        IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

void OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoGregorianChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoBasicGJChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
}

OrgJodaTimeChronoGregorianChronology *new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGregorianChronology *self = [OrgJodaTimeChronoGregorianChronology alloc];
  OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

OrgJodaTimeChronoGregorianChronology *create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGregorianChronology *self = [[OrgJodaTimeChronoGregorianChronology alloc] autorelease];
  OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGregorianChronology)

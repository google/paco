//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/joda/time/DateTimeConstants.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/chrono/BasicChronology.h"
#include "org/joda/time/chrono/BasicWeekyearDateTimeField.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/field/ImpreciseDateTimeField.h"

@interface OrgJodaTimeChronoBasicWeekyearDateTimeField () {
 @public
  OrgJodaTimeChronoBasicChronology *iChronology_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicWeekyearDateTimeField, iChronology_, OrgJodaTimeChronoBasicChronology *)

inline jlong OrgJodaTimeChronoBasicWeekyearDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_serialVersionUID 6215066916806820644LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicWeekyearDateTimeField, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoBasicWeekyearDateTimeField_get_WEEK_53();
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 31449600000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicWeekyearDateTimeField, WEEK_53, jlong)

@implementation OrgJodaTimeChronoBasicWeekyearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

- (jboolean)isLenient {
  return false;
}

- (jint)getWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years {
  if (years == 0) {
    return instant;
  }
  return [self setWithLong:instant withInt:[self getWithLong:instant] + years];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [self addWithLong:instant withInt:OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(value)];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years {
  return [self addWithLong:instant withInt:years];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[self getDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  jint minuendWeekyear = [self getWithLong:minuendInstant];
  jint subtrahendWeekyear = [self getWithLong:subtrahendInstant];
  jlong minuendRem = [self remainderWithLong:minuendInstant];
  jlong subtrahendRem = [self remainderWithLong:subtrahendInstant];
  if (subtrahendRem >= OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 && [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:minuendWeekyear] <= 52) {
    subtrahendRem -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  jint difference = minuendWeekyear - subtrahendWeekyear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, JavaLangMath_absWithInt_(year), [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear], [iChronology_ getMaxYear]);
  jint thisWeekyear = [self getWithLong:instant];
  if (thisWeekyear == year) {
    return instant;
  }
  jint thisDow = [iChronology_ getDayOfWeekWithLong:instant];
  jint weeksInFromYear = [iChronology_ getWeeksInYearWithInt:thisWeekyear];
  jint weeksInToYear = [iChronology_ getWeeksInYearWithInt:year];
  jint maxOutWeeks = (weeksInToYear < weeksInFromYear) ? weeksInToYear : weeksInFromYear;
  jint setToWeek = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (setToWeek > maxOutWeeks) {
    setToWeek = maxOutWeeks;
  }
  jlong workInstant = instant;
  workInstant = [iChronology_ setYearWithLong:workInstant withInt:year];
  jint workWoyYear = [self getWithLong:workInstant];
  if (workWoyYear < year) {
    workInstant += OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  else if (workWoyYear > year) {
    workInstant -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  jint currentWoyWeek = [iChronology_ getWeekOfWeekyearWithLong:workInstant];
  workInstant = workInstant + (setToWeek - currentWoyWeek) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  workInstant = [((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ dayOfWeek])) setWithLong:workInstant withInt:thisDow];
  return workInstant;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  return [iChronology_ getWeeksInYearWithInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant]] > 52;
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  return [iChronology_ getWeeksInYearWithInt:[((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant]] - 52;
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weeks];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMaxYear];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekOfWeekyear])) roundFloorWithLong:instant];
  jint wow = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (wow > 1) {
    instant -= ((jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK) * (wow - 1);
  }
  return instant;
}

- (jlong)remainderWithLong:(jlong)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekyear];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimeChronoBasicChronology:", "BasicWeekyearDateTimeField", NULL, 0x0, NULL, NULL },
    { "isLenient", NULL, "Z", 0x1, NULL, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL, NULL },
    { "addWithLong:withInt:", "add", "J", 0x1, NULL, NULL },
    { "addWithLong:withLong:", "add", "J", 0x1, NULL, NULL },
    { "addWrapFieldWithLong:withInt:", "addWrapField", "J", 0x1, NULL, NULL },
    { "getDifferenceAsLongWithLong:withLong:", "getDifferenceAsLong", "J", 0x1, NULL, NULL },
    { "setWithLong:withInt:", "set", "J", 0x1, NULL, NULL },
    { "getRangeDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "isLeapWithLong:", "isLeap", "Z", 0x1, NULL, NULL },
    { "getLeapAmountWithLong:", "getLeapAmount", "I", 0x1, NULL, NULL },
    { "getLeapDurationField", NULL, "Lorg.joda.time.DurationField;", 0x1, NULL, NULL },
    { "getMinimumValue", NULL, "I", 0x1, NULL, NULL },
    { "getMaximumValue", NULL, "I", 0x1, NULL, NULL },
    { "roundFloorWithLong:", "roundFloor", "J", 0x1, NULL, NULL },
    { "remainderWithLong:", "remainder", "J", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_serialVersionUID },
    { "WEEK_53", "WEEK_53", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.chrono.BasicChronology;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicWeekyearDateTimeField = { 2, "BasicWeekyearDateTimeField", "org.joda.time.chrono", NULL, 0x10, 17, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimeChronoBasicWeekyearDateTimeField;
}

@end

void OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicWeekyearDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeFieldImpreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withLong_(self, OrgJodaTimeDateTimeFieldType_weekyear(), [((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerYear]);
  JreStrongAssign(&self->iChronology_, chronology);
}

OrgJodaTimeChronoBasicWeekyearDateTimeField *new_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeChronoBasicWeekyearDateTimeField *self = [OrgJodaTimeChronoBasicWeekyearDateTimeField alloc];
  OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

OrgJodaTimeChronoBasicWeekyearDateTimeField *create_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeChronoBasicWeekyearDateTimeField *self = [[OrgJodaTimeChronoBasicWeekyearDateTimeField alloc] autorelease];
  OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicWeekyearDateTimeField)

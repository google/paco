//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/chrono/GregorianChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeChronoGregorianChronology_INCLUDE_ALL")
#ifdef OrgJodaTimeChronoGregorianChronology_RESTRICT
#define OrgJodaTimeChronoGregorianChronology_INCLUDE_ALL 0
#else
#define OrgJodaTimeChronoGregorianChronology_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeChronoGregorianChronology_RESTRICT

#if !defined (OrgJodaTimeChronoGregorianChronology_) && (OrgJodaTimeChronoGregorianChronology_INCLUDE_ALL || defined(OrgJodaTimeChronoGregorianChronology_INCLUDE))
#define OrgJodaTimeChronoGregorianChronology_

#define OrgJodaTimeChronoBasicGJChronology_RESTRICT 1
#define OrgJodaTimeChronoBasicGJChronology_INCLUDE 1
#include "org/joda/time/chrono/BasicGJChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

@interface OrgJodaTimeChronoGregorianChronology : OrgJodaTimeChronoBasicGJChronology

#pragma mark Public

+ (OrgJodaTimeChronoGregorianChronology *)getInstance;

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                         withInt:(jint)minDaysInFirstWeek;

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceUTC;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (jlong)getAverageMillisPerMonth;

- (jlong)getAverageMillisPerYear;

- (jlong)getAverageMillisPerYearDividedByTwo;

- (jint)getMaxYear;

- (jint)getMinYear;

- (jboolean)isLeapYearWithInt:(jint)year;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoGregorianChronology)

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoGregorianChronology)

#endif

#pragma pop_macro("OrgJodaTimeChronoGregorianChronology_INCLUDE_ALL")

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/Partial.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "org/joda/time/Chronology.h"
#include "org/joda/time/DateTimeField.h"
#include "org/joda/time/DateTimeFieldType.h"
#include "org/joda/time/DateTimeUtils.h"
#include "org/joda/time/DurationField.h"
#include "org/joda/time/DurationFieldType.h"
#include "org/joda/time/Partial.h"
#include "org/joda/time/ReadableInstant.h"
#include "org/joda/time/ReadablePartial.h"
#include "org/joda/time/ReadablePeriod.h"
#include "org/joda/time/base/AbstractPartial.h"
#include "org/joda/time/field/AbstractPartialFieldProperty.h"
#include "org/joda/time/field/FieldUtils.h"
#include "org/joda/time/format/DateTimeFormat.h"
#include "org/joda/time/format/DateTimeFormatter.h"
#include "org/joda/time/format/ISODateTimeFormat.h"

@interface OrgJodaTimePartial () {
 @public
  OrgJodaTimeChronology *iChronology_;
  IOSObjectArray *iTypes_;
  IOSIntArray *iValues_;
  IOSObjectArray *iFormatter_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iChronology_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iValues_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iFormatter_, IOSObjectArray *)

inline jlong OrgJodaTimePartial_get_serialVersionUID();
#define OrgJodaTimePartial_serialVersionUID 12324121189002LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimePartial, serialVersionUID, jlong)

@interface OrgJodaTimePartial_Property () {
 @public
  OrgJodaTimePartial *iPartial_;
  jint iFieldIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimePartial_Property, iPartial_, OrgJodaTimePartial *)

inline jlong OrgJodaTimePartial_Property_get_serialVersionUID();
#define OrgJodaTimePartial_Property_serialVersionUID 53278362873888LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimePartial_Property, serialVersionUID, jlong)

@implementation OrgJodaTimePartial

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimePartial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, chrono);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(self, type, value);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value
                           withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, types, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values
                                withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(self, partial);
  return self;
}

- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                              withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, partial, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
        withOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                 withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, chronology, types, values);
  return self;
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(iTypes_))->size_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(nil_chk(iTypes_), index))) getFieldWithOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(iTypes_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return [((IOSObjectArray *) nil_chk(iTypes_)) clone];
}

- (jint)getValueWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (IOSIntArray *)getValues {
  return [((IOSIntArray *) nil_chk(iValues_)) clone];
}

- (OrgJodaTimePartial *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimePartial *newPartial = create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(newChronology, iTypes_, iValues_);
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:iValues_];
    return newPartial;
  }
}

- (OrgJodaTimePartial *)withWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                     withInt:(jint)value {
  if (fieldType == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The field type must not be null");
  }
  jint index = [self indexOfWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (index == -1) {
    IOSObjectArray *newTypes = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(iTypes_))->size_ + 1 type:OrgJodaTimeDateTimeFieldType_class_()];
    IOSIntArray *newValues = [IOSIntArray arrayWithLength:newTypes->size_];
    jint i = 0;
    OrgJodaTimeDurationField *unitField = [((OrgJodaTimeDurationFieldType *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
    if ([((OrgJodaTimeDurationField *) nil_chk(unitField)) isSupported]) {
      for (; i < iTypes_->size_; i++) {
        OrgJodaTimeDateTimeFieldType *loopType = IOSObjectArray_Get(iTypes_, i);
        OrgJodaTimeDurationField *loopUnitField = [((OrgJodaTimeDurationFieldType *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(loopType)) getDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
        if ([((OrgJodaTimeDurationField *) nil_chk(loopUnitField)) isSupported]) {
          jint compare = [unitField compareToWithId:loopUnitField];
          if (compare > 0) {
            break;
          }
          else if (compare == 0) {
            if ([fieldType getRangeDurationType] == nil) {
              break;
            }
            if ([loopType getRangeDurationType] == nil) {
              continue;
            }
            OrgJodaTimeDurationField *rangeField = [((OrgJodaTimeDurationFieldType *) nil_chk([fieldType getRangeDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
            OrgJodaTimeDurationField *loopRangeField = [((OrgJodaTimeDurationFieldType *) nil_chk([loopType getRangeDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
            if ([((OrgJodaTimeDurationField *) nil_chk(rangeField)) compareToWithId:loopRangeField] > 0) {
              break;
            }
          }
        }
      }
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, 0, newTypes, 0, i);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, 0, newValues, 0, i);
    IOSObjectArray_Set(newTypes, i, fieldType);
    *IOSIntArray_GetRef(newValues, i) = value;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, i, newTypes, i + 1, newTypes->size_ - i - 1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, i, newValues, i + 1, newValues->size_ - i - 1);
    OrgJodaTimePartial *newPartial = create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(newTypes, newValues, iChronology_);
    [((OrgJodaTimeChronology *) nil_chk(iChronology_)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:newValues];
    return newPartial;
  }
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withoutWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  jint index = [self indexOfWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (index != -1) {
    IOSObjectArray *newTypes = [IOSObjectArray arrayWithLength:[self size] - 1 type:OrgJodaTimeDateTimeFieldType_class_()];
    IOSIntArray *newValues = [IOSIntArray arrayWithLength:[self size] - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, 0, newTypes, 0, index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, index + 1, newTypes, index, newTypes->size_ - index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, 0, newValues, 0, index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, index + 1, newValues, index, newValues->size_ - index);
    OrgJodaTimePartial *newPartial = create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(iChronology_, newTypes, newValues);
    [((OrgJodaTimeChronology *) nil_chk(iChronology_)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:newValues];
    return newPartial;
  }
  return self;
}

- (OrgJodaTimePartial *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                          withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                               withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withFieldAddWrappedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                    withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                             withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [((id<OrgJodaTimeReadablePeriod>) nil_chk(period)) size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimePartial *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimePartial_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return create_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]);
}

- (jboolean)isMatchWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong millis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(iTypes_))->size_; i++) {
    jint value = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(iTypes_, i))) getFieldWithOrgJodaTimeChronology:chrono])) getWithLong:millis];
    if (value != IOSIntArray_Get(nil_chk(iValues_), i)) {
      return false;
    }
  }
  return true;
}

- (jboolean)isMatchWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The partial must not be null");
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(iTypes_))->size_; i++) {
    jint value = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getWithOrgJodaTimeDateTimeFieldType:IOSObjectArray_Get(iTypes_, i)];
    if (value != IOSIntArray_Get(nil_chk(iValues_), i)) {
      return false;
    }
  }
  return true;
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatter {
  IOSObjectArray *f = iFormatter_;
  if (f == nil) {
    if ([self size] == 0) {
      return nil;
    }
    f = [IOSObjectArray arrayWithLength:2 type:OrgJodaTimeFormatDateTimeFormatter_class_()];
    @try {
      id<JavaUtilList> list = create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(iTypes_));
      IOSObjectArray_Set(f, 0, OrgJodaTimeFormatISODateTimeFormat_forFieldsWithJavaUtilCollection_withBoolean_withBoolean_(list, true, false));
      if ([list size] == 0) {
        IOSObjectArray_Set(f, 1, IOSObjectArray_Get(f, 0));
      }
    }
    @catch (JavaLangIllegalArgumentException *ex) {
    }
    JreStrongAssign(&iFormatter_, f);
  }
  return IOSObjectArray_Get(nil_chk(f), 0);
}

- (NSString *)description {
  IOSObjectArray *f = iFormatter_;
  if (f == nil) {
    [self getFormatter];
    f = iFormatter_;
    if (f == nil) {
      return [self toStringList];
    }
  }
  OrgJodaTimeFormatDateTimeFormatter *f1 = IOSObjectArray_Get(nil_chk(f), 1);
  if (f1 == nil) {
    return [self toStringList];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(f1)) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringList {
  jint size = [self size];
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(20 * size);
  [buf appendWithChar:'['];
  for (jint i = 0; i < size; i++) {
    if (i > 0) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:','])) appendWithChar:' '];
    }
    [buf appendWithNSString:[((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(nil_chk(iTypes_), i))) getName]];
    [buf appendWithChar:'='];
    [buf appendWithInt:IOSIntArray_Get(nil_chk(iValues_), i)];
  }
  [buf appendWithChar:']'];
  return [buf description];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

- (void)dealloc {
  RELEASE_(iChronology_);
  RELEASE_(iTypes_);
  RELEASE_(iValues_);
  RELEASE_(iFormatter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeChronology:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeFieldType:withInt:withOrgJodaTimeChronology:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeFieldTypeArray:withIntArray:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeDateTimeFieldTypeArray:withIntArray:withOrgJodaTimeChronology:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimeReadablePartial:", "Partial", NULL, 0x1, NULL, NULL },
    { "initWithOrgJodaTimePartial:withIntArray:", "Partial", NULL, 0x0, NULL, NULL },
    { "initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeFieldTypeArray:withIntArray:", "Partial", NULL, 0x0, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getChronology", NULL, "Lorg.joda.time.Chronology;", 0x1, NULL, NULL },
    { "getFieldWithInt:withOrgJodaTimeChronology:", "getField", "Lorg.joda.time.DateTimeField;", 0x4, NULL, NULL },
    { "getFieldTypeWithInt:", "getFieldType", "Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "getFieldTypes", NULL, "[Lorg.joda.time.DateTimeFieldType;", 0x1, NULL, NULL },
    { "getValueWithInt:", "getValue", "I", 0x1, NULL, NULL },
    { "getValues", NULL, "[I", 0x1, NULL, NULL },
    { "withChronologyRetainFieldsWithOrgJodaTimeChronology:", "withChronologyRetainFields", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withWithOrgJodaTimeDateTimeFieldType:withInt:", "with", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withoutWithOrgJodaTimeDateTimeFieldType:", "without", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withFieldWithOrgJodaTimeDateTimeFieldType:withInt:", "withField", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAdded", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withFieldAddWrappedWithOrgJodaTimeDurationFieldType:withInt:", "withFieldAddWrapped", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:", "withPeriodAdded", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "plusWithOrgJodaTimeReadablePeriod:", "plus", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "minusWithOrgJodaTimeReadablePeriod:", "minus", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "propertyWithOrgJodaTimeDateTimeFieldType:", "property", "Lorg.joda.time.Partial$Property;", 0x1, NULL, NULL },
    { "isMatchWithOrgJodaTimeReadableInstant:", "isMatch", "Z", 0x1, NULL, NULL },
    { "isMatchWithOrgJodaTimeReadablePartial:", "isMatch", "Z", 0x1, NULL, NULL },
    { "getFormatter", NULL, "Lorg.joda.time.format.DateTimeFormatter;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringList", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithNSString:withJavaUtilLocale:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimePartial_serialVersionUID },
    { "iChronology_", NULL, 0x12, "Lorg.joda.time.Chronology;", NULL, NULL, .constantValue.asLong = 0 },
    { "iTypes_", NULL, 0x12, "[Lorg.joda.time.DateTimeFieldType;", NULL, NULL, .constantValue.asLong = 0 },
    { "iValues_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "iFormatter_", NULL, 0x82, "[Lorg.joda.time.format.DateTimeFormatter;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.joda.time.Partial$Property;"};
  static const J2ObjcClassInfo _OrgJodaTimePartial = { 2, "Partial", "org.joda.time", NULL, 0x11, 33, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgJodaTimePartial;
}

@end

void OrgJodaTimePartial_init(OrgJodaTimePartial *self) {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_init() {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_init(self);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_init() {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_init(self);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  JreStrongAssign(&self->iChronology_, [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) withUTC]);
  JreStrongAssignAndConsume(&self->iTypes_, [IOSObjectArray newArrayWithLength:0 type:OrgJodaTimeDateTimeFieldType_class_()]);
  JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithLength:0]);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, chrono);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, chrono);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value) {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(self, type, value);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(self, type, value);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  JreStrongAssign(&self->iChronology_, chronology);
  if (type == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The field type must not be null");
  }
  JreStrongAssignAndConsume(&self->iTypes_, [IOSObjectArray newArrayWithObjects:(id[]){ type } count:1 type:OrgJodaTimeDateTimeFieldType_class_()]);
  JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithInts:(jint[]){ value } count:1]);
  [((OrgJodaTimeChronology *) nil_chk(chronology)) validateWithOrgJodaTimeReadablePartial:self withIntArray:self->iValues_];
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, chronology);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, chronology);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, types, values);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, types, values);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  JreStrongAssign(&self->iChronology_, chronology);
  if (types == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Types array must not be null");
  }
  if (values == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Values array must not be null");
  }
  if (((IOSIntArray *) nil_chk(values))->size_ != ((IOSObjectArray *) nil_chk(types))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Values array must be the same length as the types array");
  }
  if (types->size_ == 0) {
    JreStrongAssign(&self->iTypes_, types);
    JreStrongAssign(&self->iValues_, values);
    return;
  }
  for (jint i = 0; i < types->size_; i++) {
    if (IOSObjectArray_Get(types, i) == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Types array must not contain null: index ", i));
    }
  }
  OrgJodaTimeDurationField *lastUnitField = nil;
  for (jint i = 0; i < types->size_; i++) {
    OrgJodaTimeDateTimeFieldType *loopType = IOSObjectArray_Get(types, i);
    OrgJodaTimeDurationField *loopUnitField = [((OrgJodaTimeDurationFieldType *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(loopType)) getDurationType])) getFieldWithOrgJodaTimeChronology:self->iChronology_];
    if (i > 0) {
      if ([((OrgJodaTimeDurationField *) nil_chk(loopUnitField)) isSupported] == false) {
        if ([((OrgJodaTimeDurationField *) nil_chk(lastUnitField)) isSupported]) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
        }
        else {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate unsupported: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
        }
      }
      jint compare = [((OrgJodaTimeDurationField *) nil_chk(lastUnitField)) compareToWithId:loopUnitField];
      if (compare < 0) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
      }
      else if (compare == 0) {
        if ([lastUnitField isEqual:loopUnitField]) {
          OrgJodaTimeDurationFieldType *lastRangeType = [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getRangeDurationType];
          OrgJodaTimeDurationFieldType *loopRangeType = [loopType getRangeDurationType];
          if (lastRangeType == nil) {
            if (loopRangeType == nil) {
              @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
            }
          }
          else {
            if (loopRangeType == nil) {
              @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
            }
            OrgJodaTimeDurationField *lastRangeField = [lastRangeType getFieldWithOrgJodaTimeChronology:self->iChronology_];
            OrgJodaTimeDurationField *loopRangeField = [((OrgJodaTimeDurationFieldType *) nil_chk(loopRangeType)) getFieldWithOrgJodaTimeChronology:self->iChronology_];
            if ([((OrgJodaTimeDurationField *) nil_chk(lastRangeField)) compareToWithId:loopRangeField] < 0) {
              @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
            }
            if ([lastRangeField compareToWithId:loopRangeField] == 0) {
              @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
            }
          }
        }
        else {
          if ([lastUnitField isSupported] && [lastUnitField getType] != JreLoadStatic(OrgJodaTimeDurationFieldType, YEARS_TYPE)) {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
          }
        }
      }
    }
    lastUnitField = loopUnitField;
  }
  JreStrongAssign(&self->iTypes_, [types clone]);
  [((OrgJodaTimeChronology *) nil_chk(chronology)) validateWithOrgJodaTimeReadablePartial:self withIntArray:values];
  JreStrongAssign(&self->iValues_, [values clone]);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, chronology);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, chronology);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(OrgJodaTimePartial *self, id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  if (partial == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The partial must not be null");
  }
  JreStrongAssign(&self->iChronology_, [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getChronology]))) withUTC]);
  JreStrongAssignAndConsume(&self->iTypes_, [IOSObjectArray newArrayWithLength:[partial size] type:OrgJodaTimeDateTimeFieldType_class_()]);
  JreStrongAssignAndConsume(&self->iValues_, [IOSIntArray newArrayWithLength:[partial size]]);
  for (jint i = 0; i < [partial size]; i++) {
    IOSObjectArray_Set(self->iTypes_, i, [partial getFieldTypeWithInt:i]);
    *IOSIntArray_GetRef(self->iValues_, i) = [partial getValueWithInt:i];
  }
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(self, partial);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(self, partial);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimePartial *partial, IOSIntArray *values) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  JreStrongAssign(&self->iChronology_, ((OrgJodaTimePartial *) nil_chk(partial))->iChronology_);
  JreStrongAssign(&self->iTypes_, partial->iTypes_);
  JreStrongAssign(&self->iValues_, values);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, partial, values);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, partial, values);
  return self;
}

void OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  JreStrongAssign(&self->iChronology_, chronology);
  JreStrongAssign(&self->iTypes_, types);
  JreStrongAssign(&self->iValues_, values);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial *self = [OrgJodaTimePartial alloc];
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, chronology, types, values);
  return self;
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial *self = [[OrgJodaTimePartial alloc] autorelease];
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, chronology, types, values);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimePartial)

@implementation OrgJodaTimePartial_Property

- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                                   withInt:(jint)fieldIndex {
  OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, partial, fieldIndex);
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimePartial *) nil_chk(iPartial_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iPartial_;
}

- (OrgJodaTimePartial *)getPartial {
  return iPartial_;
}

- (jint)get {
  return [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimePartial *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimePartial *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimePartial *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (void)dealloc {
  RELEASE_(iPartial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJodaTimePartial:withInt:", "Property", NULL, 0x0, NULL, NULL },
    { "getField", NULL, "Lorg.joda.time.DateTimeField;", 0x1, NULL, NULL },
    { "getReadablePartial", NULL, "Lorg.joda.time.ReadablePartial;", 0x4, NULL, NULL },
    { "getPartial", NULL, "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "get", NULL, "I", 0x1, NULL, NULL },
    { "addToCopyWithInt:", "addToCopy", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "addWrapFieldToCopyWithInt:", "addWrapFieldToCopy", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "setCopyWithInt:", "setCopy", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "setCopyWithNSString:withJavaUtilLocale:", "setCopy", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "setCopyWithNSString:", "setCopy", "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withMaximumValue", NULL, "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
    { "withMinimumValue", NULL, "Lorg.joda.time.Partial;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgJodaTimePartial_Property_serialVersionUID },
    { "iPartial_", NULL, 0x12, "Lorg.joda.time.Partial;", NULL, NULL, .constantValue.asLong = 0 },
    { "iFieldIndex_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgJodaTimePartial_Property = { 2, "Property", "org.joda.time", "Partial", 0x9, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgJodaTimePartial_Property;
}

@end

void OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial_Property *self, OrgJodaTimePartial *partial, jint fieldIndex) {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  JreStrongAssign(&self->iPartial_, partial);
  self->iFieldIndex_ = fieldIndex;
}

OrgJodaTimePartial_Property *new_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex) {
  OrgJodaTimePartial_Property *self = [OrgJodaTimePartial_Property alloc];
  OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, partial, fieldIndex);
  return self;
}

OrgJodaTimePartial_Property *create_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex) {
  OrgJodaTimePartial_Property *self = [[OrgJodaTimePartial_Property alloc] autorelease];
  OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, partial, fieldIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimePartial_Property)

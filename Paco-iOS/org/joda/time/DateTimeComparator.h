//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: joda-time/src/main/java/org/joda/time/DateTimeComparator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("OrgJodaTimeDateTimeComparator_INCLUDE_ALL")
#ifdef OrgJodaTimeDateTimeComparator_RESTRICT
#define OrgJodaTimeDateTimeComparator_INCLUDE_ALL 0
#else
#define OrgJodaTimeDateTimeComparator_INCLUDE_ALL 1
#endif
#undef OrgJodaTimeDateTimeComparator_RESTRICT

#if !defined (OrgJodaTimeDateTimeComparator_) && (OrgJodaTimeDateTimeComparator_INCLUDE_ALL || defined(OrgJodaTimeDateTimeComparator_INCLUDE))
#define OrgJodaTimeDateTimeComparator_

#define JavaUtilComparator_RESTRICT 1
#define JavaUtilComparator_INCLUDE 1
#include "java/util/Comparator.h"

#define JavaIoSerializable_RESTRICT 1
#define JavaIoSerializable_INCLUDE 1
#include "java/io/Serializable.h"

@class OrgJodaTimeDateTimeFieldType;

@interface OrgJodaTimeDateTimeComparator : NSObject < JavaUtilComparator, JavaIoSerializable >

#pragma mark Public

- (jint)compareWithId:(id)lhsObj
               withId:(id)rhsObj;

- (jboolean)isEqual:(id)object;

+ (OrgJodaTimeDateTimeComparator *)getDateOnlyInstance;

+ (OrgJodaTimeDateTimeComparator *)getInstance;

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit;

+ (OrgJodaTimeDateTimeComparator *)getInstanceWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                                              withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit;

- (OrgJodaTimeDateTimeFieldType *)getLowerLimit;

+ (OrgJodaTimeDateTimeComparator *)getTimeOnlyInstance;

- (OrgJodaTimeDateTimeFieldType *)getUpperLimit;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)lowerLimit
                    withOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)upperLimit;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeDateTimeComparator)

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstance();

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit);

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getInstanceWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit);

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getDateOnlyInstance();

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *OrgJodaTimeDateTimeComparator_getTimeOnlyInstance();

FOUNDATION_EXPORT void OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeComparator *self, OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit);

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *new_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeDateTimeComparator *create_OrgJodaTimeDateTimeComparator_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDateTimeFieldType_(OrgJodaTimeDateTimeFieldType *lowerLimit, OrgJodaTimeDateTimeFieldType *upperLimit);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeDateTimeComparator)

#endif

#pragma pop_macro("OrgJodaTimeDateTimeComparator_INCLUDE_ALL")

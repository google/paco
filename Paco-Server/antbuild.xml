<!--
 ~ Copyright 2011 Google Inc. All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance  with the License.  
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
 <project default="build" basedir=".">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  <property name="sdk.dir" location="../tools/appengine-java-sdk-1.9.0" />
  <property file="${environ}.properties"></property>
  
  <import file="${sdk.dir}/config/user/ant-macros.xml" />

  <path id="project.classpath">
    <pathelement path="ear/default/WEB-INF/classes" />
    <fileset dir="ear/default/WEB-INF/lib">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${sdk.dir}/lib">
      <include name="shared/**/*.jar" />
    </fileset>
    <fileset dir="../Shared/dist">
      <include name="**/shared.jar" />
    </fileset>
  </path>

  <target name="copyjars"
      description="Copies the App Engine JARs to the WAR.">
    <copy
        todir="ear/default/WEB-INF/lib"
        flatten="true">
      <fileset dir="${sdk.dir}/lib/user">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <target name="build-shared">
    <subant target="copy-shared">
      <fileset dir=".." includes="build.xml"/>
    </subant>
  </target>

  <target name="compile" depends="build-shared,copyjars"
      description="Compiles Java source and copies other source files to the WAR.">
    <mkdir dir="ear/default/WEB-INF/classes" />
    <copy todir="ear/default/WEB-INF/classes">
      <fileset dir="src">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac
        srcdir="src"
        destdir="ear/default/WEB-INF/classes"
        classpathref="project.classpath"
        target="1.7"
        source="1.7"
        debug="on" />
  </target>

  <target name="datanucleusenhance" depends="compile"
      description="Performs JDO enhancement on compiled data classes.">
    <enhance_war war="ear/default" />
  </target>

  <target name="runserver" depends="build"
      description="Starts the development server.">
    <dev_appserver war="ear" address="0.0.0.0">
      <options>
        <arg value="--jvm_flag=-Dappengine.user.timezone=UTC"/>
      </options>
    </dev_appserver>
  </target>

  <target name="gulp" depends="build">
    <copy todir="build">
      <fileset dir="ear"/>
    </copy>
    <exec executable="gulp"></exec>
  </target>

  <target name="runserver_gulp" depends="gulp"
      description="Starts the development server with gulped build.">
    <dev_appserver war="build" address="0.0.0.0">
      <options>
        <arg value="--jvm_flag=-Dappengine.user.timezone=UTC"/>
      </options>
    </dev_appserver>
  </target>

<target name="runserver_debug" description="Starts the development server in debug mode.">
    <dev_appserver war="ear" port="8888" address="0.0.0.0">
      <options>
        <arg value="--jvm_flag=-Dappengine.user.timezone=UTC"/>
        <arg value="--jvm_flag=-Xdebug"/>
        <arg value="--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9999"/>
      </options>
    </dev_appserver>
  </target>

  <target name="runserver_only"
      description="Starts the development server. Must already be built.">
    <dev_appserver war="ear" address="0.0.0.0">
      <options>
          <arg value="--jvm_flag=-Dappengine.user.timezone=UTC"/>
	   </options>
    </dev_appserver>
  </target>

  <target name="update" depends="build"
      description="Uploads the application to App Engine.">
    <appcfg action="update" war="ear" />
  </target>

  <target name="update_only" 
      description="Uploads the application to App Engine - NO BUILD.">
    <appcfg action="update" war="ear" />
  </target>

  <target name="update_gulp" depends="build,gulp"
    description="Uploads the gulped application to App Engine.">
    <appcfg action="update" war="build" />
  </target>

  <target name="update_gulp_only"
    description="Uploads the gulped application to App Engine - NO BUILD.">
    <appcfg action="update" war="build" />
  </target>

  <target name="update_indexes" depends="datanucleusenhance"
      description="Uploads just the datastore index configuration to App Engine.">
    <appcfg action="update_indexes" war="ear" />
  </target>

  <target name="rollback" depends="datanucleusenhance"
      description="Rolls back an interrupted application update.">
    <appcfg action="rollback" war="ear" />
  </target>

  <target name="request_logs"
      description="Downloads log data from App Engine for the application.">
    <appcfg action="request_logs" war="ear">
      <options>
        <arg value="--num_days=5"/>
      </options>
      <args>
        <arg value="logs.txt"/>
      </args>
    </appcfg>
  </target>

  <!-- Arguments to gwtc and devmode targets -->
  <property name="gwt.args" value="-style PRETTY" />

  <!-- Configure path to GWT SDK -->
  <property name="gwt.sdk" location="../tools/gwt-2.6.0" />

  <path id="gwt.project.class.path">
    <pathelement location="ear/default/WEB-INF/classes"/>
    <pathelement location="${gwt.sdk}/gwt-user.jar"/>
    <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
    <fileset dir="${sdk.dir}" includes="*.jar"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="ear/default/WEB-INF/lib" includes="**/*.jar"/>
  </path>

  <target name="libs" description="Copy libs to WEB-INF/lib">
    <mkdir dir="ear/default/WEB-INF/lib" />
    <copy todir="ear/default/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
    <copy todir="ear/default/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
    <copy todir="ear/default/WEB-INF/lib" file="../Shared/dist/shared.jar" />
    <!-- Add any additional server libs that need to be copied -->
  </target>

  <target name="javac" depends="libs" description="Compile java source to bytecode">
    <mkdir dir="ear/default/WEB-INF/classes"/>
    <javac srcdir="src" includes="**" encoding="utf-8"
        destdir="ear/default/WEB-INF/classes"
        source="1.5" target="1.5" nowarn="true"
        debug="true" debuglevel="lines,vars,source">
      <classpath refid="gwt.project.class.path"/>
    </javac>
    <copy todir="ear/default/WEB-INF/classes">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="src"/>
        <path refid="gwt.project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <arg line="-war"/>
      <arg value="ear/default"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="com.google.sampling.experiential.PacoEventserver"/>
    </java>
  </target>

  <target name="symlinks_for_reportworker">
    <symlink link="${basedir}/ear/reportworker/WEB-INF/lib" resource="${basedir}/ear/default/WEB-INF/lib" failonerror="false" overwrite="true"/>
    <symlink link="${basedir}/ear/reportworker/WEB-INF/classes" resource="${basedir}/ear/default/WEB-INF/classes" failonerror="false" overwrite="true"/>
    <symlink link="${basedir}/ear/migration/WEB-INF/lib" resource="${basedir}/ear/default/WEB-INF/lib" failonerror="false" overwrite="true"/>
    <symlink link="${basedir}/ear/migration/WEB-INF/classes" resource="${basedir}/ear/default/WEB-INF/classes" failonerror="false" overwrite="true"/>
    <symlink link="${basedir}/ear/mapreduce/WEB-INF/lib" resource="${basedir}/ear/default/WEB-INF/lib" failonerror="false" overwrite="true"/>
    <symlink link="${basedir}/ear/mapreduce/WEB-INF/classes" resource="${basedir}/ear/default/WEB-INF/classes" failonerror="false" overwrite="true"/>
  </target>
  
  <target name="devmode" depends="javac" description="Run development mode">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="src"/>
        <path refid="gwt.project.class.path"/>
      </classpath>
      <jvmarg value="-Xmx256M"/>
      <arg value="-startupUrl"/>
      <arg value="index.html"/>
      <arg line="-war"/>
      <arg value="ear/default"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="${gwt.args}"/>
      <arg value="com.google.sampling.experiential.PacoEventserver"/>
    </java>
  </target>

<!--
Test targets suppressed because -junit argument was not specified when running webAppCreator.
-->
  <target name="javac.tests" depends="javac" description="Compiles test code">
    <javac srcdir="tests" includes="**" encoding="utf-8"
      source="1.5" target="1.5" nowarn="true"
      destdir="war/WEB-INF/classes"
      debug="true" debuglevel="lines,vars,source">
      <classpath location="lib/junit-4.10.jar"/>
      <classpath refid="gwt.project.class.path"/>
    </javac>
  </target>
  
  <target name="test.dev" depends="javac.tests" description="Run development mode tests">
    <mkdir dir="reports/htmlunit.dev" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m" />
      <sysproperty key="gwt.args" value="-standardsMode -logLevel WARN" />
      <sysproperty key="java.awt.headless" value="true" />
      <classpath>
        <pathelement location="src" />
        <pathelement location="tests" />
        <path refid="gwt.project.class.path" />
        <pathelement location="lib/junit-4.10.jar" />
      </classpath>
      <batchtest todir="reports/htmlunit.dev" >
        <fileset dir="tests" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>
  </target>

  <target name="test.prod" depends="javac.tests" description="Run production mode tests">
    <mkdir dir="reports/htmlunit.prod" />
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <jvmarg line="-Xmx256m" />
      <sysproperty key="gwt.args" value="-prod -standardsMode -logLevel WARN -standardsMode -out www-test" />
      <sysproperty key="java.awt.headless" value="true" />
      <classpath>
        <pathelement location="src" />
        <pathelement location="tests" />
        <path refid="gwt.project.class.path" />
        <pathelement location="lib/junit-4.10.jar" />
      </classpath>
      <batchtest todir="reports/htmlunit.prod" >
        <fileset dir="tests" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" />
      <formatter type="xml" />
    </junit>
  </target>

  <target name="test" description="Run development and production mode tests">
    <antcall target="test.dev" />
    <!--  <antcall target="test.prod" /> -->
  </target>

  <target name="build" depends="copyjars,datanucleusenhance" description="Build this project" />

  <target name="ear" depends="build" description="Create an ear file">
    <zip destfile="paco.ear" basedir="ear"/>
  </target>

  <target name="clean" description="Cleans this project">
    <delete dir="ear/default/WEB-INF/classes" failonerror="false" />
    <delete dir="ear/default/pacoserver" failonerror="false" />
  </target>
  
  <target name="prep-and-deploy">
    <antcall target="prep-for-deploy"/>
    <antcall target="deploy"/>
  </target>
  
  <target name="prep-for-deploy">
    <antcall target="change-appname-version_db_prop"/>
  </target>
  
  <target name="change-appname-version_db_prop">
    <echo message="Changing config in all modules" />
    <foreach target="change-appname-version_db_prop-in-each-module" param="configFile">
      <path>
        <fileset dir="ear">
          <filename name="${module.config.file}" />
          <depth max="2" />
        </fileset>
        <fileset dir="ear">
          <filename name="${main.file}" />
          <depth max="2" />
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="change-appname-version_db_prop-in-each-module">
    <echo message="${configFile}" />
    <basename property="filename" file="${configFile}"/>
    <dirname property="module.dirname" file="${configFile}" />
    <copy file="${configFile}" tofile="${configFile}.bak"></copy>
    <xslt in="${configFile}" out="${module.dirname}/local-${filename}"
      style="${change.appname.version.dbprops.xsl}">
      <param name="appName" expression="${app.name}" />
      <param name="appVersion" expression="${app.version}" />
      <param name="localSqlUrl" expression="${local.sql.url}" />
      <param name="cloudSqlUrl" expression="${cloud.sql.url}" />
      <param name="localSqlUsername" expression="${local.sql.username}" />
      <param name="cloudSqlUsername" expression="${cloud.sql.username}" />
      <param name="localSqlPassword" expression="${local.sql.password}" />
      <param name="cloudSqlPassword" expression="${cloud.sql.password}" />
    </xslt>
    <move file="${module.dirname}/local-${filename}" tofile="${configFile}" />
  </target>
 
   <target name="deploy">
    <echo message="Deploying to ${deploy.url}"></echo>
    <exec executable="/bin/sh">
      <arg value="-c" />
      <arg value="${deploy.url}"/>
    </exec>
    <echo message="Deploy - Finished" />
  </target>
</project>

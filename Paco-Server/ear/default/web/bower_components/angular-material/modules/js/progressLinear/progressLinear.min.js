/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.0-rc1-master-d74f93a
 */
!function(e,a,r){"use strict";function t(e,t,n){function i(e,a,r){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),d}function d(i,d,u){function v(){u.$observe("value",function(e){var a=s(e);d.attr("aria-valuenow",a),b()!=l&&g($,a)}),u.$observe("mdBufferValue",function(e){g(w,s(e))}),u.$observe("mdMode",function(e){switch(e){case l:case c:case o:case m:C.removeClass("ng-hide"),C.removeClass(h),C.addClass(h="md-mode-"+e);break;default:C.removeClass(h),C.addClass("ng-hide"),h=r}})}function f(){if(a.isUndefined(u.mdMode)){var e=a.isDefined(u.value),r=e?o:m,i="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";n.debug(t.supplant(i,[r])),d.attr("md-mode",r),u.mdMode=r}}function b(){var e=u.mdMode;if(e)switch(e){case o:case m:case c:case l:break;default:e=r}return e}function g(e,r){if(b()){var n=t.supplant("translateX({0}%) scale({1},1)",[(r-100)/2,r/100]),i=p({transform:n});a.element(e).css(i)}}e(d);var h,p=t.dom.animator.toCss,w=a.element(d[0].querySelector(".md-bar1")),$=a.element(d[0].querySelector(".md-bar2")),C=a.element(d[0].querySelector(".md-container"));f(),v()}function s(e){return Math.max(0,Math.min(e||0,100))}var o="determinate",m="indeterminate",c="buffer",l="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:i}}a.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",t),t.$inject=["$mdTheming","$mdUtil","$log"]}(window,window.angular);
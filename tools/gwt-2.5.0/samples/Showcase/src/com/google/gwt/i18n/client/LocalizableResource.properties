mainMenuTitle = GWT Examples
mainSubTitle = Showcase of Features
mainTitle = Google Web Toolkit
mainLinkHomepage = GWT Homepage
mainLinkExamples = More Examples

categoryI18N = Internationalization
categoryLists = Lists and Menus
categoryOther = Other Features
categoryPanels = Panels
categoryPopups = Popups
categoryTables = Tables
categoryTextInput = Text Input
categoryWidgets = Widgets

contentWidgetExample = Example
contentWidgetSource = Source Code
contentWidgetStyle = CSS Style

cwAbsolutePanelName = Absolute Panel
cwAbsolutePanelDescription = An absolute panel positions all of its children absolutely, allowing them to overlap.
cwAbsolutePanelClickMe = Click Me!
cwAbsolutePanelHelloWorld = Hello World
cwAbsolutePanelLeft = <b>Left:</b>
cwAbsolutePanelItemsToMove = <b>Items to move:</b>
cwAbsolutePanelTop = <b>Top:</b>
cwAbsolutePanelWidgetNames = Hello World, Button, Grid
cwAnimationName = Animations
cwAnimationDescription = Animate your application with timed effects.
cwAnimationStart = Start
cwAnimationCancel = Cancel
cwAnimationOptions = Animation Options
cwBasicButtonName = Basic Button
cwBasicButtonDescription = Basic button widgets
cwBasicButtonClickMessage = Stop poking me!
cwBasicButtonDisabled = Disabled Button
cwBasicButtonNormal = Normal Button
cwBasicPopupName = Basic Popup
cwBasicPopupDescription = GWT provides the framework to create a custom popup.
cwBasicPopupClickOutsideInstructions = Click anywhere outside this popup to make it disappear.
cwBasicPopupInstructions = <b>Click an image to see full size:</b>
cwBasicPopupShowButton = Show Basic Popup
cwBasicTextName = Basic Text
cwBasicTextDescription = GWT includes the standard complement of text-entry widgets, each of which supports keyboard and selection events you can use to control text entry. In particular, notice that the selection range for each widget is updated whenever you press a key.
cwBasicTextAreaLabel = <b>Text area:</b>
cwBasicTextNormalLabel = <b>Normal text box:</b>
cwBasicTextPasswordLabel = <b>Password text box:</b>
cwBasicTextReadOnly = read only
cwBasicTextSelected = Selected
cwBidiFormattingName = Bidirectional Text Formatting
cwBidiFormattingDescription = Class BidiFormatter contains methods to protect a string (for example, a Hebrew topic name) from being garbled and/or garbling what follows it when displayed in the opposite-direction context (for example, an English UI).
cwBidiFormattingArg0Label = <b>Argument {0}:</b>
cwBidiFormattingArg1Label = <b>Argument {1}:</b>
cwBidiFormattingArg2Label = <b>Argument {2}:</b>
cwBidiFormattingNonbidiFormattedLabel = <b>Message formatted without BidiFormatter:</b>
cwBidiFormattingBidiFormattedLabel = <b>Message formatted with BidiFormatter:</b>
cwBidiFormattingLinkText = This example interacts with the sample interface:
cwBidiFormattingTemplateLabel = <b>Message template:</b>
cwBidiInputName = Bidirectional Text Input
cwBidiInputDescription = The TextBox and TextArea widgets implement the HasDirectionEstimator interface. With a direction estimator defined, these widgets adjust their direction automatically according to the text entered so far. A direction estimator is defined by default when at least one of the application's locales is right-to-left.
cwBidiInputBidiAreaLabel = <b>The following TextArea has the default direction estimator in effect, and is thus bidi-aware. Check it by replacing the right-to-left text with some English, e.g. the sample strings above:</b>
cwBidiInputRtlAreaLabel = Without a direction estimator, the widget's direction is unaffected by the value the user types in. This makes the entry of opposite-direction text confusing and inconvenient.<br><b>Try typing "(212) 765 4321" or "Hi, how are you?" into the following right-to-left TextArea (which had the direction estimator turned off):</b>
cwCheckBoxName = Checkbox
cwCheckBoxDescription = Basic Checkbox Widgets
cwCheckBoxCheckAll = <b>Check all days that you are available:</b>
cwCheckBoxDays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
cwConstantsExampleDescription = Interface Constants makes it possible to localize strings, numbers, and maps of strings onto strings. This example isn't terribly exciting, but it does demonstrate how to localize constants. The labels and color choices below are provided by the localized implementation of the sample interface ExampleConstants.
cwConstantsExampleName = Constants
cwConstantsExampleLinkText = This example interacts with the sample interface:
cwConstantsWithLookupExampleDescription = Interface ConstantsWithLookup makes it possible to dynamically look up localized values using method names as string keys.
cwConstantsWithLookupExampleLinkText = This example interacts with the sample interface:
cwConstantsWithLookupExampleMethodName = <b>Name of method:</b>
cwConstantsWithLookupExampleName = Constants With Lookup
cwConstantsWithLookupExampleResults = <b>Lookup results:</b>
cwConstantsWithLookupExampleNoInput = <Please enter a method name above>
cwConstantsWithLookupExampleNoMatches = <Not found>
cwCookiesName = Cookies
cwCookiesDescription = Track users with ease and save data on the client side using cookies.
cwCookiesDeleteCookie = Delete
cwCookiesExistingLabel = <b>Existing Cookies:</b>
cwCookiesInvalidCookie = You must specify a cookie name
cwCookiesNameLabel = <b>Name:</b>
cwCookiesSetCookie = Set Cookie
cwCookiesValueLabel = <b>Value:</b>
cwCustomButtonName = Custom Button
cwCustomButtonDescription = PushButtons and ToggleButtons allow you to customize the look of your buttons
cwCustomButtonPush = <b>Push Buttons:</b>
cwCustomButtonToggle = <b>Toggle Buttons:</b>
cwDatePickerName = Date Picker
cwDatePickerDescription = Let users select a date using the DatePicker.
cwDatePickerBoxLabel = <br><br><br><b>DateBox with popup DatePicker:</b>
cwDatePickerLabel = <b>Permanent DatePicker:</b>
cwDateTimeFormatName = Date Time Format
cwDateTimeFormatDescription = Class DateTimeFormat supports locale-sensitive formatting and parsing of date and time values, like NumberFormat, using a flexible pattern-based syntax. Both custom patterns and standard patterns are supported.
cwDateTimeFormatFailedToParseInput = Unable to parse input
cwDateTimeFormatFormattedLabel = <b>Formatted value:</b>
cwDateTimeFormatInvalidPattern = Invalid pattern
cwDateTimeFormatPatternLabel = <b>Pattern:</b>
cwDateTimeFormatPatterns = Full Date/Time, Long Date/Time, Medium Date/Time, Short Date/Time, Full Date, Long Date, Medium Date, Short Date, Full Time, Long Time, Medium Time, Short Time, Custom
cwDateTimeFormatValueLabel = <b>Value to format:</b>
cwDecoratorPanelFormDescription = Description:
cwDecoratorPanelFormName = Name:
cwDecoratorPanelFormTitle = Enter Search Criteria
cwDecoratorPanelName = Decorator Panel
cwDecoratorPanelDescription = Add rounded corners to any Widget using the Decorator Panel.
cwDialogBoxName = Dialog Box
cwDialogBoxDescription = The draggable DialogBox resembles a window and includes a title bar.  You can adjust to opacity to allow some of the background to show through the popup.
cwDialogBoxMakeTransparent = Make Translucent
cwDialogBoxCaption = Sample DialogBox
cwDialogBoxClose = Close
cwDialogBoxDetails = This is an example of a standard dialog box component.
cwDialogBoxItem = item
cwDialogBoxListBoxInfo = This list box demonstrates that you can drag the popup over it. This obscure corner case renders incorrectly for many other libraries.
cwDialogBoxShowButton = Show Dialog Box
cwDictionaryExampleName = Dictionary
cwDictionaryExampleDescription = Using the Dictionary class, you can lookup localized values within JavaScript objects defined in the host HTML page rather than compiling them into your GWT code. This is useful if your translations change frequently, because your HTML server can emit updated translations into the host page HTML as often as needed. It can also a useful way to integrate a GWT module with existing localized web applications. Note that a dictionary's values depend only on the host page HTML and are not influenced by the GWT locale client property. For this example, the JavaScript variable declaration appears in the source for this HTML page.
cwDictionaryExampleLinkText = <b>This example interacts with the following JavaScript variable:</b>
cwDisclosurePanelName = Disclosure Panel
cwDisclosurePanelDescription = A Disclosure Panel will show or hide its contents when the user clicks on the header text.  The contents can be simple text, or any Widget, such as an image or advanced options in a form.
cwDisclosurePanelFormAdvancedCriteria = Advanced Criteria
cwDisclosurePanelFormDescription = Description:
cwDisclosurePanelFormGender = Gender:
cwDisclosurePanelFormGenderOptions = male, female
cwDisclosurePanelFormLocation = Location:
cwDisclosurePanelFormName = Name:
cwDisclosurePanelFormTitle = <b>Enter Search Criteria</b>
cwDockPanelName = Dock Panel
cwDockPanelDescription = A Dock Panel aligns its content using compass directions.
cwDockPanelCenter = This is a <code>ScrollPanel</code> contained at the center of a <code>DockPanel</code>.  By putting some fairly large contents in the middle and setting its size explicitly, it becomes a scrollable area within the page, but without requiring the use of an IFRAME.<br><br>Here's quite a bit more meaningless text that will serve primarily to make this thing scroll off the bottom of its visible area.  Otherwise, you might have to make it really, really small in order to see the nifty scroll bars!
cwDockPanelEast = This is the east component
cwDockPanelNorth1 = This is the first north component
cwDockPanelNorth2 = This is the second north component
cwDockPanelSouth1 = This is the first south component
cwDockPanelSouth2 = This is the second south component
cwDockPanelWest = This is the west component
cwFileUploadName = File Upload
cwFileUploadDescription = Upload files asynchronously using AJAX file uploads.
cwFileUploadNoFileError = You must select a file to upload
cwFileUploadSelectFile = <b>Select a file:</b>
cwFileUploadSuccessful = File uploaded!
cwFileUploadButton = Upload File
cwFlexTableName = Flex Table
cwFlexTableDescription = The Flex Table supports row spans and column spans, allowing you to layout data in a variety of ways.
cwFlexTableAddRow = Add a row
cwFlexTableDetails = This is a FlexTable that supports <B>colspans</B> and <B>rowspans</B>.  You can use it to format your page or as a special purpose table.
cwFlexTableRemoveRow = Remove a row
cwFlowPanelName = Flow Panel
cwFlowPanelDescription = A Flow Panel lets its content flow naturally.
cwFlowPanelItem = Item
cwFrameName = Frames
cwFrameDescription = Embed content from other sites into your page using the Frame, a wrapper around an IFRAME element.
cwFrameSetLocation = Set Location
cwGridName = Grid
cwGridDescription = A simple grid
cwHorizontalPanelName = Horizontal Panel
cwHorizontalPanelDescription = A Horizontal Panel aligns its content horizontally without allowing it to wrap.  Resize the page to see how the content maintains its horizontal alignment.
cwHorizontalPanelButton = Button
cwHyperlinkName = Hyperlink
cwHyperlinkDescription = Embed your page with Hyperlinks to navigate to different sections.  Hyperlinks create history tokens, allowing users to return to a previous state using the browser back button.
cwHyperlinkChoose = <b>Choose a section:</b>
cwListBoxName = List Box
cwListBoxDescription = Built-in selection box and drop down lists
cwListBoxCars = compact, sedan, coupe, convertible, SUV, truck
cwListBoxCategories = Cars, Sports, Vacation Spots
cwListBoxSelectAll = <b>Select all that apply:</b>
cwListBoxSelectCategory = <b>Select a category:</b>
cwListBoxSports = Baseball, Basketball, Football, Hockey, Lacrosse, Polo, Soccer, Softball, Water Polo
cwListBoxVacations = Carribean, Grand Canyon, Paris, Italy, New York, Las Vegas
cwMenuBarName = Menu Bar
cwMenuBarDescription = The Menu Bar can be used to navigate through many options.  It also supports nested sub menus.
cwMenuBarEditCategory = Edit
cwMenuBarEditOptions = Undo, Redo, Cut, Copy, Paste
cwMenuBarFileCategory = File
cwMenuBarFileOptions = New, Open, Close, Recent, Exit
cwMenuBarFileRecents = Fishing in the desert.txt, How to tame a wild parrot, Idiots Guide to Emu Farms
cwMenuBarGWTOptions = Download, Examples, Source Code, GWT wit' the program
cwMenuBarHelpCategory = Help
cwMenuBarHelpOptions = Contents, Fortune Cookie, About GWT
cwMenuBarPrompts = Thank you for selecting a menu item, A fine selection indeed, Don't you have anything better to do than select menu items?, Try something else, this is just a menu!, Another wasted click
cwMessagesExampleName = Messages
cwMessagesExampleDescription = Interface Messages provides a way to create strongly-typed parameterized messages that are checked for correctness during compilation.
cwMessagesExampleArg0Label = <b>Argument {0}:</b>
cwMessagesExampleArg1Label = <b>Argument {1}:</b>
cwMessagesExampleArg2Label = <b>Argument {2}:</b>
cwMessagesExampleFormattedLabel = <b>Formatted message:</b>
cwMessagesExampleLinkText = This example interacts with the sample interface:
cwMessagesExampleTemplateLabel = <b>Message template:</b>
cwNumberFormatName = Number Format
cwNumberFormatDescription = Class NumberFormat supports locale-sensitive formatting and parsing of numbers using a flexible pattern-based syntax. In addition to custom patterns, several standard patterns are also available for convenience.
cwNumberFormatFailedToParseInput = Unable to parse input
cwNumberFormatFormattedLabel = <b>Formatted value:</b>
cwNumberFormatInvalidPattern = Invalid pattern
cwNumberFormatPatternLabel = <b>Pattern:</b>
cwNumberFormatPatterns = Decimal, Currency, Scientific, Percent, Custom
cwNumberFormatValueLabel = <b>Value to format:</b>
cwPluralFormsExampleName = Plural Forms
cwPluralFormsExampleDescription = Plural Forms provide a way to create message translations that depend on the count of something.
cwPluralFormsExampleArg0Label = <b>Argument {0}:</b>
cwPluralFormsExampleFormattedLabel = <b>Formatted message:</b>
cwPluralFormsExampleLinkText = This example interacts with the sample interface:
cwRadioButtonName = Radio Button
cwRadioButtonDescription = Basic RadioButton Widget
cwRadioButtonColors = blue, red, yellow, green
cwRadioButtonSelectColor = <b>Select your favorite color:</b>
cwRadioButtonSelectSport = <b>Select your favorite sport:</b>
cwRadioButtonSports = Baseball, Basketball, Football, Hockey, Soccer, Water Polo
cwRichTextName = Rich Text
cwRichTextDescription = The Rich Text Area is supported on all major browsers, and will fall back gracefully to the level of functionality supported on each.
cwSplitLayoutPanelName = Split Layout Panel
cwSplitLayoutPanelDescription = Give users the freedom to decide how to allocate space using this split panel.
cwSplitLayoutPanelCenter = This is some text to show how the contents on either side of the splitter flow.
cwSplitLayoutPanelEast = This is the east component.
cwSplitLayoutPanelNorth1 = This is the first north component.
cwSplitLayoutPanelNorth2 = This is the second north component.
cwSplitLayoutPanelSouth1 = This is the first south component.
cwSplitLayoutPanelSouth2 = This is the second south component.
cwSplitLayoutPanelWest = This is the west component.
cwStackLayoutPanelName = Stack Layout Panel
cwStackLayoutPanelDescription = The StackLayoutPanel stacks its children vertically, displaying only one at a time, with a header for each child which the user can click to display.  This is useful for vertical menu systems.
cwStackLayoutPanelContactsHeader = Contacts
cwStackLayoutPanelContacts = Benoit Mandelbrot, Albert Einstein, Rene Descartes, Bob Saget, Ludwig von Beethoven, Richard Feynman, Alan Turing, John von Neumann
cwStackLayoutPanelContactsEmails = benoit@example.com, albert@example.com, rene@example.com, bob@example.com, ludwig@example.com, richard@example.com, alan@example.com, john@example.com
cwStackLayoutPanelMailHeader = Mail
cwStackLayoutPanelMailFolders = Inbox, Drafts, Templates, Sent, Trash
cwStackLayoutPanelFiltersHeader = Filters
cwStackLayoutPanelFilters = All, Starred, Read, Unread, Recent, Sent by me
cwStackPanelName = Stack Panel
cwStackPanelDescription = The StackPanel stacks its children vertically, displaying only one at a time, with a header for each child which the user can click to display.  This is useful for vertical menu systems.
cwStackPanelContactsHeader = Contacts
cwStackPanelContacts = Benoit Mandelbrot, Albert Einstein, Rene Descartes, Bob Saget, Ludwig von Beethoven, Richard Feynman, Alan Turing, John von Neumann
cwStackPanelContactsEmails = benoit@example.com, albert@example.com, rene@example.com, bob@example.com, ludwig@example.com, richard@example.com, alan@example.com, john@example.com
cwStackPanelMailHeader = Mail
cwStackPanelMailFolders = Inbox, Drafts, Templates, Sent, Trash
cwStackPanelFiltersHeader = Filters
cwStackPanelFilters = All, Starred, Read, Unread, Recent, Sent by me
cwSuggestBoxName = Suggest Box
cwSuggestBoxDescription = Generate suggestions via RPC calls to the server or static data on the page
cwSuggestBoxLabel = <b>Choose a word:</b>
cwSuggestBoxWords =  1337, apple, about, ant, bruce, banana, bobv, canada, coconut, compiler, donut, deferred binding, dessert topping, eclair, ecc, frog attack, floor wax, fitz, google, gosh, gwt, hollis, haskell, hammer, in the flinks, internets, ipso facto, jat, jgw, java, jens, knorton, kaitlyn, kangaroo, la grange, lars, love, morrildl, max, maddie, mloofle, mmendez, nail, narnia, null, optimizations, obfuscation, original, ping pong, polymorphic, pleather, quotidian, quality, qu'est-ce que c'est, ready state, ruby, rdayal, subversion, superclass, scottb, tobyr, the dans, ~ tilde, undefined, unit tests, under 100ms, vtbl, vidalia, vector graphics, w3c, web experience, work around, w00t!, xml, xargs, xeno, yacc, yank (the vi command), zealot, zoe, zebra
cwTabPanelName = Tab Layout Panel
cwTabPanelDescription = Divide content over multiple tabs.
cwTabPanelTab0 = Click one of the tabs to see more content.
cwTabPanelTab2 = Tabs are highly customizable using CSS.
cwTabPanelTabs = Home, GWT Logo, More Info
cwTreeName = Tree
cwTreeDescription = Dynamic Tree Widget supports lazy loading of data via RPC calls to the server
cwTreeDynamicLabel = <b>Dynamic Tree:</b>
cwTreeItem = Item
cwTreeStaticLabel = <b>Static Tree:</b>
cwTreeComposers = Beethoven, Brahms, Mozart
cwTreeConcertos = Concertos
cwTreeQuartets = Quartets
cwTreeSonatas = Sonatas
cwTreeSymphonies = Symphonies
cwTreeBeethovenWorkConcertos = No. 1 - C, No. 2 - B-Flat Major, No. 3 - C Minor, No. 4 - G Major, No. 5 - E-Flat Major
cwTreeBeethovenWorkQuartets = Six String Quartets, Three String Quartets, Grosse Fugue for String Quartets
cwTreeBeethovenWorkSonatas = Sonata in A Minor, Sonata in F Major
cwTreeBeethovenWorkSymphonies = No. 2 - D Major, No. 2 - D Major, No. 3 - E-Flat Major, No. 4 - B-Flat Major, No. 5 - C Minor, No. 6 - F Major, No. 7 - A Major, No. 8 - F Major, No. 9 - D Minor
cwTreeBrahmsWorkConcertos = Violin Concerto, Double Concerto - A Minor, Piano Concerto No. 1 - D Minor, Piano Concerto No. 2 - B-Flat Major
cwTreeBrahmsWorkQuartets = Piano Quartet No. 1 - G Minor, Piano Quartet No. 2 - A Major, Piano Quartet No. 3 - C Minor, String Quartet No. 3 - B-Flat Minor
cwTreeBrahmsWorkSonatas = Two Sonatas for Clarinet - F Minor, Two Sonatas for Clarinet - E-Flat Major
cwTreeBrahmsWorkSymphonies = No. 1 - C Minor, No. 2 - D Minor, No. 3 - F Major, No. 4 - E Minor
cwTreeMozartWorkConcertos = Piano Concerto No. 12, Piano Concerto No. 17, Clarinet Concerto, Violin Concerto No. 5, Violin Concerto No. 4
cwVerticalPanelName = Vertical Panel
cwVerticalPanelDescription = A Vertical Panel aligns its content vertically without allowing it to wrap.  Resize the page to see how the content maintains its vertical alignment.
cwVerticalPanelButton = Button

# The following constants need to be translated in all languages.
categoryCells = Cell Widgets
contactDatabaseCategories=Family,Friends,Coworkers,Businesses,Contacts
contactInfoFormTitle = Contact Info
contactInfoFormFirstName = First Name:
contactInfoFormLastName = Last Name:
contactInfoFormCategory = Category:
contactInfoFormBirthday = Birthday:
contactInfoFormAddress = Address:
contactInfoFormUpdateButton = Update Contact
contactInfoFormCreateButton = Create Contact
cwCellBrowserName = Cell Browser
cwCellBrowserDescription = Browser through dynamic data using the CellBrowser.
cwCellBrowserSelected = Selected:
cwCellListName = Cell List
cwCellListDescription = Render a large, custom list quickly using CellList.
cwCellListGenerateButton = Generate 50 Contacts
cwCellSamplerName = Cell Sampler
cwCellSamplerDescription = The table below contains an example of most Cells provided in the API. Editable cells remember changes between table redraws until the changes are committed.
cwCellSampleRedrawButton = Redraw Table
cwCellSampleCommitButton = Commit Changes
cwCellTableName = Cell Table
cwCellTableDescription = Do you want to display large amounts of data in your application? Use CellTable to render large tables quickly.
cwCellTableColumnAddress = Address
cwCellTableColumnCategory = Category
cwCellTableColumnFirstName = First Name
cwCellTableColumnLastName = Last Name
cwCellTreeName = Cell Tree
cwCellTreeDescription = Render large trees dynamically using CellTree.
cwCellTreeSelected = Selected:
cwCellValidationName = Cell Validation
cwCellValidationDescription = Validate user data as they enter it using cell validation techniques. Cells will maintain their edited state until you confirm the change. The fields below turn blue while the address is validated, then turn red if the address is invalid.
cwCellValidationColumnAddress = Address
cwCellValidationColumnName = Name
cwCellValidationError = ERROR: Address must be of the form: ### &lt;street name&gt;
cwCustomDataGridName = Custom Data Grid
cwCustomDataGridDescription = Customize the structure of a DataGrid with expandable rows or messages that span the width table.
cwCustomDataGridColumnAddress = Address
cwCustomDataGridColumnAge = Age
cwCustomDataGridColumnCategory = Category
cwCustomDataGridColumnFirstName = First Name
cwCustomDataGridColumnLastName = Last Name
cwCustomDataGridEmpty = There is no data to display
cwDataGridName = Data Grid
cwDataGridDescription = Use DataGrid to render large amounts of data in your enterprise application. DataGrid has a fixed header and footer, with a scrollable content area.
cwDataGridColumnAddress = Address
cwDataGridColumnAge = Age
cwDataGridColumnCategory = Category
cwDataGridColumnFirstName = First Name
cwDataGridColumnLastName = Last Name
cwDataGridEmpty = There is no data to display
